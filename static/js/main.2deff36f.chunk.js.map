{"version":3,"sources":["providers/wallets.ts","context/walletContext.ts","components/WalletLoader.tsx","reducers/walletReducer.ts","components/Transactions.tsx","components/SpeedDial.tsx","components/PSTDrawer.tsx","components/TransactionModal.tsx","components/Tokens.tsx","components/TransactionDrawer.tsx","components/Camera.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["getArweaveInstance","Arweave","init","host","port","addWallet","wallet","a","arweave","address","wallets","jwkToAddress","ar","getBalance","balance","winstonToAr","console","log","getTokens","axios","post","query","res","tokens","data","transactions","edges","vertoContracts","map","node","tags","filter","tag","name","value","smartweaveContracts","edge","contracts","Set","concat","Promise","all","contract","readContract","then","contractState","balances","ticker","tokenBalances","getTxns","undefined","to","cursor","searchQuery","catch","err","getFee","size","get","sendTransfer","transfer","key","createTransaction","target","quantity","arToWinston","amount","transaction","addTag","sign","response","sendTokens","interactWriteDryRun","qty","function","type","interactWrite","txId","toString","uploadFile","arrayBuffer","buffer","forEach","updateTokens","token","timeLeft","block","network","getInfo","height","Math","floor","initWalletState","WalletContext","createContext","state","dispatch","WalletLoader","props","toast","useToast","React","useContext","useState","loading","setLoading","setAddress","onDrop","acceptedFiles","reader","FileReader","onabort","onerror","onload","event","walletObject","JSON","parse","result","walletDeets","set","stringify","onClose","payload","title","status","duration","position","description","readAsText","loadWalletFromMnemonic","mnemonic","getKeyFromMnemonic","addAddress","align","w","borderStyle","borderWidth","getRootProps","getInputProps","flexDirection","padding","fontSize","textAlign","placeholder","onChange","evt","isDisabled","onClick","walletReducer","action","existingWallets","length","push","picture","Transactions","txns","setTxns","setName","setValue","setFilter","useEffect","fTxns","tTxns","Txns","getTransactions","retrieveTransactionsForTag","getTxnsWithCursor","txnsWithCursor","h","defaultValue","direction","spacing","bottom","right","allowToggle","allowMultiple","txn","bg","border","borderColor","whiteSpace","overflow","textOverflow","id","columns","fee","recipient","Fragment","owner","Txn","my","leftIcon","left","aria-label","icon","SpeedDialItem","label","clickHandler","yPos","isInline","isRound","SpeedDial","ref","children","isOpen","setIsOpen","wrapperRef","useRef","items","child","isValidElement","handleClickOutside","current","contains","document","addEventListener","removeEventListener","style","index","cloneElement","PSTBalances","total","setTotal","totalBalance","Object","entries","maxWidth","PSTVault","vault","keys","PSTDrawer","close","vaultTime","setVault","blockTimeLeft","end","placement","src","settings","setting","mb","base","sm","md","lg","xl","variant","mr","TransferModal","modal","setOpen","setAmount","setFee","setToAddress","next","setNext","validAmount","setValid","updateFee","cost","initiateTransfer","setMax","parseFloat","closeOnOverlayClick","isCentered","closeModal","isInvalid","e","onBlur","toFixed","toLocaleString","minimumFractionDigits","split","color","AddToken","valid","update","updatedTokens","Tokens","openModal","setTo","open","currentPST","setPST","Blob","random","slice","initTokenTransfer","message","alignItems","maximumFractionDigits","fontWeight","minWidth","borderY","py","closeOnBlur","justifySelf","zIndex","as","FaCaretRight","Tags","TransactionDrawer","setData","setTags","fetch","blob","handleClose","handleUpload","startsWith","setTimeout","contents","newTags","top","CameraWindow","setTxnOpen","dataUri","setDataUri","onTakePhotoAnimationDone","imageType","IMAGE_TYPES","JPG","idealFacingMode","FACING_MODES","ENVIRONMENT","isImageMirror","App","useReducer","useDisclosure","onOpen","openCamera","setCamera","loadWallet","WalletModal","Provider","theme","isFitted","del","Camera","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.2deff36f.chunk.js","sourcesContent":["import Arweave from 'arweave'\nimport axios from 'axios'\nimport { readContract, interactWriteDryRun, interactWrite } from 'smartweave'\n//@ts-ignore\nimport { generateKeyPair } from 'human-crypto-keys'\nimport { tokenBalance } from '../context/walletContext'\nimport { JWKInterface } from 'arweave/node/lib/wallet'\n\nconst getArweaveInstance = () => {\n  return Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n}\n\nexport const addWallet = async (wallet: any): Promise<{ address: string, balance: string }> => {\n  let arweave = getArweaveInstance()\n  let address = ''\n  if (typeof wallet === \"string\") address = wallet;\n  else address = await arweave.wallets.jwkToAddress(wallet)\n  let balance = arweave.ar.winstonToAr(await arweave.wallets.getBalance(address))\n  console.log(address);\n  console.log(balance);\n\n  return { address, balance }\n}\n\nexport const getTokens = async (address: string): Promise<any[]> => {\n  let arweave = getArweaveInstance()\n\n  let res = await axios.post('https://arweave.net/graphql', {\n    query: `query {\n      transactions(first:20,\n          owners:[\"${address}\"],\n          tags: [{\n              name: \"Exchange\",\n            values:[\"Verto\"]\n          }, {name:\"Type\", values:[\"Buy\", \"Sell\"]}]\n      ) {\n          edges {\n              node {\n                  id\n                  tags {\n                    name\n                    value\n                  }\n              }\n          }\n      }\n  }`\n  })\n  let tokens = res.data.data.transactions.edges\n  let vertoContracts = tokens.map((node: any) => node.node.tags.filter((tag: { name: string, value: string }) => tag.name === \"Token\")[0].value)\n  res = await axios.post('https://arweave.net:443/graphql', {\n    query: `query {\n      transactions(first:20,\n        \towners:[\"${address}\"]\n          tags: [{\n              name: \"App-Name\",\n            values:[\"SmartWeaveAction\"]\n          }]\n      ) {\n          edges {\n              node {\n                  id\n                  tags {\n                    name\n                    value\n                  }\n              }\n          }\n      }\n  }`})\n  console.log('Verto contract interactions', vertoContracts)\n  let smartweaveContracts = res.data.data.transactions.edges.map((edge: any) => edge.node.tags.filter((tag: any) => (tag.name === 'Contract'))[0].value)\n  console.log('Generic Smartweave contract interactions', smartweaveContracts)\n  let contracts = [...new Set(vertoContracts.concat(smartweaveContracts))]\n  let tokenBalances = await Promise.all(contracts.map((contract: any) =>\n    readContract(arweave, contract).then(contractState => {\n      console.log(contractState)\n      if (contractState.balances) {\n        return { 'balance': contractState.balances[address], 'ticker': contractState.ticker, 'contract': contract, contractState: contractState }\n      }\n      else return null\n    })))\n\n  return tokenBalances\n}\n\nexport interface gQLParams {\n  address?: string,\n  name?: string,\n  value?: string,\n  to?: string,\n  cursor?: string\n}\n\nexport const getTxns = async ({ address = undefined, name = undefined, value = undefined, to = undefined, cursor = undefined }: gQLParams): Promise<any> => {\n  let searchQuery = `first: 10 \n    ${address ? 'owners:[\"' + address + '\"]' : ''}\n    ${cursor ? 'after:\"' + cursor + '\"' : ''} \n    ${name ? 'tags:{name:\"' + name + '\",values:[\"' + value + '\"]}' : ''}\n    ${to ? 'recipients:  [\"' + to + '\"]' : ''}`\n  return axios.post('https://arweave.net/graphql', {\n    query: `query {\n                transactions(${searchQuery}\n                 ) {\n                  edges {\n                    cursor\n                    node {\n                      id\n                      recipient\n                      tags {\n                        name\n                        value\n                      }\n                      fee {\n                        winston\n                        ar\n                      }\n                      quantity {\n                        winston\n                        ar\n                      }\n                    }\n                  }\n                }\n              }`\n  })\n    .then((res) => {\n      return res.data.data.transactions.edges\n    })\n    .catch((err) => {\n      console.log(err)\n      return []\n    })\n}\n\n\nexport const getFee = async (size: number): Promise<string> => {\n  let res = await axios.get(`https://arweave.net:443/price/${size}`)\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  return arweave.ar.winstonToAr(res.data)\n}\n\nexport const sendTransfer = async (transfer: any, key: any): Promise<string> => {\n  try {\n    let arweave = Arweave.init({\n      host: 'arweave.net',\n      port: 443,\n    })\n    let transaction = await arweave.createTransaction({\n      target: transfer.to,\n      quantity: arweave.ar.arToWinston(transfer.amount)\n    }, key);\n\n    transaction.addTag('App-Name', 'ArMob 2.0')\n    await arweave.transactions.sign(transaction, key);\n\n    const response = await arweave.transactions.post(transaction);\n    console.log(response);\n  }\n  catch (err) {\n    console.log(`Error sending tranfer - ${err}`)\n    return `Error submitting transaction - ${err}`\n  }\n  return 'Transaction submitted successfully'\n}\n\nexport const sendTokens = async (contract: string, amount: number, target: string, key: any): Promise<string | boolean> => {\n  try {\n    let arweave = getArweaveInstance()\n    let res = await interactWriteDryRun(arweave, key, contract, {\n      target: target,\n      qty: amount,\n      function: 'transfer'\n    })\n    console.log('Dry-run result is:', res)\n    if (res.type === 'ok') {\n      let txId = await interactWrite(arweave, key, contract, {\n        target: target,\n        qty: amount,\n        function: 'transfer'\n      })\n      console.log(res)\n      return txId\n    }\n    return \"success!\"\n  }\n  catch (err) {\n    console.log(err)\n    return (err.toString())\n  }\n}\n\nexport const uploadFile = async (data: File, key: JWKInterface, tags: { name: string; value: string; }[]) => {\n  try {\n    let arweave = getArweaveInstance()\n    let buffer = await data.arrayBuffer()\n    let transaction = await arweave.createTransaction({ data: buffer }, key)\n    tags.forEach((tag) => transaction.addTag(tag.name, tag.value))\n    await arweave.transactions.sign(transaction, key)\n    const response = await arweave.transactions.post(transaction);\n    console.log(response);\n  }\n  catch (err) {\n    console.log(`Error sending tranfer - ${err}`)\n    return `Error submitting transaction - ${err}`\n  }\n  return 'Transaction submitted successfully'\n}\n\nexport const updateTokens = async (tokens: tokenBalance[], address: string): Promise<tokenBalance[] | false> => {\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  try {\n    let tokenBalances = await Promise.all(tokens.map((token: tokenBalance) =>\n      readContract(arweave, token.contract).then(contractState => {\n        console.log(contractState)\n        if (contractState.balances)\n          return { 'balance': contractState.balances[address] as number, 'ticker': contractState.ticker as string, 'contract': token.contract, contractState: contractState }\n        else return { 'balance': 0, 'ticker': '', 'contract': token.contract, contractState: contractState }\n      })))\n    return tokenBalances\n  }\n  catch (err) {\n    console.log('Error updating tokens', err)\n    return false\n  }\n}\n\nexport const generate = async (): Promise<string> => {\n  return (await generateKeyPair('rsa', { modulusLength: 4096, format: 'raw-pem' })).mnemonic\n}\n\nexport const timeLeft = async (block: number): Promise<string> => {\n  let arweave = getArweaveInstance()\n  let res = await arweave.network.getInfo()\n  let timeLeft = (block - res.height)/720\n  if (timeLeft > 1) return `${Math.floor(timeLeft)} more days`\n  else if (timeLeft > 0.041) return `${Math.floor(timeLeft*24)} more hours`\n  else return 'less than 1 hour'\n}","import { createContext } from 'react'\n\nexport type tokenBalance = {\n    ticker: string,\n    balance: number,\n    contract: string,\n    contractState: any\n}\n\nexport type wallet = {\n    address: string,\n    key?: any\n}\nexport type walletState = {\n    key : any,\n    balance: string,\n    address: string,\n    tokens?: tokenBalance[],\n    wallets?: wallet[],\n    picture?: string\n}\nexport const initWalletState: walletState = {\n        key: {} as any,\n        balance: '',\n        address: ''\n}\n\nconst WalletContext = createContext<{state:walletState, dispatch: React.Dispatch<any>}>({state: initWalletState, dispatch: () => null} )\n\nexport { WalletContext as default }","import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport { Box, Button, Input, Spinner, Stack, Text, useToast } from '@chakra-ui/core'\nimport { set } from 'idb-keyval'\nimport { addWallet, getTokens } from '../providers/wallets'\nimport WalletContext from '../context/walletContext'\nimport { getKeyFromMnemonic } from 'arweave-mnemonic-keys'\n\nconst WalletLoader = (props: any) => {\n  const toast = useToast()\n  const { dispatch } = React.useContext(WalletContext)\n  const [loading, setLoading] = React.useState(false)\n  const [address, setAddress] = React.useState('')\n\n  const onDrop = async (acceptedFiles: any) => {\n    const reader = new FileReader()\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = async function (event) {\n      setLoading(true)\n      if (acceptedFiles[0].type === \"application/json\") {\n        try {\n          let walletObject = JSON.parse(event!.target!.result as string)\n          let walletDeets = await addWallet(walletObject)\n          let tokens = await getTokens(walletDeets.address);\n          await set('wallet', JSON.stringify(walletObject))\n          props.onClose();\n          dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: walletObject, tokens: tokens } })\n        }\n        catch (err) {\n          console.log('Invalid json in wallet file')\n          toast({\n            title: 'Error loading wallet',\n            status: 'error',\n            duration: 3000,\n            position: 'bottom-left',\n            description: 'Invalid JSON in wallet file'\n          })\n        }\n      }\n      else {\n        console.log('Invalid file type')\n        toast({\n          title: 'Error loading wallet',\n          status: 'error',\n          duration: 3000,\n          position: 'bottom-left',\n          description: 'Invalid file type'\n        })\n      }\n      setLoading(false)\n    }\n    try {\n      reader.readAsText(acceptedFiles[0])\n    }\n    catch (err) {\n      console.log('Invalid file type')\n      toast({\n        title: 'Error loading wallet',\n        status: 'error',\n        duration: 3000,\n        position: 'bottom-left',\n        description: 'Invalid file type'\n      })\n    }\n  }\n\n  const loadWalletFromMnemonic = async (mnemonic: string) => {\n    setLoading(true)\n    let walletObject = await getKeyFromMnemonic(mnemonic);\n    let walletDeets = await addWallet(walletObject);\n    let tokens = await getTokens(walletDeets.address);\n    await set('wallet', JSON.stringify(walletObject))\n    setLoading(false)\n    props.onClose();\n    dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: walletObject, tokens: tokens } })\n  }\n\n  const addAddress = async () => {\n    setLoading(true)\n    let walletDeets = await addWallet(address);\n    let tokens = await getTokens(address);\n    await set('wallet', address)\n    dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: '', tokens: tokens } })\n    props.onClose();\n  }\n\n  return (<Stack align=\"center\">\n    {loading ? <Spinner /> :\n      <Box w=\"100%\" borderStyle='dashed' borderWidth=\"2px\">\n        <Dropzone onDrop={onDrop}>\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                <Box flexDirection=\"row\" padding={3}><Text fontSize={14} textAlign=\"center\">Drop a wallet file or click to load wallet</Text></Box>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n      </Box>\n    }\n    {!loading && <Stack w=\"100%\">\n      <Input w=\"93%%\" placeholder=\"Wallet mnemonic\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAddress(evt.target.value) }} />\n      <Button isDisabled={(address === '')} onClick={() => loadWalletFromMnemonic(address)}>Load Wallet</Button>\n    </Stack>}\n    {!loading && <Stack w=\"100%\">\n      <Input w=\"93%%\" placeholder=\"Read-only wallet address\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAddress(evt.target.value) }} />\n      <Button isDisabled={(address === '')} onClick={() => addAddress()}>Track Address</Button>\n    </Stack>}\n  </Stack>\n  )\n}\n\nexport default WalletLoader","import { walletState, wallet } from '../context/walletContext';\n\nconst walletReducer = (state: walletState, action: { type: string, payload: any }): walletState => {\n    console.log('Current state is:', state)\n    console.log('Action requested is:', action)\n    switch (action.type) {\n        case 'ADD_WALLET': {\n            let existingWallets = state.wallets?.filter((wallet: wallet)=> wallet.address === action.payload.address)\n            let wallets = state.wallets\n            if (existingWallets && existingWallets.length === 0)\n                wallets?.push({address:action.payload.address, key:action.payload.key})\n            return {\n            ...state,\n            key: action.payload.key,\n            balance: action.payload.balance,\n            address: action.payload.address,\n            tokens: action.payload.tokens,\n            wallets: wallets\n        }};\n        case 'UPDATE_TOKENS': {\n            return {\n                ...state,\n                tokens: action.payload.tokens\n            }\n        };\n        case 'SET_PICTURE': {\n            return {\n                ...state,\n                picture: action.payload.picture\n            }\n        }\n        default: return state\n    }\n}\n\nexport default walletReducer","import React from 'react'\nimport { Text, Accordion, AccordionItem, AccordionButton, AccordionPanel, AccordionIcon, SimpleGrid, Box, Heading, Button, Input, Stack, Spinner, IconButton, PopoverTrigger, Popover, PopoverContent, Select, Radio, RadioGroup, } from '@chakra-ui/core'\nimport WalletContext from '../context/walletContext'\nimport { getTxns } from '../providers/wallets'\nimport { FaCaretRight, FaSearch } from 'react-icons/fa'\n\nconst Txn = (txn: any) => {\n  return (\n    <AccordionItem key={txn.id} textAlign=\"left\">\n      <AccordionButton bg=\"white\" border=\"1px\" borderColor=\"grey\">\n        <Text whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">ID: {txn.node.id}</Text>\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel border=\"1px\">\n        <Heading size=\"xs\" fontSize=\"12px\">Metadata</Heading>\n        <SimpleGrid columns={2}>\n          <Text fontSize={10}>Fee: </Text>\n          <Text fontSize={10}>{txn.node.fee.ar} AR</Text>\n          {txn.node.recipient && <React.Fragment><Text fontSize={10}>Recipient: </Text>\n            <Text fontSize={10}>{txn.node.recipient}</Text>\n            <Text fontSize={10}>Amount: </Text>\n            <Text fontSize={10}>{txn.node.quantity.ar} AR</Text></React.Fragment>}\n            {txn.node.owner && <React.Fragment><Text fontSize={10}>From: </Text>\n            <Text fontSize={10}>{txn.node.owner.address}</Text>\n            <Text fontSize={10}>Amount: </Text>\n            <Text fontSize={10}>{txn.node.quantity.ar} AR</Text></React.Fragment>}\n        </SimpleGrid>\n        {txn.node.tags.length > 0 && <Heading size=\"xs\" fontSize=\"12px\">Transaction Tags</Heading>}\n        {txn.node.tags.map((tag: any) => {\n          return (<SimpleGrid key={txn.node.id + tag.name} columns={2} textAlign=\"left\" overflow=\"auto\">\n            <Text fontSize={10} key={tag.toString()}>{tag.name}</Text>\n            <Text fontSize={10} key={tag.name + tag.value}>{tag.value}</Text>\n          </SimpleGrid>\n          )\n        })}\n      </AccordionPanel>\n    </AccordionItem>\n\n  )\n}\nconst Transactions = () => {\n  const { state } = React.useContext(WalletContext)\n  const [loading, setLoading] = React.useState(false)\n  const [txns, setTxns] = React.useState([])\n  const [name, setName] = React.useState('')\n  const [value, setValue] = React.useState('')\n  const [filter, setFilter] = React.useState('')\n\n\n  React.useEffect(() => {\n    async function getTransactions () {\n      setLoading(true)\n      switch(filter) {\n      case 'from':\n        let fTxns = await getTxns({address : state.address})\n        setTxns(fTxns)\n        break;\n      case 'to':\n        let tTxns = await getTxns({ to: state.address})\n        setTxns(tTxns)\n        break;\n      default:\n        let Txns = await getTxns({ address: state.address })\n        setTxns(Txns)\n      }\n      setLoading(false)\n    }\n    if (state.address !== '') {\n      getTransactions()\n    }\n    else setTxns([])\n  }, [state.address, filter])\n\n  const retrieveTransactionsForTag = async () => {\n    setLoading(true)\n    let txns = await getTxns({ address: state.address, name: name, value: value})\n    setTxns(txns)\n    setLoading(false)\n  }\n\n  const getTxnsWithCursor = async () => {\n    setLoading(true)\n    //@ts-ignore\n    let cursor = txns[txns.length-1].cursor\n    let txnsWithCursor\n    filter === 'from' ? txnsWithCursor = await getTxns({ address: state.address, cursor: cursor})\n    :\n    txnsWithCursor = await getTxns({ to: state.address, cursor: cursor})\n    setTxns(txnsWithCursor)\n    setLoading(false)\n  }\n\n  return (<Box h=\"100%\">\n    <RadioGroup onChange={(evt) => setFilter(evt.toString())} value={filter} defaultValue=\"from\">\n      <Stack direction=\"row\" spacing={4}>\n        <Radio value=\"from\">From Wallet</Radio>\n        <Radio value=\"to\">To Wallet</Radio>\n      </Stack>\n    </RadioGroup>\n    {!loading ? <>\n     <Accordion allowToggle allowMultiple w=\"100%\">\n      {/* @ts-ignore */}\n      {txns.length > 0 ? txns.map((txn) => Txn(txn)) : null}\n    </Accordion>\n    <Button my={2} isDisabled={txns.length < 10} leftIcon={<FaCaretRight />} onClick={() => getTxnsWithCursor()}>Next 10</Button>\n      <Popover>\n        <PopoverTrigger>\n          <IconButton position=\"fixed\" bottom=\"6%\" left=\"5%\" aria-label=\"search transactions\" icon={<FaSearch />} />\n        </PopoverTrigger>\n        <PopoverContent>\n          <Stack>\n            <Input placeholder=\"Name\" value={name} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => setName(evt.target.value)} />\n            <Input placeholder=\"Value\" value={value} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => setValue(evt.target.value)} />\n            <Button isDisabled={(name === '' || value === '')}\n              onClick={() => {\n                retrieveTransactionsForTag()\n                setName('')\n                setValue('')\n              }}>\n              Search by Tag</Button>\n          </Stack>\n        </PopoverContent>\n      </Popover>\n    </>\n      :\n      <Spinner position=\"fixed\" bottom=\"50%\" right=\"50%\" />}\n  </Box>\n  )\n}\n\nexport default Transactions\n\n//    <IconButton aria-label=\"left\" icon={<FaCaretLeft />} onClick={() => getTxnsWithCursor('left')}/>\n//<IconButton aria-label=\"right\" icon={<FaCaretRight />} onClick={() => getTxnsWithCursor('right')}/>\n ","import React from 'react';\nimport { FaPlus, FaMinus} from 'react-icons/fa'\nimport { Stack, IconButton, Text } from '@chakra-ui/core'\n\ninterface SpeedDialItemProps {\n  icon: any, //Must pass an iconType object\n  label: string\n  clickHandler: () => void,\n  yPos?: string\n}\n\nexport const SpeedDialItem: React.FC<SpeedDialItemProps> = ({ icon, label, clickHandler, yPos }: SpeedDialItemProps) => {\n  return (\n    <Stack isInline\n      position=\"fixed\"\n      bottom={yPos}\n      right=\"20px\"\n      align=\"center\">\n      <Text fontSize={11}>{label}</Text>\n      <IconButton aria-label=\"wallet\" icon={icon} isRound onClick={async () => clickHandler()} />\n    </Stack>\n  )\n}\n\nexport const SpeedDial: React.FC = ({ children }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const wrapperRef = React.useRef(null);\n  //@ts-ignore\n  const items = children && children.filter((child: any) => React.isValidElement(child))\n  var yPos = 100\n  const useOutsideAlerter = (ref: any) => {\n    React.useEffect(() => {\n      function handleClickOutside(event: MouseEvent) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setIsOpen(false)\n        }\n      }\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  }\n  useOutsideAlerter(wrapperRef);\n  //@ts-ignore\n  return (<div ref={wrapperRef} style={{ position: \"fixed\", bottom: \"50px\", right: \"20px\" }}>\n    <IconButton aria-label=\"open\" isRound icon={isOpen ? <FaMinus /> : <FaPlus />} onClick={(evt: React.MouseEvent) => setIsOpen(!isOpen) } />\n    {/* @ts-ignore */}\n    {isOpen && items!.map((child, index) => {\n      if (React.isValidElement(child)) {\n        //@ts-ignore\n        return React.cloneElement(child, {...child.props,yPos: (yPos + 50*(index)).toString()+'px'})\n      }} )}\n  </div>)\n}\n\n/*  Once Framer Motion tells me what's wrong with Safari\n  return (<div ref={wrapperRef} style={{position: \"fixed\", bottom: \"50px\", right:\"20px\"}}>\n   <IconButton aria-label=\"open\" isRound icon={isOpen ? <FaMinus />: <FaPlus />}  onClick={(evt: React.MouseEvent) => {console.log(evt);setIsOpen(!isOpen)}} />\n    <AnimatePresence>\n      {isOpen &&\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ y: -20, opacity: 1 }}\n          exit={{ y: 20, opacity: 0 }}\n        ><SpeedDialItem key=\"1234\" /></motion.div>}\n    </AnimatePresence>\n  </div>)\n  */","\nimport React from 'react'\nimport {\n    Drawer,\n    DrawerBody,\n    DrawerFooter,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton, Button,\n    HStack,\n    Stack,\n    Text,\n    Avatar,\n    AccordionButton,\n    Accordion,\n    AccordionIcon,\n    AccordionPanel,\n    AccordionItem\n} from \"@chakra-ui/core\";\nimport WalletContext from '../context/walletContext'\nimport { timeLeft } from '../providers/wallets'\n\ninterface PSTDrawerProps {\n    isOpen: boolean,\n    close: () => void,\n    contractState: any\n}\n\ninterface VaultProps {\n    vault: {\n        [address: string]: any\n    }\n}\n\nconst PSTBalances = (balances: any) => {\n    const [total, setTotal] = React.useState(0)\n\n    React.useEffect(() => {\n        let totalBalance = 0\n        for (const [key, value] of Object.entries(balances.balances)) {\n            totalBalance+=value as number\n        }\n        setTotal(totalBalance)\n    },[balances])\n\n    return (\n        <Accordion allowToggle w=\"100%\">\n            <AccordionItem>\n                <AccordionButton bg=\"white\" border=\"1px\" borderColor=\"grey\">\n                    <Text>All balances - {total} in circulation</Text>\n                    <AccordionIcon />\n                </AccordionButton>\n                <AccordionPanel border=\"1px\">\n                    {Object.entries(balances.balances).map((balance: any[]) => {\n                        return (<HStack w=\"100%\" key={balance[0] + 1}>\n                            <Text key={balance[0]} maxWidth=\"200px\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">{balance[0]}:</Text>\n                            <Text key={balance[0] + balance[0]}>{balance[1].toString()}</Text>\n                        </HStack>)\n                    })\n                    }\n                </AccordionPanel>\n            </AccordionItem>\n        </Accordion>\n    )\n}\n\nconst PSTVault: React.FC<VaultProps> = ({vault}) => {\n    const [total, setTotal] = React.useState(0)\n    \n    React.useEffect(() => {\n        let totalBalance = 0\n        for (const [key, value] of Object.entries(vault)) {\n            if (value[0]) totalBalance += value[0].balance\n        }\n        setTotal(totalBalance)\n    },[vault])\n\n    return (\n        <Accordion allowToggle w=\"100%\">\n            <AccordionItem>\n                <AccordionButton bg=\"white\" border=\"1px\" borderColor=\"grey\">\n                    <Text>Vaulted balances: {total}</Text>\n                    <AccordionIcon />\n                </AccordionButton>\n                <AccordionPanel border=\"1px\">\n                    {Object.keys(vault).map((key) => {\n                        if (vault[key].length > 0) \n                        return (<HStack w=\"100%\" key={key + 1}>\n                            <Text key={key} maxWidth=\"200px\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">{key}:</Text>\n                            <Text key={vault[key][0].toString()}>{vault[key][0].balance}</Text>\n                    </HStack>)\n                    else return null\n                    })\n                    }\n                </AccordionPanel>\n            </AccordionItem>\n        </Accordion>\n    )\n}\nconst PSTDrawer: React.FC<PSTDrawerProps> = ({ isOpen, close, contractState }) => {\n    const { state } = React.useContext(WalletContext)\n    const [vaultTime, setVault] = React.useState('')\n\n    React.useEffect(() => {\n        if (contractState.vault && contractState.vault[state.address]) {\n            console.log(`found it`)\n            let blockTimeLeft = contractState.vault[state.address][0]?.end\n            console.log(blockTimeLeft)\n           if (blockTimeLeft)\n             timeLeft(blockTimeLeft).then((res) => setVault(res))\n        }\n    }, [contractState])\n\n    return (<>\n        {contractState.balances && <Drawer isOpen={isOpen} placement=\"right\" onClose={close} size=\"full\">\n            <DrawerOverlay />\n            <DrawerContent >\n                <DrawerCloseButton onClick={close} />\n                <DrawerHeader >\n                    <HStack>\n                        <Text>{contractState.ticker}</Text>\n                        <Avatar src={'https://arweave.net/' + contractState.settings.filter((setting: any) => setting[0] === 'communityLogo')[0][1]} />\n                    </HStack>\n                </DrawerHeader>\n                <DrawerBody>\n                    <Stack>\n                        <Text>Balance: {contractState.balances[state.address]}</Text>\n                        {contractState.vault[state.address] &&\n                            contractState.vault[state.address].map((balance: any) =>\n                                <>\n                                    <Text>Vaulted Balance: {balance.balance}</Text>\n                                    <Text>{vaultTime} left in vault</Text>\n                                </>)\n                        }\n                    </Stack>\n                    {contractState.balances && <PSTBalances balances={contractState.balances} />}\n                    {contractState.vault && <PSTVault vault={contractState.vault} />}\n                </DrawerBody>\n                {/* margin is a hack to get buttons to show on mobile browsers */}\n                <DrawerFooter mb={{ base: \"25%\", sm: \"25%\", md: \"25%\", lg: 0, xl: 0 }}>\n                    <Button variant=\"outline\" onClick={close} mr={3}>Close</Button>\n                </DrawerFooter>\n            </DrawerContent>\n        </Drawer>}\n    </>)\n}\n\nexport default PSTDrawer","import React, { useState, useEffect, Fragment } from 'react';\nimport {\n    Text, Button, Input, Stack,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    useToast, InputRightElement, InputGroup, FormControl, FormErrorMessage, Modal\n} from \"@chakra-ui/core\";\nimport { getFee, sendTransfer } from '../providers/wallets'\n\nimport WalletContext from '../context/walletContext'\n\nconst TransferModal = (props: any) => {\n    const [isOpen, setOpen] = useState(props.props.modal)\n    const { state } = React.useContext(WalletContext)\n    const [amount, setAmount] = useState('')\n    const [fee, setFee] = useState('0')\n    const [to, setToAddress] = useState('')\n    const [next, setNext] = useState(false)\n    const [validAmount, setValid] = useState(true)\n    const toast = useToast()\n\n\n    const updateFee = () => {\n        getFee(0).then(cost => setFee(cost))\n            .catch(() => toast({\n                title: 'Error',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom-left',\n                description: 'Error getting fee, check your network connection and try again'\n            }))\n    }\n\n    useEffect(() => {\n        setOpen(props.props.modal)\n        updateFee()\n    }, [props.props.modal])\n\n    const initiateTransfer = async () => {\n        let transferDeets = {\n            'to': to,\n            'fee': fee,\n            'txnId': '',\n            'amount': amount,\n        }\n        sendTransfer(transferDeets, state.key)\n        setOpen(false)\n    }\n\n    const validateAmount = () => {\n        amount === '' ?\n            setValid(true) :\n            setValid(parseFloat((parseFloat(state.balance) - parseFloat(fee) - parseFloat(amount)).toFixed(12)) >= 0)\n    }\n\n    const setMax = async () => {\n        let balance = parseFloat(state.balance)\n        let amount = balance - parseFloat(fee)\n        setAmount(amount.toString())\n    }\n    \n    return (<Modal closeOnOverlayClick={false} isCentered isOpen={isOpen} onClose={() => {\n        setOpen(false)\n        props.props.closeModal()\n    }}>\n        <ModalOverlay />\n        <ModalContent>\n            <ModalHeader>Send AR</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n                <Stack spacing={2}>\n                    <Stack>\n                        <Text>From:</Text>\n                        <Text fontSize={14} whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">{state.address}</Text>\n                    </Stack>\n                    {!next && <Fragment>\n                        <Stack spacing={2}>\n                            <FormControl isInvalid={to === state.address}>\n                                <Input placeholder=\"Send to Arweave wallet address\"\n                                    value={to}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setToAddress(e.target.value)}\n                                    onBlur={updateFee}\n                                    isInvalid={to === state.address} />\n                                <FormErrorMessage>Recipient address cannot be the same as the sending address</FormErrorMessage>\n                            </FormControl>\n\n                            <FormControl isInvalid={!validAmount}>\n                                <InputGroup>\n                                    <Input\n                                        placeholder=\"Amount\"\n                                        value={amount}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setAmount(e.target.value)}\n                                        onBlur={() => validateAmount()}\n                                        isInvalid={!validAmount}\n                                    />\n                                    <InputRightElement children='AR' />\n                                </InputGroup>\n                                <FormErrorMessage>Amount cannot be greater than wallet balance</FormErrorMessage>\n                            </FormControl>\n                            <Button border=\"none\" onClick={setMax}>Use Wallet Balance</Button>\n\n                            <Text>Fee: {fee} AR</Text>\n                            <Text>Total (including fee): {(parseFloat(fee) + parseFloat(amount ? amount : '0')).toLocaleString('en-US', { style: 'decimal', minimumFractionDigits: (fee !== '0') ? fee.split('.')[1].length : 1 })} AR</Text>\n                        </Stack>\n                    </Fragment>}\n                    {next && <Fragment>\n                        <Stack spacing={2}>\n                            <Stack>\n                                <Text>To:</Text>\n                                <Text fontSize={14}>{to}</Text>\n                            </Stack>\n                            <Stack isInline>\n                                <Stack>\n                                    <Text>Sending</Text>\n                                    <Text>{amount} AR</Text>\n                                </Stack>\n                                <Stack>\n                                    <Text>Fee</Text>\n                                    <Text>{fee} AR</Text>\n                                </Stack>\n                            </Stack>\n                            <Stack>\n                                <Text>Total</Text>\n                                <Text>{(parseFloat(fee) + parseFloat(amount ? amount : '0')).toLocaleString('en-US', { style: 'decimal', minimumFractionDigits: (fee !== '0') ? fee.split('.')[1].length : 1 })} AR</Text>\n                            </Stack>\n                            <Stack>\n                                <Text>Balance after transaction</Text>\n                                <Text>{(parseFloat(state.balance) - parseFloat(fee) - parseFloat(amount)).toString()} AR</Text>\n                            </Stack>\n                        </Stack>\n                    </Fragment>}\n                </Stack>\n            </ModalBody>\n            <ModalFooter>\n                {!next ? <Button bg=\"#333\" color=\"white\" w=\"100%\" isDisabled={!validAmount || (to === '')} onClick={() => setNext(true)}>Next</Button> :\n                    <Button bg=\"#333\" color=\"white\" w=\"100%\" onClick={function () {\n                        initiateTransfer();\n                        setOpen(false)\n                        props.props.closeModal();\n                    }}>Confirm and Send AR</Button>}\n            </ModalFooter>\n        </ModalContent>\n    </Modal>\n    )\n}\n\nexport default TransferModal","import {\n    Box, Button,\n    Divider, FormControl,\n    FormErrorMessage, Heading, HStack, Icon, Input, Popover, PopoverArrow, PopoverBody, PopoverCloseButton, PopoverContent, PopoverHeader, PopoverTrigger, SimpleGrid,\n    Spinner, Stack, Text, useToast\n} from '@chakra-ui/core'\nimport React from 'react'\nimport { FaCaretRight } from 'react-icons/fa'\nimport WalletContext, { tokenBalance } from '../context/walletContext'\nimport { getFee, sendTokens, updateTokens } from '../providers/wallets'\nimport PSTDrawer from './PSTDrawer'\nimport TransferModal from './TransactionModal'\n\nconst AddToken = (props: any) => {\n    const { state, dispatch } = React.useContext(WalletContext)\n    const [address, setAddress] = React.useState('')\n    const [loading, setLoading] = React.useState(false)\n    const [valid, setValid] = React.useState(true)\n    const toast = useToast()\n\n    const update = async () => {\n        setLoading(true)\n        console.log(props)\n        let tokens = [...state.tokens]\n        tokens.push({ contract: address, balance: 0, ticker: '', contractState: '' })\n        let updatedTokens = await updateTokens(tokens, state.address)\n        if (updatedTokens) {\n        dispatch({ type: 'UPDATE_TOKENS', payload: { tokens: updatedTokens } })\n        }\n        else toast({\n            title: 'Error updating balances',\n            status: 'error',\n            duration: 3000,\n            position: 'bottom',\n            description: 'Please check contract ID and try again'\n        })\n        setAddress('')\n        setLoading(false)\n        props.props()\n    }\n\n    const validateToken = () => {\n        if (state.tokens!.filter((token) => token.contract === address).length > 0)\n            setValid(false)\n        else setValid(true)\n    }\n\n    return (\n        <Stack>\n            <Heading size=\"sm\">Add Custom Token</Heading>\n            <FormControl isInvalid={!valid}>\n                <Stack isInline >\n                    <Input placeholder=\"Contract ID\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAddress(evt.target.value) }}\n                        onBlur={() => validateToken()} />\n                    <Button isDisabled={loading || !valid || address === ''} onClick={() => update()}>Add Token</Button>\n                    {loading && <Spinner />}\n                </Stack>\n                <FormErrorMessage>Token already loaded</FormErrorMessage>\n            </FormControl>\n        </Stack>\n    )\n}\nconst Tokens = () => {\n    const { state } = React.useContext(WalletContext)\n    const [modal, openModal] = React.useState(false)\n    const [to, setTo] = React.useState('')\n    const [amount, setAmount] = React.useState(0)\n    const closeModal = () => openModal(false)\n    const [fee, setFee] = React.useState('')\n    const [loading, setLoading] = React.useState(false)\n    const toast = useToast();\n    const [open, setOpen] = React.useState(false)\n    const [currentPST, setPST] = React.useState({})\n\n    React.useEffect(() => {\n        getFee(new Blob([Math.random().toString().slice(-4)]).size).then((fee) => setFee(fee))\n    })\n\n    const initTokenTransfer = async (token: tokenBalance, onClose: any) => {\n        setLoading(true)\n        let message = await sendTokens(token.contract, amount, to, state.key)\n        setLoading(false)\n        onClose()\n        toast({\n            title: `Transaction Status - ${message}`,\n            status: 'info',\n            duration: 3000,\n            position: 'bottom'\n        })\n    }\n\n    const closePSTDrawer = () => setOpen(false)\n\n    return (<Box textAlign=\"left\">\n        <Text whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">Address: {state.address}</Text>\n        <SimpleGrid columns={3} my={2} alignItems=\"center\">\n            <Text>AR</Text>\n            <Text>{parseFloat(state.balance).toLocaleString(undefined,{maximumFractionDigits: 6})}</Text>\n            <Button isDisabled={!state.key} onClick={() => openModal(true)}>Send</Button>\n        </SimpleGrid>\n        <Divider my={4} />\n        <Heading align=\"center\" size=\"sm\">Profit Sharing Tokens</Heading>\n        <SimpleGrid columns={4}>\n            <Text fontWeight=\"bold\" minWidth=\"150px\">Ticker</Text>\n            <Text fontWeight=\"bold\">Balance</Text>\n        </SimpleGrid>\n        <Divider />\n        {state.tokens?.map((token: tokenBalance) => {\n            if (token) {\n            return (\n                <SimpleGrid borderY=\"1px\" borderColor=\"lightgray\" columns={4} my={2} py={1} alignItems=\"center\">\n                    <Text minWidth=\"150px\" onClick={() => {setPST(token.contractState); setOpen(true)}}>{token.ticker}</Text>\n                    <Text minWidth=\"120px\" onClick={() => {setPST(token.contractState); setOpen(true)}}>{token.balance}</Text>\n                    <Popover closeOnBlur={false}>\n                        {({ onClose }) =>\n                            <>\n                                <PopoverTrigger>\n                                    <Button justifySelf=\"end\">Send</Button>\n                                </PopoverTrigger>\n                                <PopoverContent zIndex={4}>\n                                    <PopoverArrow />\n                                    <PopoverHeader>Send Tokens</PopoverHeader>\n                                    <PopoverCloseButton />\n                                    <PopoverBody>\n                                        <Stack align=\"center\" >\n                                            {!loading ?\n                                                <Box>\n                                                    <Input my={2}\n                                                        placeholder={`Amount`}\n                                                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAmount(parseFloat(evt.target.value)) }}\n                                                    />\n                                                    <Input\n                                                        placeholder={`Address`} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setTo(evt.target.value) }} />\n                                                    <Text textAlign=\"center\">Fee: {fee}</Text>\n                                                    <Button isDisabled={!state.key} w=\"90%\" onClick={() => {\n                                                        initTokenTransfer(token, onClose);\n                                                    }}>Submit Transaction</Button>\n                                                </Box>\n                                                :\n                                                <Box>\n                                                    <Spinner />\n                                                    <Text>Submitting Transaction</Text>\n                                                </Box>\n                                            }</Stack>\n                                    </PopoverBody>\n                                </PopoverContent>\n                            </>}\n                    </Popover>\n                    <Icon justifySelf=\"end\" as={FaCaretRight} onClick={() => {setPST(token.contractState); setOpen(true)}} />\n                </SimpleGrid>\n            )\n        }})\n        }\n        <TransferModal props={{ modal, closeModal }} />\n        <Popover placement=\"top-end\">\n        {({ onClose }) => (\n        <>\n            <PopoverTrigger>\n                <Button position=\"fixed\" bottom=\"50px\" left=\"20px\">Add Custom Token</Button>\n            </PopoverTrigger>\n            <PopoverContent>\n                <PopoverCloseButton />\n                <PopoverBody>\n                    <AddToken props={onClose}/>\n                </PopoverBody>\n            </PopoverContent>\n            </> )}\n        </Popover>\n        <PSTDrawer isOpen={open} close={closePSTDrawer} contractState={currentPST} />\n    </Box>\n    )\n}\n\nexport default Tokens\n\n//<Icon position=\"fixed\" right=\"2px\" as={FaCaretRight}  />","\nimport React from 'react'\nimport {\n    Drawer,\n    DrawerBody,\n    DrawerFooter,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton, Button, Input, Box, Text, Stack,\n    useToast,\n    SimpleGrid,\n    Heading,\n    Spinner\n} from \"@chakra-ui/core\";\nimport Dropzone from 'react-dropzone'\nimport WalletContext from '../context/walletContext'\nimport { getFee, uploadFile } from '../providers/wallets'\ninterface TxnDrawerProps {\n    isOpen: boolean,\n    close: () => void,\n}\n\ninterface TagsProps {\n    tags: {\n        name: string,\n        value: string\n    }[],\n    clickHandler: (name: string, value: string) => void\n}\n\nconst Tags: React.FC<TagsProps> = ({ tags, clickHandler }) => {\n    const [name, setName] = React.useState('')\n    const [value, setValue] = React.useState('')\n    return (\n        <Stack>\n            <Heading size=\"sm\">Transacion Tags</Heading>\n            {tags.map((tag) => {\n                return (<SimpleGrid key={tag.name + tag.value} columns={2} fontSize={12}>\n                    <Text>Name: {tag.name}</Text>\n                    <Text>Value: {tag.value}</Text>\n                </SimpleGrid>)\n            }\n            )}\n            <Input placeholder=\"Name\" value={name} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => setName(evt.target.value)} />\n            <Input placeholder=\"Value\" value={value} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => setValue(evt.target.value)} />\n            <Button isDisabled={(name === '' || value === '')}\n                onClick={() => {\n                    clickHandler(name, value)\n                    setName('')\n                    setValue('')\n                }}>\n                Add Tag</Button>\n        </Stack>\n    )\n}\n\nconst TransactionDrawer: React.FC<TxnDrawerProps> = ({ isOpen, close }) => {\n    const { state, dispatch } = React.useContext(WalletContext)\n    const toast = useToast();\n    const [data, setData] = React.useState(null as any)\n    const [tags, setTags] = React.useState([] as { name: string; value: string; }[])\n    const [fee, setFee] = React.useState('0')\n    const [loading, setLoading] = React.useState(false)\n\n    React.useEffect(() => {\n        if (state.picture) {\n            fetch(state.picture).then((res) => {\n                return res.blob()\n            }).then((blob) => {\n                //@ts-ignore\n                onDrop([blob])\n                dispatch({ type: 'SET_PICTURE', payload: { picture: '' } })\n            })\n        }\n    }, [state.picture])\n\n    const tagsHandler = (name: string, value: string) => {\n        if (tags !== undefined) {\n            let newTags = [...tags!, { name, value }]\n            setTags(newTags)\n        }\n        else setTags([{ name, value }])\n    }\n\n    const handleClose = () => {\n        setData(null);\n        setTags([]);\n        close()\n    }\n\n    const handleUpload = async () => {\n        setLoading(true)\n        let res = await uploadFile(data, state.key, tags)\n        if (res.startsWith('Transaction')) {\n            toast({\n                title: 'Success',\n                status: 'success',\n                duration: 3000,\n                position: 'bottom',\n                description: 'Your file has been submitted to the blockchain'\n            })\n        }\n        else {\n            toast({\n                title: 'Error submitting transaction',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom',\n                description: res\n            })\n        }\n\n        setTimeout(() => {\n            setLoading(false)\n            handleClose()\n        }\n            , 1000)\n    }\n\n    const onDrop = async (acceptedFiles: File[]) => {\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = async function (event) {\n            if (event && event.target) {\n                let contents = acceptedFiles[0]\n                let tags = [\n                    { 'name': 'App-Name', 'value': 'ArMob 2.0' },\n                    { 'name': 'Content-Type', 'value': acceptedFiles[0].type }\n                ]\n                let fee = await getFee(acceptedFiles[0].size)\n                setFee(fee)\n                setData(contents)\n                setTags(tags)\n            }\n\n        }\n        try {\n            reader.readAsText(acceptedFiles[0])\n        }\n        catch (err) {\n            console.log('Unable to process file', err)\n            toast({\n                title: 'Error processing file',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom',\n                description: 'Please try again'\n            })\n        }\n    }\n\n    return (\n\n        <Drawer isOpen={isOpen} placement=\"right\" onClose={close} size=\"full\">\n            <DrawerOverlay />\n            <DrawerContent >\n                <DrawerCloseButton onClick={handleClose} />\n                <DrawerHeader>Upload file to Arweave</DrawerHeader>\n                <DrawerBody>\n                    {!data && <Box w=\"100%\" borderStyle='dashed' borderWidth=\"2px\">\n                        <Dropzone onDrop={onDrop}>\n                            {({ getRootProps, getInputProps }) => (\n                                <section>\n                                    <div {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        <Box flexDirection=\"row\" padding={3}><Text fontSize={14} textAlign=\"center\">Drop a file or click to select from system file picker</Text></Box>\n                                    </div>\n                                </section>\n                            )}\n                        </Dropzone>\n                    </Box>}\n                    {data && !loading && <Stack>\n                        <Text>Fee: {fee} AR</Text>\n                        <Tags tags={tags} clickHandler={tagsHandler} />\n                    </Stack>}\n                    {data && loading && <Spinner position=\"absolute\" top=\"50%\" left=\"50%\" />}\n                </DrawerBody>\n                {/* margin is a hack to get buttons to show on mobile browsers */}\n                <DrawerFooter mb={{base:\"25%\",sm:\"25%\",md:\"25%\",lg:0,xl:0}}>\n                    <Button variant=\"outline\" onClick={handleClose} mr={3}>Cancel</Button>\n                    <Button color=\"blue\" isDisabled={!data} onClick={handleUpload}>Upload File</Button>\n                </DrawerFooter>\n            </DrawerContent>\n        </Drawer>\n\n    );\n}\n\nexport default TransactionDrawer","import React from 'react'\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\nimport { Button, IconButton, Image, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Stack } from \"@chakra-ui/core\";\nimport WalletContext from '../context/walletContext'\nimport { IoMdRefreshCircle } from 'react-icons/io'\ninterface CameraProps {\n    isOpen: boolean,\n    close: (modal: string) => void,\n    setTxnOpen: () => void\n}\nconst CameraWindow: React.FC<CameraProps> = ({ isOpen, close, setTxnOpen }) => {\n    const [dataUri, setDataUri] = React.useState('');\n    const { dispatch } = React.useContext(WalletContext)\n    function handleTakePhotoAnimationDone(dataUri: string) {\n        console.log('takePhoto');\n        setDataUri(dataUri);\n    }\n\n    const handleClose = () => {\n        setDataUri('')\n        close('camera')\n    }\n    const handleImageSave = () => {\n        setDataUri('')\n        dispatch({ type: 'SET_PICTURE', payload: { picture: dataUri } })\n        setTxnOpen()\n        close('camera')\n    }\n\n    return (\n        <Modal closeOnOverlayClick={true} isOpen={isOpen} onClose={handleClose} >\n            <ModalOverlay>\n                <ModalContent>\n                    <ModalHeader></ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <Stack align=\"center\">\n                            {(dataUri) ? <Image src={dataUri} />\n                                : <Camera onTakePhotoAnimationDone={handleTakePhotoAnimationDone}\n                                    imageType={IMAGE_TYPES.JPG}\n                                    idealFacingMode={FACING_MODES.ENVIRONMENT}\n                                    isImageMirror={false}\n                                >\n                                    <IconButton aria-label=\"refresh\" icon={<IoMdRefreshCircle />} />\n                                    </Camera>\n                            }\n                            <Button isDisabled={!dataUri} onClick={handleImageSave}>Next</Button>\n                        </Stack>\n                    </ModalBody>\n                </ModalContent>\n            </ModalOverlay>\n        </Modal>\n    );\n}\n\nexport default CameraWindow","import React from 'react';\nimport {\n  theme, Tabs, TabList, TabPanels, Tab, TabPanel, ChakraProvider, Stack, Box,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton, useDisclosure, Heading, Button, Spinner\n} from '@chakra-ui/core'\nimport WalletLoader from './components/WalletLoader'\nimport WalletContext, { initWalletState } from './context/walletContext'\nimport walletReducer from './reducers/walletReducer'\nimport Transactions from './components/Transactions';\nimport { SpeedDial, SpeedDialItem } from './components/SpeedDial'\nimport Tokens from './components/Tokens';\nimport { del, get } from 'idb-keyval'\nimport { addWallet, getTokens } from './providers/wallets'\nimport { FaWallet, FaUpload, FaCameraRetro } from 'react-icons/fa';\nimport TransactionDrawer from './components/TransactionDrawer'\nimport CameraWindow from './components/Camera';\n\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(walletReducer, initWalletState)\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [open, setOpen] = React.useState(false)\n  const [openCamera, setCamera] = React.useState(false)\n  const [loading, setLoading] = React.useState(true)\n\n  const handleClose = (modal: string) => {\n    if (modal === 'txn') setOpen(false);\n    if (modal === 'camera') setCamera(false)\n  }\n\n  React.useEffect(() => {\n    const loadWallet = async (data: string) => {\n      let wallet = JSON.parse(data)\n      console.log(JSON.parse(data))\n      let walletDeets = await addWallet(wallet)\n      let tokens = await getTokens(walletDeets.address);\n      dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: wallet, tokens: tokens } })\n      setLoading(false)\n    }\n    get('wallet').then((data: any) => {\n      if (data) {\n        try {\n          loadWallet(data)\n        }\n        catch (err) { console.log('Error loading wallet', err) }\n      }\n      else setLoading(false)\n    })\n  }, [])\n\n  const WalletModal = () => {\n    return (<Modal isCentered isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Load Wallet</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <WalletLoader onClose={onClose} />\n        </ModalBody>\n        <ModalFooter>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n    )\n  }\n\n  return (\n    <WalletContext.Provider value={{ dispatch, state }}>\n      <ChakraProvider theme={theme}>\n          <Stack w=\"100%\" align=\"center\" >\n            <Heading>ArMob 2.0</Heading>\n            <Tabs isFitted align=\"center\" variant=\"enclosed-colored\">\n              <TabPanels w=\"90vw\">\n                <TabPanel>\n                {loading ? <Spinner position=\"fixed\" bottom=\"50%\" right=\"50%\" /> :\n                   state.address !== '' ?\n                    <Box>\n                      <Tokens />\n                    </Box>\n                    :\n                    <Button onClick={onOpen}>Open Wallet</Button>\n                  }\n                  \n                </TabPanel>\n                <TabPanel>\n                  {state.address !== '' ?\n                    <Transactions />\n                    :\n                    <Button onClick={onOpen}>Open Wallet</Button>\n                  }\n                </TabPanel>\n              </TabPanels>\n              <TabList position=\"fixed\" bottom=\"0px\" left=\"0px\" w=\"100vw\">\n                <Tab>Wallet</Tab>\n                <Tab>Transactions</Tab>\n              </TabList>\n            </Tabs>\n          </Stack>\n            <SpeedDial>\n              {state.address === '' &&\n                <SpeedDialItem icon={<FaWallet />} label=\"Open Wallet\" clickHandler={() => {\n                  onOpen()\n                }} />}\n              {state.address !== '' &&\n                <SpeedDialItem icon={<FaWallet />} label=\"Close Wallet\" clickHandler={async () => {\n                  await del('wallet');\n                  dispatch({ type: 'ADD_WALLET', payload: { address: '', balance: '', key: '' } });\n                }} />}\n              {state.key !== '' && <SpeedDialItem icon={<FaUpload />} label=\"Upload File\" clickHandler={() => setOpen(true)} />\n              }\n              {state.key !== '' && <SpeedDialItem icon={<FaCameraRetro />} label=\"Take Picture\" clickHandler={() => setCamera(true)} />}\n            </SpeedDial>\n          <WalletModal />\n          <TransactionDrawer isOpen={open} close={() => handleClose('txn')} />\n          <CameraWindow isOpen={openCamera} close={() => handleClose('camera')} setTxnOpen={() => setOpen(true)} />\n      </ChakraProvider>\n    </WalletContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}