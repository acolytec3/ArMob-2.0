{"version":3,"sources":["context/walletContext.ts","components/Camera.tsx","providers/wallets.ts","components/Smartweave.tsx","components/SpeedDial.tsx","providers/verto.ts","components/VertoWidget.tsx","components/PSTDrawer.tsx","components/TransactionModal.tsx","components/Tokens.tsx","components/TransactionDrawer.tsx","components/Transactions.tsx","components/WalletLoader.tsx","reducers/walletReducer.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["initWalletState","key","balance","address","tokens","tokenAddresses","wallets","WalletContext","createContext","state","dispatch","CameraWindow","isOpen","close","setTxnOpen","React","useState","dataUri","setDataUri","useContext","closeOnOverlayClick","onClose","align","src","onTakePhotoAnimationDone","console","log","imageType","IMAGE_TYPES","JPG","idealFacingMode","FACING_MODES","ENVIRONMENT","isImageMirror","aria-label","icon","isDisabled","onClick","type","payload","picture","getArweaveInstance","Arweave","init","host","port","getBlockHeight","a","arweave","network","getInfo","res","height","addWallet","wallet","jwkToAddress","ar","getBalance","winstonToAr","getToken","contractID","getContract","token","ticker","contract","contractState","getTxns","undefined","name","value","to","cursor","searchQuery","axios","post","query","then","data","transactions","edges","catch","err","getFee","size","get","sendTransfer","transfer","createTransaction","target","quantity","arToWinston","amount","transaction","addTag","sign","response","sendTokens","interactWriteDryRun","qty","function","Math","random","toString","slice","tx","tags","JSON","stringify","Object","entries","id","status","statusText","uploadFile","arrayBuffer","buffer","forEach","tag","timeLeft","currentBlock","endBlock","floor","getAllCommunityIds","hasNextPage","client","ids","api","i","j","length","push","node","pageInfo","getTxnData","txId","contractSrcTxn","filter","getData","decode","string","contractSource","getContractState","contractId","testFunction","method","params","types","param","newParams","parseInt","parseFloat","runFunction","methodType","interactWrite","interactRead","acorn","require","SmartweaveExplorer","setSource","setID","writeMethods","setWriteMethods","readMethods","setReadMethods","setContractState","getSource","parse","ecmaVersion","sourceType","body","declaration","allMethods","test","left","object","methods","getInputMethods","returnStatement","consequent","argument","properties","paramNames","declarations","map","right","placeholder","onChange","evt","w","overflow","readOnly","fontSize","isReadOnly","defaultValue","FunctionCall","values","setValue","setType","toast","useToast","txnStatus","setStatus","useDisclosure","onToggle","submitTransaction","title","duration","position","allowToggle","index","vals","newTypes","direction","in","SpeedDialItem","label","clickHandler","yPos","isInline","bottom","isRound","SpeedDial","ref","children","setIsOpen","wrapperRef","useRef","items","child","isValidElement","useEffect","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","style","cloneElement","props","getVerto","Verto","getOpenBuyDeets","verto","getTradingPosts","tPosts","getConfig","config","hasOwnProperty","fetch","publicURL","json","orders","find","order","sort","orderA","orderB","rate","totalOrders","reduce","total","amnt","averageRate","average","individualRates","volume","rates","getOpenSellDeets","createTrade","trade","createOrder","txns","executeTrade","sendOrder","VertoWidget","loading","setLoading","trades","setTrades","purchaseAmount","setAmount","convertedAmount","setConversion","maxBuy","setMax","sellAmount","setSell","sellConvertedAmount","setSellConversion","setTxns","mounted","buy","sell","getTrades","createBuy","calculateAr","handleOrder","txs","createSell","calcSalePrice","every","h","toLocaleString","maximumFractionDigits","onBlur","closeOnBlur","disabled","NaN","invalid","pst","PSTBalances","balances","setTotal","open","setOpen","totalBalance","bg","border","borderColor","maxWidth","whiteSpace","textOverflow","PSTVault","vault","keys","end","start","PSTDrawer","vaultTime","setVault","logo","setLogo","getVaultTimes","Promise","all","blockHeight","message","vaultTimes","url","settings","setting","placement","mb","base","sm","md","lg","xl","variant","mr","TransferModal","modal","fee","setFee","setToAddress","next","setNext","validAmount","setValid","updateFee","cost","description","initiateTransfer","isCentered","closeModal","spacing","isInvalid","e","toFixed","minimumFractionDigits","split","color","AddToken","setAddress","valid","update","tokenAddress","deets","Tokens","openModal","setTo","tokensLoading","setTokensLoading","currentPST","setPST","tokenList","setList","sortOption","setSort","Blob","b","fa","toUpperCase","fb","getTokens","set","getTokenDeets","getTokenAddresses","initTokenTransfer","textAlign","columns","my","alignItems","fontWeight","minWidth","pb","borderY","py","justifySelf","zIndex","as","FaCaretRight","Tags","setName","TransactionDrawer","setData","setTags","blob","onDrop","handleClose","handleUpload","startsWith","setTimeout","acceptedFiles","reader","FileReader","onabort","onerror","onload","contents","readAsText","borderStyle","borderWidth","getRootProps","getInputProps","flexDirection","padding","newTags","top","Transactions","setFilter","fTxns","tTxns","Txns","getTransactions","retrieveTransactionsForTag","getTxnsWithCursor","txnsWithCursor","defaultChecked","allowMultiple","txn","input","inputs","tokenObjects","navigator","clipboard","writeText","recipient","Fragment","owner","Txn","leftIcon","WalletLoader","copiedValue","setCopiedValue","onCopy","useClipboard","walletObject","result","walletDeets","mnemonic","loadWalletFromMnemonic","getKeyFromMnemonic","generateWallet","generateMnemonic","addAddress","createWalletFile","URL","createObjectURL","href","link","createElement","download","appendChild","click","removeChild","switchWallet","isLoaded","mt","justifyContent","justify","alignContent","walletReducer","action","existingWallets","newWallet","App","useReducer","openCamera","setCamera","loadedState","Provider","isFitted","Smartweave","Camera","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","theme","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.37dc3326.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport type token = {\n    ticker: string,\n    contract: string,\n    contractState: any\n}\n\nexport type wallet = {\n    address: string,\n    key?: any,\n    mnemonic?: string\n}\nexport type walletState = {\n    key : any,\n    mnemonic?: string\n    balance: string,\n    address: string,\n    tokens: token[],\n    wallets: wallet[],\n    picture?: string,\n    blockHeight?: number,\n    tokenAddresses?: string[]\n}\n\nexport const initWalletState: walletState = {\n        key: null as any,\n        balance: '',\n        address: '',\n        tokens: [],\n        tokenAddresses: [],\n        wallets: []\n}\n\nconst WalletContext = createContext<{state:walletState, dispatch: React.Dispatch<any>}>({state: initWalletState, dispatch: () => null} )\n\nexport { WalletContext as default }","import React from 'react'\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\nimport { Button, IconButton, Image, Modal, ModalBody, ModalCloseButton, ModalContent, ModalHeader, ModalOverlay, Stack } from \"@chakra-ui/react\";\nimport WalletContext from '../context/walletContext'\nimport { IoMdRefreshCircle } from 'react-icons/io'\ninterface CameraProps {\n    isOpen: boolean,\n    close: (modal: string) => void,\n    setTxnOpen: () => void\n}\nconst CameraWindow: React.FC<CameraProps> = ({ isOpen, close, setTxnOpen }) => {\n    const [dataUri, setDataUri] = React.useState('');\n    const { dispatch } = React.useContext(WalletContext)\n    function handleTakePhotoAnimationDone(dataUri: string) {\n        console.log('takePhoto');\n        setDataUri(dataUri);\n    }\n\n    const handleClose = () => {\n        setDataUri('')\n        close('camera')\n    }\n    const handleImageSave = () => {\n        setDataUri('')\n        dispatch({ type: 'SET_PICTURE', payload: { picture: dataUri } })\n        setTxnOpen()\n        close('camera')\n    }\n\n    return (\n        <Modal closeOnOverlayClick={true} isOpen={isOpen} onClose={handleClose} >\n            <ModalOverlay>\n                <ModalContent>\n                    <ModalHeader></ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <Stack align=\"center\">\n                            {(dataUri) ? <Image src={dataUri} />\n                                : <Camera onTakePhotoAnimationDone={handleTakePhotoAnimationDone}\n                                    imageType={IMAGE_TYPES.JPG}\n                                    idealFacingMode={FACING_MODES.ENVIRONMENT}\n                                    isImageMirror={false}\n                                >\n                                    <IconButton aria-label=\"refresh\" icon={<IoMdRefreshCircle />} />\n                                    </Camera>\n                            }\n                            <Button isDisabled={!dataUri} onClick={handleImageSave}>Next</Button>\n                        </Stack>\n                    </ModalBody>\n                </ModalContent>\n            </ModalOverlay>\n        </Modal>\n    );\n}\n\nexport default CameraWindow","import Arweave from 'arweave'\nimport axios from 'axios'\nimport { interactWriteDryRun, interactWrite, interactRead, } from 'smartweave'\nimport { getContract } from 'cacheweave'\nimport { token } from '../context/walletContext'\nimport { JWKInterface } from 'arweave/node/lib/wallet'\n\nexport const getArweaveInstance = () => {\n  return Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n}\n\nexport const getBlockHeight = async (): Promise<number> => {\n  let arweave = await getArweaveInstance()\n  let res = await arweave.network.getInfo()\n  return res.height\n}\n\nexport const addWallet = async (wallet: any): Promise<{ address: string, balance: string }> => {\n  let arweave = getArweaveInstance()\n  let address = ''\n  if (typeof wallet === \"string\") address = wallet;\n  else address = await arweave.wallets.jwkToAddress(wallet)\n  let balance = arweave.ar.winstonToAr(await arweave.wallets.getBalance(address))\n  return { address, balance }\n}\n\nexport const getToken = async (contractID: string): Promise<token> => {\n  let arweave = getArweaveInstance()\n  let token = await getContract(arweave, contractID);\n  //@ts-ignore\n  return { ticker: token.ticker, contract: contractID, contractState: token }\n}\n\nexport interface gQLParams {\n  address?: string,\n  name?: string,\n  value?: string,\n  to?: string,\n  cursor?: string\n}\n\nexport const getTxns = async ({ address = undefined, name = undefined, value = undefined, to = undefined, cursor = undefined }: gQLParams): Promise<any> => {\n  let searchQuery = `first: 10 \n    ${address ? 'owners:[\"' + address + '\"]' : ''}\n    ${cursor ? 'after:\"' + cursor + '\"' : ''} \n    ${name ? 'tags:{name:\"' + name + '\",values:[\"' + value + '\"]}' : ''}\n    ${to ? 'recipients:  [\"' + to + '\"]' : ''}`\n  return axios.post('https://arweave.net/graphql', {\n    query: `query {\n                transactions(${searchQuery}\n                 ) {\n                  edges {\n                    cursor\n                    node {\n                      id\n                      recipient\n                      tags {\n                        name\n                        value\n                      }\n                      fee {\n                        winston\n                        ar\n                      }\n                      quantity {\n                        winston\n                        ar\n                      }\n                      owner {\n                        address\n                      }\n                    }\n                  }\n                }\n              }`\n  })\n    .then((res) => {\n      return res.data.data.transactions.edges\n    })\n    .catch((err) => {\n      console.log(err)\n      return []\n    })\n}\n\n\nexport const getFee = async (size: number): Promise<string> => {\n  let res = await axios.get(`https://arweave.net:443/price/${size}`)\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  return arweave.ar.winstonToAr(res.data)\n}\n\nexport const sendTransfer = async (transfer: any, key: any): Promise<string> => {\n  try {\n    let arweave = Arweave.init({\n      host: 'arweave.net',\n      port: 443,\n    })\n    let transaction = await arweave.createTransaction({\n      target: transfer.to,\n      quantity: arweave.ar.arToWinston(transfer.amount)\n    }, key);\n\n    transaction.addTag('App-Name', 'ArMob 2.0')\n    await arweave.transactions.sign(transaction, key);\n\n    const response = await arweave.transactions.post(transaction);\n    console.log(response);\n  }\n  catch (err) {\n    console.log(`Error sending tranfer - ${err}`)\n    return `Error submitting transaction - ${err}`\n  }\n  return 'Transaction submitted successfully'\n}\n\nexport const sendTokens = async (contract: string, amount: number, target: string, key: any): Promise<string | boolean> => {\n  try {\n    let arweave = getArweaveInstance()\n    let res = await interactWriteDryRun(arweave, key, contract, {\n      target: target,\n      qty: amount,\n      function: 'transfer'\n    })\n    console.log('Dry-run result is:', res)\n    if (res.type === 'ok') {\n      const tx = await arweave.createTransaction(\n        {\n          target: target,\n          data: Math.random().toString().slice(-4),\n        },\n        key\n      );\n      let tags = {\n        'Contract': contract,\n        'App-Name': 'SmartWeaveAction',\n        'App-Version': '0.3.0',\n        'Input': JSON.stringify({\n          function: 'transfer',\n          target: target,\n          qty: amount\n        })\n      }\n\n      for (const [key, value] of Object.entries(tags)) {\n        tx.addTag(key, value.toString());\n      }\n      tx.addTag('App-Name', 'ArMob 2.0')\n      await arweave.transactions.sign(tx, key);\n\n      console.log(tx.id)\n      let status = await arweave.transactions.post(tx)\n      console.log(status.statusText)\n\n      return \"success!\"\n    }\n  }\n  catch (err) {\n    console.log(err)\n    return (err.toString())\n  }\n  return ''\n}\n\nexport const uploadFile = async (data: File, key: JWKInterface, tags: { name: string; value: string; }[]) => {\n  try {\n    let arweave = getArweaveInstance()\n    let buffer = await data.arrayBuffer()\n    let transaction = await arweave.createTransaction({ data: buffer }, key)\n    tags.forEach((tag) => transaction.addTag(tag.name, tag.value))\n    await arweave.transactions.sign(transaction, key)\n    const response = await arweave.transactions.post(transaction);\n    console.log(response);\n  }\n  catch (err) {\n    console.log(`Error sending tranfer - ${err}`)\n    return `Error submitting transaction - ${err}`\n  }\n  return 'Transaction submitted successfully'\n}\n\nexport const updateTokens = async (tokens: token[], address: string): Promise<token[] | false> => {\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n\n  try {\n    let tokenBalances = await Promise.all(tokens.map((token: token) =>\n      getContract(arweave, token.contract).then(contractState => {\n        console.log(contractState)\n        //@ts-ignore\n        if (contractState.balances)\n        //@ts-ignore\n          return { 'ticker': contractState.ticker as string, 'contract': token.contract, contractState: contractState }\n        else return { 'ticker': '', 'contract': token.contract, contractState: contractState }\n      })))\n    return tokenBalances\n  }\n  catch (err) {\n    console.log('Error updating tokens', err)\n    return false\n  }\n}\n\nexport const timeLeft = (currentBlock: number, endBlock: number): string => {\n  let timeLeft = (endBlock - currentBlock) / 720\n  if (timeLeft > 1) return `${Math.floor(timeLeft)} more days`\n  else if (timeLeft > 0.041) return `${Math.floor(timeLeft * 24)} more hours`\n  else return 'less than 1 hour'\n}\n\nexport const getAllCommunityIds = async (): Promise<string[]> => {\n  let cursor = '';\n  let hasNextPage = true;\n\n  let client = getArweaveInstance()\n\n  const ids: string[] = [];\n  while (hasNextPage) {\n    const query = {\n      query: `\n              query {\n                  transactions(\n                      tags: [\n                          { name: \"App-Name\", values: [\"SmartWeaveContract\"] }\n                          {\n                              name: \"Contract-Src\"\n                              values: [\"ngMml4jmlxu0umpiQCsHgPX2pb_Yz6YDB8f7G6j-tpI\"]\n                          }\n                      ]\n                      after: \"${cursor}\"\n                      first: 100\n                  ) {\n                      pageInfo {\n                          hasNextPage\n                      }\n                      edges {\n                          cursor\n                          node {\n                              id\n                          }\n                      }\n                  }\n              }            \n          `,\n    };\n    const res = await client.api.post('/graphql', query);\n    const data = res.data;\n\n    for (let i = 0, j = data.data.transactions.edges.length; i < j; i++) {\n      ids.push(data.data.transactions.edges[i].node.id);\n    }\n    hasNextPage = data.data.transactions.pageInfo.hasNextPage;\n\n    if (hasNextPage) {\n      cursor = data.data.transactions.edges[data.data.transactions.edges.length - 1].cursor;\n    }\n  }\n\n  return ids;\n}\n\nexport const getTxnData = async (txId: string): Promise<string> => {\n  let arweave = getArweaveInstance()\n  let query = {\n    query: `\n  query {\n    transactions(ids: [\"${txId}\"]) {\n        edges {\n            node {\n                id\n              \ttags {\n                  name\n                  value\n                }\n            }\n        }\n    }\n}`}\n  let res = await arweave.api.post('/graphql', query)\n  console.log(res)\n  let contractSrcTxn = res.data.data.transactions.edges[0].node.tags.filter((tag: any) => tag.name === 'Contract-Src')[0].value\n  console.log(contractSrcTxn)\n  let contractSource = await arweave.transactions.getData(contractSrcTxn, { decode: true, string: true }) as string\n  return contractSource;\n}\n\nexport const getContractState = async (contractId: string): Promise<any> => {\n  let arweave = getArweaveInstance()\n  return await getContract(arweave, contractId)\n}\n\nexport const testFunction = async (method: string, contractId: string, params: any, key: JWKInterface, types: any): Promise<string> => {\n  let arweave = getArweaveInstance()\n  console.log('params are')\n  console.log(params)\n  console.log('types are')\n  console.log(types)\n  let newParams = { ...params }\n  for (let param in newParams) {\n    if (types[param] === \"integer\") {\n      newParams[param] = parseInt(params[param])\n    }\n    else if (types[param] === \"float\") {\n      newParams[param] = parseFloat(params[param])\n    }\n  }\n  let res = await interactWriteDryRun(arweave, key, contractId, {\n    ...newParams,\n    function: method\n  })\n  console.log(res)\n  return res.type\n}\n\nexport const runFunction = async (method: string, contractId: string, params: any, key: JWKInterface, types: any, methodType: string): Promise<any> => {\n  let arweave = getArweaveInstance()\n  console.log('params are')\n  console.log(params)\n  console.log('types are')\n  console.log(types)\n  let newParams = { ...params }\n  for (let param in newParams) {\n    if (types[param] === \"integer\") {\n      newParams[param] = parseInt(params[param])\n    }\n    else if (types[param] === \"float\") {\n      newParams[param] = parseFloat(params[param])\n    }\n  }\n  let res: string | false\n  if (methodType === 'write') {\n    res = await interactWrite(arweave, key, contractId, {\n      ...newParams,\n      function: method\n    })\n  }\n  else res = (await interactRead(arweave, key, contractId, {\n    ...newParams,\n    function: method\n  }))\n  console.log(res)\n  return res\n}\n\n","import { Accordion, AccordionButton, AccordionIcon, AccordionItem, AccordionPanel, Box, Button, Code, Collapse, Heading, HStack, Input, List, ListItem, Radio, RadioGroup, Spinner, Text, Textarea, useDisclosure, useToast, VStack } from '@chakra-ui/react';\nimport React from 'react';\nimport WalletContext from '../context/walletContext';\nimport { getContractState, getTxnData, runFunction, testFunction } from '../providers/wallets';\nconst acorn = require(\"acorn\")\nconst walk = require(\"acorn-walk\")\ninterface FunctionCallProps {\n    name: string,\n    params: string[],\n    methodType: string,\n    contractId: string\n}\n\nconst SmartweaveExplorer = () => {\n    const [contractSource, setSource] = React.useState('')\n    const [contractId, setID] = React.useState('')\n    const [writeMethods, setWriteMethods] = React.useState([] as FunctionCallProps[])\n    const [readMethods, setReadMethods] = React.useState([] as FunctionCallProps[])\n    const [contractState, setContractState] = React.useState({} as any)\n\n\n    const getSource = async () => {\n        let res = await getTxnData(contractId)\n        setSource(res)\n        if (res) {\n            setSource(res)\n            let src = await acorn.parse(res, { ecmaVersion: \"latest\", sourceType: \"module\" })\n            if (src.body[0].declaration.id.name === 'handle') {\n                let allMethods = src.body[0].declaration.body.body.filter((node: any) => node.type === \"IfStatement\" && node.test.left.object.name === \"input\")\n                let methods = getInputMethods(allMethods)\n                setWriteMethods(methods.writeMethods.filter((method) => method.name))\n                setReadMethods(methods.readMethods.filter((method) => method.name))\n                console.log(methods)\n            }\n            res = await getContractState(contractId)\n            console.log(res)\n            setContractState(res)\n        }\n\n    }\n\n    const getInputMethods = (src: any[]): { readMethods: FunctionCallProps[], writeMethods: FunctionCallProps[] } => {\n        let readMethods: FunctionCallProps[] = []\n        let writeMethods: FunctionCallProps[] = []\n        src.forEach((node) => {\n            if (node.test.type === \"BinaryExpression\" && node.test.left.object && node.test.left.object.name === \"input\") {\n                try {\n                    let returnStatement = node.consequent.body[node.consequent.body.length - 1]     //Get write methods\n                    if (returnStatement.type === 'ReturnStatement' && returnStatement.argument.properties[0].key.name === 'state') {\n                        let params = node.consequent.body.filter((param: any) => param.type == \"VariableDeclaration\" && param.declarations[0].init.object && param.declarations[0].init.object.name === \"input\")\n                        let paramNames = params.map((param: any) => param.declarations[0].id.name)\n                        let name = node.test.right.value\n                        writeMethods.push({\n                            name: name,\n                            params: paramNames,\n                            methodType: 'write',\n                            contractId: contractId\n                        })\n                    }\n                    else {\n                        console.log('found read method')\n                      //Get read methods\n                        let params = node.consequent.body.filter((param: any) => param.type === \"VariableDeclaration\" && (\n                            (param.declarations[0].init.left && param.declarations[0].init.left.object && param.declarations[0].init.left.object.name === \"input\") ||\n                            (param.declarations[0].init.object && param.declarations[0].init.object.name === \"input\")))\n                        let paramNames = params.map((param: any) => param.declarations[0].id.name)\n                        let name = node.test.right.value\n                        readMethods.push({\n                            name: name,\n                            params: paramNames,\n                            methodType: 'read',\n                            contractId: contractId\n                        })\n                    }\n                }\n                catch (err) { console.log(err) }\n            }\n        }\n        );\n        return { readMethods, writeMethods };\n    }\n\n    return (<VStack>\n        <Input placeholder=\"Smartweave Contract ID\" value={contractId} onChange={(evt) => setID(evt.target.value)} />\n        <Button onClick={getSource}>Load Contract</Button>\n        <Heading size=\"xs\">Contract Source</Heading>\n        <Code w=\"100%\">\n            <Textarea overflow=\"scroll\" height=\"200px\" readOnly={true} fontSize='xs' isReadOnly defaultValue={contractSource} />\n        </Code>\n        <Heading size=\"xs\">Contract State</Heading>\n        <Code w=\"100%\" overflow=\"scroll\" height=\"200px\" fontSize='xs' align=\"start\">\n          {JSON.stringify(contractState, null, 2)}\n        </Code>\n        <Heading size=\"xs\">Write Methods</Heading>\n        <List>\n            {writeMethods && writeMethods.map((method: FunctionCallProps) => <ListItem>\n                <FunctionCall name={method.name} params={method.params} methodType={method.methodType} contractId={contractId} />\n            </ListItem>)}\n        </List>\n        <Heading size=\"xs\">Read Methods</Heading>\n        <List>\n            {readMethods && readMethods.map((method: FunctionCallProps) => <ListItem>\n                <FunctionCall name={method.name} params={method.params} methodType={method.methodType} contractId={contractId} />\n            </ListItem>)}\n        </List>\n    </VStack>\n    )\n}\n\nexport default SmartweaveExplorer\n\nconst FunctionCall: React.FC<FunctionCallProps> = ({ name, params, methodType, contractId }) => {\n    const [values, setValue] = React.useState({} as any)\n    const [types, setType] = React.useState({} as any)\n    const { state } = React.useContext(WalletContext)\n    const toast = useToast();\n    const [txnStatus, setStatus] = React.useState() as any\n    const { isOpen, onToggle } = useDisclosure()\n\n    const submitTransaction = async (close: () => void) => {\n        let res = await runFunction(name, contractId, values, state.key, types, methodType)\n        if (res)\n            toast({\n                title: 'Successfully submitted transaction!',\n                status: 'success',\n                duration: 3000,\n                position: 'bottom',\n            })\n        else toast({\n            title: 'Error submitting transaction',\n            status: 'error',\n            duration: 3000,\n            position: 'bottom',\n        })\n        close()\n        setStatus()\n    }\n\n    return (\n        <Accordion allowToggle>\n            <AccordionItem key={name}>\n                <AccordionButton>\n                    <Text>{name}</Text>\n                    <AccordionIcon />\n                </AccordionButton>\n                <AccordionPanel>\n                    {params.map((param, index) => {\n                        return <Box><Input key={name + param} placeholder={param} value={values[index]} onChange={(evt) => {\n                            let vals = { ...values }\n                            vals[param] = evt.target.value\n                            setValue(vals)\n                        }\n                        } />\n                            <RadioGroup name=\"param-type\" onChange={(evt) => {\n                                let newTypes = { ...types }\n                                newTypes[param] = evt.toString()\n                                setType(newTypes)\n                            }}\n                                value={types[param]}\n                                direction=\"horizontal\" >\n                                <Radio value=\"string\">String</Radio>\n                                <Radio value=\"integer\">Integer</Radio>\n                                <Radio value=\"float\">Float</Radio>\n                            </RadioGroup>\n                        </Box>\n                    })}\n                    {methodType === 'write' ? <>\n                        {!isOpen && !txnStatus && <Button onClick={() => {\n                            onToggle();\n                            testFunction(name, contractId, values, state.key, types)\n                                .then(res => setStatus(res))\n                        }}\n                        >Test Contract Method Call</Button>}\n                    </>\n                        :\n                        <>\n                            {!isOpen ? <Button onClick={() => {\n                                onToggle();\n                                runFunction(name, contractId, values, state.key, types, methodType)\n                                    .then(res => setStatus(res))\n                            }}>Read Contract</Button> :\n                                <Button onClick={() => {\n                                    onToggle();\n                                    setStatus();\n                                }}>Start Over</Button>}\n                        </>\n                    }\n                    <Collapse in={isOpen}>\n                        {methodType === 'write' ? <VStack>\n                            {txnStatus ? <Text>Transaction status is {txnStatus}</Text> : <Spinner />}\n                            <HStack>\n                                <Button onClick={() => submitTransaction(onToggle)}>Live dangerously!</Button>\n                                <Button onClick={() => {\n                                    onToggle();\n                                    setStatus();\n                                }}>Start Over</Button>\n                            </HStack>\n                            </VStack>\n                            : <Code>\n                                <Text>Method Result</Text>\n                                {txnStatus ? <Textarea isReadOnly overflow=\"scroll\" height=\"200px\" readOnly={true} fontSize='xs' defaultValue={JSON.stringify(txnStatus, null, 2)} /> : <Spinner />}\n                            </Code>\n                        }\n                    </Collapse>\n                </AccordionPanel>\n            </AccordionItem>\n        </Accordion>\n    )\n}\n","import React from 'react';\nimport { FaPlus, FaMinus} from 'react-icons/fa'\nimport { Stack, IconButton, Text } from '@chakra-ui/react'\n\ninterface SpeedDialItemProps {\n  icon: any, //Must pass an iconType object\n  label: string\n  clickHandler: () => void,\n  yPos?: string\n}\n\nexport const SpeedDialItem: React.FC<SpeedDialItemProps> = ({ icon, label, clickHandler, yPos }: SpeedDialItemProps) => {\n  return (\n    <Stack isInline\n      position=\"fixed\"\n      bottom={yPos}\n      right=\"20px\"\n      align=\"center\">\n      <Text fontSize={11}>{label}</Text>\n      <IconButton aria-label=\"wallet\" icon={icon} isRound onClick={async () => clickHandler()} />\n    </Stack>\n  )\n}\n\nexport const SpeedDial: React.FC = ({ children }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const wrapperRef = React.useRef(null);\n  //@ts-ignore\n  const items = children && children.filter((child: any) => React.isValidElement(child))\n  var yPos = 100\n  const useOutsideAlerter = (ref: any) => {\n    React.useEffect(() => {\n      function handleClickOutside(event: MouseEvent) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setIsOpen(false)\n        }\n      }\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  }\n  useOutsideAlerter(wrapperRef);\n  //@ts-ignore\n  return (<div ref={wrapperRef} style={{ position: \"fixed\", bottom: \"50px\", right: \"20px\" }}>\n    <IconButton aria-label=\"open\" isRound icon={isOpen ? <FaMinus /> : <FaPlus />} onClick={(evt: React.MouseEvent) => setIsOpen(!isOpen) } />\n    {/* @ts-ignore */}\n    {isOpen && items!.map((child, index) => {\n      if (React.isValidElement(child)) {\n        //@ts-ignore\n        return React.cloneElement(child, {...child.props,yPos: (yPos + 50*(index)).toString()+'px'})\n      }} )}\n  </div>)\n}\n\n/*  Once Framer Motion tells me what's wrong with Safari\n  return (<div ref={wrapperRef} style={{position: \"fixed\", bottom: \"50px\", right:\"20px\"}}>\n   <IconButton aria-label=\"open\" isRound icon={isOpen ? <FaMinus />: <FaPlus />}  onClick={(evt: React.MouseEvent) => {console.log(evt);setIsOpen(!isOpen)}} />\n    <AnimatePresence>\n      {isOpen &&\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ y: -20, opacity: 1 }}\n          exit={{ y: 20, opacity: 0 }}\n        ><SpeedDialItem key=\"1234\" /></motion.div>}\n    </AnimatePresence>\n  </div>)\n  */","import Verto from '@verto/lib'\nimport { JWKInterface } from \"arweave/node/lib/wallet\";\n\nconst getVerto = async (key: any) => {\n    return new Verto(key)\n}\n\nexport const getOpenBuyDeets = async (contractID: string, key: JWKInterface): Promise<{ volume: number, averageRate: number, rates: any[] }> => {\n    let verto = await getVerto(key)\n    let tPosts = await verto.getTradingPosts()\n    let config = await verto.getConfig(tPosts[0])\n    if (config.hasOwnProperty('publicURL')) {\n        //@ts-ignore\n        let res = await (await fetch(`https://${config.publicURL}/orders`)).json()\n        try {\n            let orders = res.find((token: any) => token.token === contractID).orders.filter((order: any) => order.type === \"Sell\")\n                .sort((orderA: any, orderB: any) => orderB.rate - orderA.rate)\n            let totalOrders = orders.reduce((total: number, order: any) => total + order.amnt, 0)\n            let averageRate = orders.reduce((average: number, order: any) => average + (order.amnt / totalOrders) * order.rate, 0)\n            let individualRates = orders.map((order: any) => { return ({ rate: 1 / order.rate, amount: order.amnt }) })\n            return { volume: totalOrders, averageRate: 1 / averageRate, rates: individualRates }\n        }\n        catch (err) {\n            console.log(err)\n            return { volume: 0, averageRate: 0, rates: [] }\n        }\n    }\n    else return { volume: 0, averageRate: 0, rates: [] }\n}\n\nexport const getOpenSellDeets = async (contractID: string, key: JWKInterface): Promise<{ volume: number, averageRate: number, rates: any[] }> => {\n    let verto = await getVerto(key)\n    let tPosts = await verto.getTradingPosts()\n    let config = await verto.getConfig(tPosts[0])\n    if (config.hasOwnProperty('publicURL')) {\n        //@ts-ignore\n        let res = await (await fetch(`https://${config.publicURL}/orders`)).json()\n        try {\n            let orders = res.find((token: any) => token.token === contractID).orders.filter((order: any) => order.type === \"Buy\")\n                .sort((orderA: any, orderB: any) => orderA.rate - orderB.rate)\n            let totalOrders = orders.reduce((total: number, order: any) => total + order.amnt, 0)\n            let averageRate = orders.reduce((average: number, order: any) => average + (order.amnt / totalOrders) * order.rate, 0)\n            let individualRates = orders.map((order: any) => { return ({ rate: order.rate, amount: order.amnt }) })\n            return { volume: totalOrders, averageRate: averageRate, rates: individualRates }\n        }\n        catch (err) {\n            console.log(err)\n            return { volume: 0, averageRate: 0, rates: [] }\n        }\n    }\n    else return { volume: 0, averageRate: 0, rates: [] }\n}\n\nexport const createTrade = async (trade: string, amount: number, key: JWKInterface, contractID: string): Promise<any> => {\n    let verto = await getVerto(key)\n    let tPosts = await verto.getTradingPosts()\n    let txns = await verto.createOrder(trade, amount, contractID, tPosts[0])\n    console.log(txns)\n    return txns\n}\n\nexport const executeTrade = async (txns: any, key: JWKInterface): Promise<any> => {\n    let verto = await getVerto(key)\n    let res = await verto.sendOrder(txns)\n    console.log(res)\n    return res\n}","import {\n    Box, Button, Center, Divider, Heading, HStack, Input,\n    Popover, PopoverArrow, PopoverBody,\n    PopoverCloseButton, PopoverContent,\n    PopoverHeader, PopoverTrigger, Spinner, Text, VStack\n} from \"@chakra-ui/react\";\nimport React from 'react';\nimport WalletContext from '../context/walletContext';\nimport { createTrade, executeTrade, getOpenBuyDeets, getOpenSellDeets } from '../providers/verto';\n\ninterface VertoProps {\n    contractID: string,\n    ticker: string,\n    balance: string\n}\n\nconst VertoWidget: React.FC<VertoProps> = ({ contractID, ticker, balance }) => {\n    const [loading, setLoading] = React.useState(false)\n    const [trades, setTrades] = React.useState({} as any)\n    const [purchaseAmount, setAmount] = React.useState('')\n    const [convertedAmount, setConversion] = React.useState(0)\n    const [maxBuy, setMax] = React.useState(0)\n    const { state } = React.useContext(WalletContext)\n    const [sellAmount, setSell] = React.useState('')\n    const [sellConvertedAmount, setSellConversion] = React.useState(0)\n    const [txns, setTxns] = React.useState({} as any)\n\n    React.useEffect(() => {\n        setLoading(true)\n        let mounted = true\n        const getTrades = async () => {\n            let buy = await getOpenBuyDeets(contractID, state.key)\n            let sell = await getOpenSellDeets(contractID, state.key)\n            if (mounted) await setTrades({ buy: buy, sell: sell })\n            if (mounted) {\n                setLoading(false)\n                let txns = await createTrade(\"Buy\", Math.floor(parseFloat(state.balance)), state.key, contractID);\n                if (mounted) setMax(txns.ar)\n            }\n\n        }\n        getTrades()\n        return () => {\n            mounted = false\n        }\n    }, [])\n\n    const createBuy = async () => {\n        if (convertedAmount === 0) {\n            await calculateAr();\n        }\n        let res = await createTrade(\"Buy\", convertedAmount, state.key, contractID)\n        await setTxns(res)\n        setAmount('')\n        console.log(txns)\n    }\n\n    const calculateAr = async () => {\n        let amount = parseInt(purchaseAmount)\n        if (!amount) {\n            setConversion(0)\n            return\n        }\n        else {\n            let ar = 0\n            for (let j = 0; j < trades.buy.rates.length; j++) {\n                if (trades.buy.rates[j].amount < amount) {\n                    ar += trades.buy.rates[j].amount * trades.buy.rates[j].rate\n                    amount -= trades.buy.rates[j].amount\n                }\n                else {\n                    ar += trades.buy.rates[j].rate * amount\n                    break;\n                }\n            }\n            setConversion(ar)\n        }\n    }\n\n    const handleOrder = async () => {\n        let res = await executeTrade(txns.txs, state.key)\n        setTxns({})\n        console.log(res)\n    }\n\n    const createSell = async () => {\n        if (sellConvertedAmount === 0) {\n            await calcSalePrice()\n        }\n        let res = await createTrade(\"Sell\", parseInt(sellAmount), state.key, contractID)\n        await setTxns(res)\n        console.log(txns)\n        setSell('')\n    }\n\n    const calcSalePrice = async () => {\n        let amount = parseInt(sellAmount)\n        if (!amount) {\n            setSellConversion(0)\n            return\n        }\n        let ar = 0\n        trades.sell.rates.every((rate: { amount: number, rate: number }) => {\n            if (amount > rate.amount) {\n                ar += rate.amount * rate.rate;\n                amount -= rate.amount\n                return true\n            }\n            else {\n                ar += amount * rate.rate;\n                return false\n            }\n        })\n        setSellConversion(ar)\n    }\n\n    return (\n        <VStack align=\"center\">\n            <Heading size=\"sm\">Verto Exchange</Heading>\n            {loading && <Center h=\"100px\"><Spinner /></Center>}\n            {!loading && <Box>\n                <Heading size=\"sm\">Buy {ticker}</Heading>\n                <Divider />\n                {trades.buy && trades.buy.volume > 0 ? <>\n                    <Text>Average Buy Price: {trades.buy.averageRate.toLocaleString(undefined, { maximumFractionDigits: 6 })} {ticker}/AR</Text>\n                    <Text>Total Available {ticker}: {trades.buy.volume}</Text>\n                    <Text>Total AR you can spend: {maxBuy}</Text>\n                    <HStack>\n                        <Input placeholder=\"Enter amount\" w=\"50%\" value={purchaseAmount}\n                            onChange={((evt: React.ChangeEvent<HTMLInputElement>) => setAmount(evt.target.value))}\n                            onBlur={calculateAr} />\n                        <Text>Cost in AR: {convertedAmount}</Text>\n                        <Popover closeOnBlur={false}>\n                            {({ onClose }) =>\n                                <>\n                                    <PopoverTrigger><Button disabled={!purchaseAmount || parseInt(purchaseAmount) <= 0 || parseInt(purchaseAmount) === NaN} onClick={createBuy}>Buy</Button>\n                                    </PopoverTrigger>\n                                    <PopoverContent>\n                                        <PopoverArrow />\n                                        <PopoverCloseButton />\n                                        <PopoverHeader>Order Confirmation</PopoverHeader>\n                                        <PopoverBody>\n                                            <VStack>\n                                                <Text>Transaction Cost: {txns.ar}</Text>\n                                                <Text>{ticker} received: {purchaseAmount}</Text>\n                                                <Text>Wallet balance after transaction: {parseFloat(state.balance) - txns.ar}</Text>\n                                                <Button onClick={() => { handleOrder(); onClose() }}>Submit Order</Button>\n                                            </VStack>\n                                        </PopoverBody>\n                                    </PopoverContent>\n                                </>}\n                        </Popover>\n                    </HStack>\n                </>\n                    :\n                    <Text>No open buy orders</Text>}\n                <Heading size=\"sm\">Sell {ticker}</Heading>\n                <Divider />\n                {trades.sell && trades.sell.volume > 0 ? <>\n\n                    <Text>Average Sell Price: {trades.sell.averageRate.toLocaleString(undefined, { maximumFractionDigits: 6 })} {ticker}/AR</Text>\n                    <Text>Total of open orders: {trades.sell.volume} {ticker}</Text>\n                    <HStack>\n                        <Input placeholder=\"Enter amount\" value={sellAmount}\n                            invalid={parseInt(sellAmount) > parseInt(balance)}\n                            onChange={((evt: React.ChangeEvent<HTMLInputElement>) => setSell(evt.target.value))}\n                            onBlur={calcSalePrice}\n                        />\n                        <Text>Amount in AR: {sellConvertedAmount}</Text>\n                        <Popover closeOnBlur={false}>\n                            {({ onClose }) =>\n                                <>\n                                    <PopoverTrigger><Button disabled={parseInt(sellAmount) > parseInt(balance) || parseInt(sellAmount) <= 0} onClick={createSell}>Sell</Button>\n                                    </PopoverTrigger>\n                                    <PopoverContent>\n                                        <PopoverArrow />\n                                        <PopoverCloseButton />\n                                        <PopoverHeader>Order Confirmation</PopoverHeader>\n                                        <PopoverBody>\n                                            <VStack>\n                                                <Text>Transaction Cost: {txns.pst} {ticker}</Text>\n                                                <Text>AR received: {sellConvertedAmount}</Text>\n                                                <Text>Wallet balance after transaction: {parseFloat(state.balance) + sellConvertedAmount}</Text>\n                                                <Button onClick={() => { handleOrder(); onClose() }}>Submit Order</Button>\n                                            </VStack>\n                                        </PopoverBody>\n                                    </PopoverContent>\n                                </>}\n                        </Popover>\n                    </HStack>\n                </>\n                    : <Text>No open sell orders</Text>}\n            </Box>}\n        </VStack>\n    )\n}\n\nexport default VertoWidget","\nimport {\n    Avatar, Box, Button, Collapse, Drawer,\n    DrawerBody, DrawerCloseButton, DrawerContent, DrawerFooter, DrawerHeader, DrawerOverlay, Heading, HStack,\n    Stack, Text, useDisclosure\n} from \"@chakra-ui/react\";\nimport React from 'react';\nimport WalletContext from '../context/walletContext';\nimport { timeLeft } from '../providers/wallets';\nimport VertoWidget from './VertoWidget';\n\ninterface PSTDrawerProps {\n    isOpen: boolean,\n    close: () => void,\n    contractState: any\n}\n\ninterface VaultProps {\n    vault: {\n        [address: string]: any\n    }\n}\n\nconst PSTBalances = (balances: any) => {\n    const [total, setTotal] = React.useState(0)\n    const [open, setOpen] = React.useState(false)\n    React.useEffect(() => {\n        let mounted = true\n        let totalBalance = 0\n        for (const [key, value] of Object.entries(balances.balances)) {\n            totalBalance += value as number\n        }\n        if (mounted) setTotal(totalBalance)\n        return () => { mounted = false }\n    }, [balances])\n\n    return (\n        <Box w='100%'>\n            <Box bg=\"white\" border=\"1px\" borderColor=\"grey\" onClick={() => setOpen(!open)}><Text>All balances - {total} in circulation</Text></Box>\n            <Collapse in={open}>\n                {Object.entries(balances.balances).map((balance: any[]) => {\n                    return (<HStack w=\"100%\" key={balance[0] + 1}>\n                        <Text key={balance[0]} maxWidth=\"200px\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">{balance[0]}:</Text>\n                        <Text key={balance[0] + balance[0]}>{balance[1].toString()}</Text>\n                    </HStack>)\n                })\n                }\n            </Collapse>\n        </Box>\n    )\n}\n\nconst PSTVault: React.FC<VaultProps> = ({ vault }) => {\n    const [total, setTotal] = React.useState(0)\n    const { isOpen, onToggle } = useDisclosure()\n\n    React.useEffect(() => {\n        let mounted = true\n        let totalBalance = 0\n        for (const [key, value] of Object.entries(vault)) {\n            if (value[0]) totalBalance += value[0].balance\n        }\n        if (mounted) setTotal(totalBalance)\n        return () => { mounted = false }\n    }, [vault])\n\n    return (\n        <Box w='100%'>\n            <Box bg=\"white\" border=\"1px\" borderColor=\"grey\" onClick={onToggle}><Text>Vaulted balances: {total}</Text></Box>\n            <Collapse in={isOpen}>\n                {Object.keys(vault).map((key) => {\n                    if (vault[key].length > 0)\n                        return vault[key].map((balance: any, index: number) => {\n                            return (<Box key={key + index} fontSize={12}>\n                                <Text key={key} maxWidth=\"100%\" whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">Address: {key}</Text>\n                                <HStack><Text key={balance.toString()}>Balance: {balance.balance}</Text>\n                                    <Text key={balance.start + balance.end + key}>End Block: {balance.end}</Text></HStack>\n                            </Box>)\n                        })\n                    return null\n                })\n                }\n            </Collapse>\n        </Box>\n    )\n}\nconst PSTDrawer: React.FC<PSTDrawerProps> = ({ isOpen, close, contractState }) => {\n    const { state } = React.useContext(WalletContext)\n    const [vaultTime, setVault] = React.useState([] as any[])\n    const [logo, setLogo] = React.useState('')\n\n    React.useEffect(() => {\n        let mounted = true\n        console.log(contractState)\n        const getVaultTimes = async (vault: any) => {\n            if (!mounted) return\n            let vaultTimes = await Promise.all(vault[state.address].map(async (balance: any) => {\n                let endBlock = balance?.end\n                if (endBlock) {\n                    let message = await timeLeft(state.blockHeight ? state.blockHeight : 0, endBlock)\n                    return { balance: balance.balance, message: message }\n                }\n            }))\n            if (mounted) setVault(vaultTimes)\n        }\n        if (contractState.vault && contractState.vault[state.address]) {\n            getVaultTimes(contractState.vault)\n        }\n        return () => { mounted = false }\n    }, [contractState])\n\n    React.useEffect(() => {\n        let url\n        try {\n            if (contractState.settings)\n                url = contractState.settings.filter((setting: any) => setting[0] === 'communityLogo')[0][1]\n            setLogo(url)\n        }\n        catch (err) {\n            console.log('error loading logo')\n            console.log(err)\n        }\n\n        if (url) setLogo(url)\n        return () => { setLogo('') }\n    }, [contractState])\n\n    return (<>\n        {contractState.balances && <Drawer isOpen={isOpen} placement=\"right\" onClose={close} size=\"full\">\n            <DrawerOverlay />\n            <DrawerContent >\n                <DrawerCloseButton onClick={close} />\n                <DrawerHeader >\n                    {contractState.name && <Heading size=\"md\">{contractState.name}</Heading>}\n                    <HStack>\n                        <Text>{contractState.ticker}</Text>\n                        {logo !== '' && <Avatar src={`https://arweave.net/${logo}`} />}\n                    </HStack>\n                </DrawerHeader>\n                <DrawerBody>\n                    <Stack>\n                        <Text>Balance: {contractState.balances[state.address] ? contractState.balances[state.address] : 0}</Text>\n                        {\n                            vaultTime.map((vault: { balance: string, message: string }, index: number) => {\n                                return (<HStack>\n                                    <Text key={index + vault.toString()}>Vaulted Balance: {vault.balance}</Text>\n                                    <Text key={index + vault.message}>{vault.message}</Text>\n                                </HStack>)\n                            })\n                        }\n                        <VertoWidget contractID={contractState.contractID} ticker={contractState.ticker} balance={contractState.balances[state.address]} />\n                    </Stack>\n                    {contractState.balances && <PSTBalances balances={contractState.balances} />}\n                    {contractState.vault && <PSTVault vault={contractState.vault} />}\n                </DrawerBody>\n                {/* margin is a hack to get buttons to show on mobile browsers */}\n                <DrawerFooter mb={{ base: \"25%\", sm: \"25%\", md: \"25%\", lg: 0, xl: 0 }}>\n                    <Button variant=\"outline\" onClick={close} mr={3}>Close</Button>\n                </DrawerFooter>\n            </DrawerContent>\n        </Drawer>}\n    </>)\n}\n\nexport default PSTDrawer\n","import React, { useState, useEffect, Fragment } from 'react';\nimport {\n    Text, Button, Input, Stack,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    useToast, InputRightElement, InputGroup, FormControl, FormErrorMessage, Modal\n} from \"@chakra-ui/react\";\nimport { getFee, sendTransfer } from '../providers/wallets'\n\nimport WalletContext from '../context/walletContext'\n\nconst TransferModal = (props: any) => {\n    const [isOpen, setOpen] = useState(props.props.modal)\n    const { state } = React.useContext(WalletContext)\n    const [amount, setAmount] = useState('')\n    const [fee, setFee] = useState('0')\n    const [to, setToAddress] = useState('')\n    const [next, setNext] = useState(false)\n    const [validAmount, setValid] = useState(true)\n    const toast = useToast()\n\n\n    const updateFee = () => {\n        getFee(0).then(cost => setFee(cost))\n            .catch(() => toast({\n                title: 'Error',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom-left',\n                description: 'Error getting fee, check your network connection and try again'\n            }))\n    }\n\n    useEffect(() => {\n        setOpen(props.props.modal)\n        updateFee()\n    }, [props.props.modal])\n\n    const initiateTransfer = async () => {\n        let transferDeets = {\n            'to': to,\n            'fee': fee,\n            'txnId': '',\n            'amount': amount,\n        }\n        sendTransfer(transferDeets, state.key)\n        setOpen(false)\n    }\n\n    const validateAmount = () => {\n        amount === '' ?\n            setValid(true) :\n            setValid(parseFloat((parseFloat(state.balance) - parseFloat(fee) - parseFloat(amount)).toFixed(12)) >= 0)\n    }\n\n    const setMax = async () => {\n        let balance = parseFloat(state.balance)\n        let amount = balance - parseFloat(fee)\n        setAmount(amount.toString())\n    }\n    \n    return (<Modal closeOnOverlayClick={false} isCentered isOpen={isOpen} onClose={() => {\n        setOpen(false)\n        props.props.closeModal()\n    }}>\n        <ModalOverlay />\n        <ModalContent>\n            <ModalHeader>Send AR</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n                <Stack spacing={2}>\n                    <Stack>\n                        <Text>From:</Text>\n                        <Text fontSize={14} whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">{state.address}</Text>\n                    </Stack>\n                    {!next && <Fragment>\n                        <Stack spacing={2}>\n                            <FormControl isInvalid={to === state.address}>\n                                <Input placeholder=\"Send to Arweave wallet address\"\n                                    value={to}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setToAddress(e.target.value)}\n                                    onBlur={updateFee}\n                                    isInvalid={to === state.address} />\n                                <FormErrorMessage>Recipient address cannot be the same as the sending address</FormErrorMessage>\n                            </FormControl>\n\n                            <FormControl isInvalid={!validAmount}>\n                                <InputGroup>\n                                    <Input\n                                        placeholder=\"Amount\"\n                                        value={amount}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setAmount(e.target.value)}\n                                        onBlur={() => validateAmount()}\n                                        isInvalid={!validAmount}\n                                    />\n                                    <InputRightElement children='AR' />\n                                </InputGroup>\n                                <FormErrorMessage>Amount cannot be greater than wallet balance</FormErrorMessage>\n                            </FormControl>\n                            <Button border=\"none\" onClick={setMax}>Use Wallet Balance</Button>\n\n                            <Text>Fee: {fee} AR</Text>\n                            <Text>Total (including fee): {(parseFloat(fee) + parseFloat(amount ? amount : '0')).toLocaleString('en-US', { style: 'decimal', minimumFractionDigits: (fee !== '0') ? fee.split('.')[1].length : 1 })} AR</Text>\n                        </Stack>\n                    </Fragment>}\n                    {next && <Fragment>\n                        <Stack spacing={2}>\n                            <Stack>\n                                <Text>To:</Text>\n                                <Text fontSize={14}>{to}</Text>\n                            </Stack>\n                            <Stack isInline>\n                                <Stack>\n                                    <Text>Sending</Text>\n                                    <Text>{amount} AR</Text>\n                                </Stack>\n                                <Stack>\n                                    <Text>Fee</Text>\n                                    <Text>{fee} AR</Text>\n                                </Stack>\n                            </Stack>\n                            <Stack>\n                                <Text>Total</Text>\n                                <Text>{(parseFloat(fee) + parseFloat(amount ? amount : '0')).toLocaleString('en-US', { style: 'decimal', minimumFractionDigits: (fee !== '0') ? fee.split('.')[1].length : 1 })} AR</Text>\n                            </Stack>\n                            <Stack>\n                                <Text>Balance after transaction</Text>\n                                <Text>{(parseFloat(state.balance) - parseFloat(fee) - parseFloat(amount)).toString()} AR</Text>\n                            </Stack>\n                        </Stack>\n                    </Fragment>}\n                </Stack>\n            </ModalBody>\n            <ModalFooter>\n                {!next ? <Button bg=\"#333\" color=\"white\" w=\"100%\" isDisabled={!validAmount || (to === '')} onClick={() => setNext(true)}>Next</Button> :\n                    <Button bg=\"#333\" color=\"white\" w=\"100%\" onClick={function () {\n                        initiateTransfer();\n                        setOpen(false)\n                        props.props.closeModal();\n                    }}>Confirm and Send AR</Button>}\n            </ModalFooter>\n        </ModalContent>\n    </Modal>\n    )\n}\n\nexport default TransferModal","import {\n  Box,\n  Button,\n  Center,\n  Divider,\n  FormControl,\n  FormErrorMessage,\n  Heading,\n  Icon,\n  Input,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverHeader,\n  PopoverTrigger,\n  Select,\n  SimpleGrid,\n  Spinner,\n  Stack,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { set } from \"idb-keyval\";\nimport React from \"react\";\nimport { FaCaretRight } from \"react-icons/fa\";\nimport WalletContext, { token } from \"../context/walletContext\";\nimport {\n  getFee,\n  sendTokens,\n  getToken,\n  getAllCommunityIds,\n} from \"../providers/wallets\";\nimport PSTDrawer from \"./PSTDrawer\";\nimport TransferModal from \"./TransactionModal\";\n\ninterface AddTokenProps {\n  close: () => void;\n}\n\nconst AddToken: React.FC<AddTokenProps> = ({ close }) => {\n  const { state, dispatch } = React.useContext(WalletContext);\n  const [address, setAddress] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  const [valid, setValid] = React.useState(true);\n  const toast = useToast();\n\n  const update = async () => {\n    setLoading(true);\n    let tokens = [...state.tokens];\n    if (\n      state.tokenAddresses &&\n      !state.tokenAddresses.find((tokenAddress) => tokenAddress === address)\n    ) {\n      try {\n        let deets = await getToken(address);\n        tokens.push(deets);\n        dispatch({ type: \"UPDATE_TOKENS\", payload: { tokens: tokens } });\n        setAddress(\"\");\n        setLoading(false);\n        close();\n      } catch (err) {\n        console.log(\"error adding token\");\n        console.log(err);\n        toast({\n          title: \"Error loading token\",\n          status: \"error\",\n          duration: 3000,\n          position: \"bottom\",\n          description: \"Please check contract ID and try again\",\n        });\n        setAddress(\"\");\n        setLoading(false);\n        close();\n      }\n    } else\n      toast({\n        title: \"Token already in list\",\n        status: \"error\",\n        duration: 3000,\n        position: \"bottom\",\n        description: \"Please check contract ID and try again\",\n      });\n    setAddress(\"\");\n    setLoading(false);\n    close();\n  };\n\n  const validateToken = () => {\n    console.log(state.tokens);\n    if (\n      state.tokens!.find(\n        (token) =>\n          token &&\n          token.hasOwnProperty(\"contract\") &&\n          token.contract === address\n      )\n    )\n      setValid(false);\n    else setValid(true);\n  };\n\n  return (\n    <Stack>\n      <Heading size=\"sm\">Add Custom Token</Heading>\n      <FormControl isInvalid={!valid}>\n        <Stack isInline>\n          <Input\n            placeholder=\"Contract ID\"\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n              setAddress(evt.target.value);\n            }}\n            onBlur={() => validateToken()}\n          />\n          <Button\n            isDisabled={loading || !valid || address === \"\"}\n            onClick={() => update()}\n          >\n            Add Token\n          </Button>\n          {loading && <Spinner />}\n        </Stack>\n        <FormErrorMessage>Token already loaded</FormErrorMessage>\n      </FormControl>\n    </Stack>\n  );\n};\n\nconst Tokens = () => {\n  const { state, dispatch } = React.useContext(WalletContext);\n  const [modal, openModal] = React.useState(false);\n  const [to, setTo] = React.useState(\"\");\n  const [amount, setAmount] = React.useState(0);\n  const closeModal = () => openModal(false);\n  const [fee, setFee] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  const [tokensLoading, setTokensLoading] = React.useState(false);\n  const toast = useToast();\n  const [open, setOpen] = React.useState(false);\n  const [currentPST, setPST] = React.useState({});\n  const [tokenList, setList] = React.useState(state.tokens);\n  const [sortOption, setSort] = React.useState(\"balances\");\n\n  React.useEffect(() => {\n    getFee(new Blob([Math.random().toString().slice(-4)]).size).then((fee) =>\n      setFee(fee)\n    );\n  }, []);\n\n  React.useEffect(() => {\n    if (state.address && state.tokens)\n      switch (sortOption) {\n        case \"all\":\n          setList(\n            state.tokens.sort((a, b) => {\n              if (!b.contractState && !a.contractState) return 0;\n              let fa = a.ticker.toUpperCase();\n              let fb = b.ticker.toUpperCase();\n              if (fa > fb) return 1;\n              if (fb > fa) return -1;\n              return 0;\n            })\n          );\n          break;\n        case \"balances\":\n          setList(\n            state.tokens.filter(\n              (token) =>\n                token &&\n                token.contractState &&\n                token.contractState.balances[state.address] > 0\n            )\n          );\n          break;\n        case 'distribution':\n            setList(state.tokens.sort((a, b) => {\n                if (!b.contractState && !a.contractState) return 0;\n                let fa = Object.keys(a.contractState.balances).length\n                let fb = Object.keys(b.contractState.balances).length\n                if (fa < fb) return 1;\n                if (fb < fa) return -1;\n                return 0;\n              }))\n            break;\n        default:\n          setList(state.tokens);\n      }\n  }, [state.tokens, sortOption]);\n\n  React.useEffect(() => {\n    async function* getTokens() {\n      if (state.tokenAddresses) {\n        for (let j = 0; j < state.tokenAddresses?.length; j++) {\n          if (\n            !state.tokens.find(\n              (token) => token.contract === state.tokenAddresses![j]\n            )\n          ) {\n            try {\n              let token = await getToken(state.tokenAddresses[j]);\n              yield token;\n            } catch (err) {\n              console.log(\"error loading token\");\n              console.log(err);\n            }\n          }\n        }\n      }\n    }\n\n    const getTokenDeets = async () => {\n      let tokens: token[] = [];\n      setTokensLoading(true);\n      for await (let token of getTokens()) {\n        console.log(token);\n        tokens.push(token);\n      }\n      setTokensLoading(false);\n      dispatch({ type: \"UPDATE_TOKENS\", payload: { tokens: tokens } });\n      set(\"wallets\", JSON.stringify(state));\n    };\n\n    getTokenDeets();\n  }, [state.tokenAddresses]);\n\n  React.useEffect(() => {\n    const getTokenAddresses = async () => {\n      let tokens = await getAllCommunityIds();\n      dispatch({\n        type: \"SET_TOKEN_ADDRESSES\",\n        payload: { tokenAddresses: tokens },\n      });\n      console.log(state.tokenAddresses);\n    };\n    getTokenAddresses();\n  }, []);\n\n  const initTokenTransfer = async (token: token, onClose: any) => {\n    setLoading(true);\n    let message = await sendTokens(token.contract, amount, to, state.key);\n    setLoading(false);\n    onClose();\n    toast({\n      title: `Transaction Status - ${message}`,\n      status: \"info\",\n      duration: 3000,\n      position: \"bottom\",\n    });\n  };\n\n  const closePSTDrawer = () => setOpen(false);\n\n  return (\n    <Box textAlign=\"left\">\n      <Text whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">\n        Address: {state.address}\n      </Text>\n      <SimpleGrid columns={3} my={2} alignItems=\"center\">\n        <Text>AR</Text>\n        <Text>\n          {parseFloat(state.balance).toLocaleString(undefined, {\n            maximumFractionDigits: 6,\n          })}\n        </Text>\n        <Button isDisabled={!state.key} onClick={() => openModal(true)}>\n          Send\n        </Button>\n      </SimpleGrid>\n      <Divider my={4} />\n      <Heading align=\"center\" size=\"sm\">\n        Profit Sharing Tokens\n      </Heading>\n      <Select\n        placeholder=\"Filtering options\"\n        value={sortOption}\n        onChange={(evt) => setSort(evt.target.value)}\n      >\n        <option value=\"all\">All tokens</option>\n        <option value=\"balances\">Tokens with balances</option>\n        <option value=\"distribution\">Number of active wallets</option>\n      </Select>\n      <SimpleGrid columns={4}>\n        <Text fontWeight=\"bold\" minWidth=\"150px\">\n          Ticker\n        </Text>\n        <Text fontWeight=\"bold\">Balance</Text>\n      </SimpleGrid>\n      {tokensLoading && (\n        <Center h=\"200px\">\n          <Box align=\"center\">\n            <Spinner pb=\"10px\" />\n            <Text>Loading tokens...</Text>\n          </Box>\n        </Center>\n      )}\n      {tokenList.map((token: token) => {\n        if (token && token.ticker) {\n          return (\n            <SimpleGrid\n              key={token.contract + \"grid\"}\n              borderY=\"1px\"\n              borderColor=\"lightgray\"\n              columns={4}\n              my={2}\n              py={1}\n              alignItems=\"center\"\n            >\n              <Text\n                minWidth=\"150px\"\n                onClick={() => {\n                  setPST({\n                    ...token.contractState,\n                    contractID: token.contract,\n                  });\n                  setOpen(true);\n                }}\n              >\n                {token.ticker}\n              </Text>\n              <Text\n                minWidth=\"120px\"\n                onClick={() => {\n                  setPST({\n                    ...token.contractState,\n                    contractID: token.contract,\n                  });\n                  setOpen(true);\n                }}\n              >\n                {token.contractState.balances[state.address]}\n              </Text>\n              <Popover closeOnBlur={false}>\n                {({ onClose }) => (\n                  <>\n                    <PopoverTrigger>\n                      <Button justifySelf=\"end\">Send</Button>\n                    </PopoverTrigger>\n                    <PopoverContent zIndex={4}>\n                      <PopoverArrow />\n                      <PopoverHeader>Send Tokens</PopoverHeader>\n                      <PopoverCloseButton />\n                      <PopoverBody>\n                        <Stack align=\"center\">\n                          {!loading ? (\n                            <Box>\n                              <Input\n                                my={2}\n                                placeholder={`Amount`}\n                                onChange={(\n                                  evt: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                  setAmount(parseFloat(evt.target.value));\n                                }}\n                              />\n                              <Input\n                                placeholder={`Address`}\n                                onChange={(\n                                  evt: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                  setTo(evt.target.value);\n                                }}\n                              />\n                              <Text textAlign=\"center\">Fee: {fee}</Text>\n                              <Button\n                                isDisabled={!state.key}\n                                w=\"90%\"\n                                onClick={() => {\n                                  initTokenTransfer(token, onClose);\n                                }}\n                              >\n                                Submit Transaction\n                              </Button>\n                            </Box>\n                          ) : (\n                            <Box>\n                              <Spinner />\n                              <Text>Submitting Transaction</Text>\n                            </Box>\n                          )}\n                        </Stack>\n                      </PopoverBody>\n                    </PopoverContent>\n                  </>\n                )}\n              </Popover>\n              <Icon\n                justifySelf=\"end\"\n                as={FaCaretRight}\n                onClick={() => {\n                  setPST({\n                    ...token.contractState,\n                    contractID: token.contract,\n                  });\n                  setOpen(true);\n                }}\n              />\n            </SimpleGrid>\n          );\n        }\n      })}\n      <TransferModal props={{ modal, closeModal }} />\n      <Popover placement=\"top-end\">\n        {({ onClose }) => (\n          <>\n            <PopoverTrigger>\n              <Button position=\"fixed\" bottom=\"50px\" left=\"20px\">\n                Add Custom Token\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent>\n              <PopoverCloseButton />\n              <PopoverBody>\n                <AddToken close={onClose} />\n              </PopoverBody>\n            </PopoverContent>\n          </>\n        )}\n      </Popover>\n      <PSTDrawer\n        isOpen={open}\n        close={closePSTDrawer}\n        contractState={currentPST}\n      />\n    </Box>\n  );\n};\nexport default Tokens;\n\n//<Icon position=\"fixed\" right=\"2px\" as={FaCaretRight}  />\n","\nimport React from 'react'\nimport {\n    Drawer,\n    DrawerBody,\n    DrawerFooter,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton, Button, Input, Box, Text, Stack,\n    useToast,\n    SimpleGrid,\n    Heading,\n    Spinner\n} from \"@chakra-ui/react\";\nimport Dropzone from 'react-dropzone'\nimport WalletContext from '../context/walletContext'\nimport { getFee, uploadFile } from '../providers/wallets'\ninterface TxnDrawerProps {\n    isOpen: boolean,\n    close: () => void,\n}\n\ninterface TagsProps {\n    tags: {\n        name: string,\n        value: string\n    }[],\n    clickHandler: (name: string, value: string) => void\n}\n\nconst Tags: React.FC<TagsProps> = ({ tags, clickHandler }) => {\n    const [name, setName] = React.useState('')\n    const [value, setValue] = React.useState('')\n    return (\n        <Stack>\n            <Heading size=\"sm\">Transacion Tags</Heading>\n            {tags.map((tag) => {\n                return (<SimpleGrid key={tag.name + tag.value} columns={2} fontSize={12}>\n                    <Text>Name: {tag.name}</Text>\n                    <Text>Value: {tag.value}</Text>\n                </SimpleGrid>)\n            }\n            )}\n            <Input placeholder=\"Name\" value={name} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => setName(evt.target.value)} />\n            <Input placeholder=\"Value\" value={value} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => setValue(evt.target.value)} />\n            <Button isDisabled={(name === '' || value === '')}\n                onClick={() => {\n                    clickHandler(name, value)\n                    setName('')\n                    setValue('')\n                }}>\n                Add Tag</Button>\n        </Stack>\n    )\n}\n\nconst TransactionDrawer: React.FC<TxnDrawerProps> = ({ isOpen, close }) => {\n    const { state, dispatch } = React.useContext(WalletContext)\n    const toast = useToast();\n    const [data, setData] = React.useState(null as any)\n    const [tags, setTags] = React.useState([] as { name: string; value: string; }[])\n    const [fee, setFee] = React.useState('0')\n    const [loading, setLoading] = React.useState(false)\n\n    React.useEffect(() => {\n        if (state.picture) {\n            fetch(state.picture).then((res) => {\n                return res.blob()\n            }).then((blob) => {\n                //@ts-ignore\n                onDrop([blob])\n                dispatch({ type: 'SET_PICTURE', payload: { picture: '' } })\n            })\n        }\n    }, [state.picture])\n\n    const tagsHandler = (name: string, value: string) => {\n        if (tags !== undefined) {\n            let newTags = [...tags!, { name, value }]\n            setTags(newTags)\n        }\n        else setTags([{ name, value }])\n    }\n\n    const handleClose = () => {\n        setData(null);\n        setTags([]);\n        close()\n    }\n\n    const handleUpload = async () => {\n        setLoading(true)\n        let res = await uploadFile(data, state.key, tags)\n        if (res.startsWith('Transaction')) {\n            toast({\n                title: 'Success',\n                status: 'success',\n                duration: 3000,\n                position: 'bottom',\n                description: 'Your file has been submitted to the blockchain'\n            })\n        }\n        else {\n            toast({\n                title: 'Error submitting transaction',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom',\n                description: res\n            })\n        }\n\n        setTimeout(() => {\n            setLoading(false)\n            handleClose()\n        }\n            , 1000)\n    }\n\n    const onDrop = async (acceptedFiles: File[]) => {\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = async function (event) {\n            if (event && event.target) {\n                let contents = acceptedFiles[0]\n                let tags = [\n                    { 'name': 'App-Name', 'value': 'ArMob 2.0' },\n                    { 'name': 'Content-Type', 'value': acceptedFiles[0].type }\n                ]\n                let fee = await getFee(acceptedFiles[0].size)\n                setFee(fee)\n                setData(contents)\n                setTags(tags)\n            }\n\n        }\n        try {\n            reader.readAsText(acceptedFiles[0])\n        }\n        catch (err) {\n            console.log('Unable to process file', err)\n            toast({\n                title: 'Error processing file',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom',\n                description: 'Please try again'\n            })\n        }\n    }\n\n    return (\n\n        <Drawer isOpen={isOpen} placement=\"right\" onClose={close} size=\"full\">\n            <DrawerOverlay />\n            <DrawerContent >\n                <DrawerCloseButton onClick={handleClose} />\n                <DrawerHeader>Upload file to Arweave</DrawerHeader>\n                <DrawerBody>\n                    {!data && <Box w=\"100%\" borderStyle='dashed' borderWidth=\"2px\">\n                        <Dropzone onDrop={onDrop}>\n                            {({ getRootProps, getInputProps }) => (\n                                <section>\n                                    <div {...getRootProps()}>\n                                        <input {...getInputProps()} />\n                                        <Box flexDirection=\"row\" padding={3}><Text fontSize={14} textAlign=\"center\">Drop a file or click to select from system file picker</Text></Box>\n                                    </div>\n                                </section>\n                            )}\n                        </Dropzone>\n                    </Box>}\n                    {data && !loading && <Stack>\n                        <Text>Fee: {fee} AR</Text>\n                        <Tags tags={tags} clickHandler={tagsHandler} />\n                    </Stack>}\n                    {data && loading && <Spinner position=\"absolute\" top=\"50%\" left=\"50%\" />}\n                </DrawerBody>\n                {/* margin is a hack to get buttons to show on mobile browsers */}\n                <DrawerFooter mb={{base:\"25%\",sm:\"25%\",md:\"25%\",lg:0,xl:0}}>\n                    <Button variant=\"outline\" onClick={handleClose} mr={3}>Cancel</Button>\n                    <Button color=\"blue\" isDisabled={!data} onClick={handleUpload}>Upload File</Button>\n                </DrawerFooter>\n            </DrawerContent>\n        </Drawer>\n\n    );\n}\n\nexport default TransactionDrawer","import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Button,\n  Heading,\n  IconButton,\n  Input,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  Radio,\n  RadioGroup,\n  SimpleGrid,\n  Spinner,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { FaCaretRight, FaSearch } from \"react-icons/fa\";\nimport WalletContext, { token } from \"../context/walletContext\";\nimport { getTxns } from \"../providers/wallets\";\n\nconst Txn = (txn: any, tokens: token[]) => {\n  let amount = txn.node.quantity.ar;\n  let token = \"AR\";\n  if (parseFloat(txn.node.quantity.ar) === 0) {\n    let input = txn.node.tags.filter((tag: any) => tag.name === \"Input\");\n\n    if (input.length > 0) {\n      let inputs = JSON.parse(input[0].value);\n      if (inputs.hasOwnProperty(\"qty\")) amount = inputs.qty;\n      let contract = txn.node.tags.filter(\n        (tag: any) => tag.name === \"Contract\"\n      )[0].value;\n      let tokenObjects = tokens.filter((token) => token.contract === contract);\n      tokenObjects.length > 0 ? token = tokenObjects[0].ticker : token = 'of some PST' //a hack to show this isn't an AR transaction until I figure out a better way to do it\n    }\n  }\n\n  return (\n    <AccordionItem key={txn.node.id} textAlign=\"left\">\n      <AccordionButton\n        key={txn.node.id + \"button\"}\n        bg=\"white\"\n        border=\"1px\"\n        borderColor=\"grey\"\n      >\n        <Text\n          key={txn.node.id + \"display\"}\n          whiteSpace=\"nowrap\"\n          overflow=\"hidden\"\n          textOverflow=\"ellipsis\"\n        >\n          ID: {txn.node.id}\n        </Text>\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel border=\"1px\">\n        <Heading size=\"xs\" fontSize=\"12px\">\n          Metadata\n        </Heading>\n        <SimpleGrid columns={2}>\n          <Text fontSize={10}>Transaction ID: </Text>\n          <Text\n            cursor=\"pointer\"\n            onClick={() => navigator.clipboard.writeText(txn.node.id)}\n            fontSize={10}\n          >\n            {txn.node.id}\n          </Text>\n          <Text fontSize={10}>Fee: </Text>\n          <Text fontSize={10}>{txn.node.fee.ar} AR</Text>\n          {txn.node.recipient && (\n            <React.Fragment>\n              <Text fontSize={10}>Recipient: </Text>\n              <Text\n                cursor=\"pointer\"\n                onClick={() =>\n                  navigator.clipboard.writeText(txn.node.recipient)\n                }\n                fontSize={10}\n              >\n                {txn.node.recipient}\n              </Text>\n            </React.Fragment>\n          )}\n          {txn.node.owner && (\n            <React.Fragment>\n              <Text fontSize={10}>From: </Text>\n              <Text\n                cursor=\"pointer\"\n                onClick={() =>\n                  navigator.clipboard.writeText(txn.node.owner.address)\n                }\n                fontSize={10}\n              >\n                {txn.node.owner.address}\n              </Text>\n              <Text fontSize={10}>Amount: </Text>\n              <Text fontSize={10}>\n                {amount} {token}\n              </Text>\n            </React.Fragment>\n          )}\n        </SimpleGrid>\n        {txn.node.tags.length > 0 && (\n          <Heading size=\"xs\" fontSize=\"12px\">\n            Transaction Tags\n          </Heading>\n        )}\n        {txn.node.tags.map((tag: any) => {\n          return (\n            <SimpleGrid\n              key={txn.node.id + tag.name}\n              columns={2}\n              textAlign=\"left\"\n              overflow=\"auto\"\n            >\n              <Text fontSize={10} key={tag.toString()}>\n                {tag.name}\n              </Text>\n              <Text fontSize={10} key={tag.name + tag.value}>\n                {tag.value}\n              </Text>\n            </SimpleGrid>\n          );\n        })}\n      </AccordionPanel>\n    </AccordionItem>\n  );\n};\n\nconst Transactions = () => {\n  const { state } = React.useContext(WalletContext);\n  const [loading, setLoading] = React.useState(false);\n  const [txns, setTxns] = React.useState([]);\n  const [name, setName] = React.useState(\"\");\n  const [value, setValue] = React.useState(\"\");\n  const [filter, setFilter] = React.useState(\"from\");\n\n  React.useEffect(() => {\n    async function getTransactions() {\n      setLoading(true);\n      switch (filter) {\n        case \"from\":\n          let fTxns = await getTxns({ address: state.address });\n          setTxns(fTxns);\n          break;\n        case \"to\":\n          let tTxns = await getTxns({ to: state.address });\n          setTxns(tTxns);\n          break;\n        default:\n          let Txns = await getTxns({ address: state.address });\n          setTxns(Txns);\n      }\n      setLoading(false);\n    }\n    if (state.address !== \"\") {\n      getTransactions();\n    } else setTxns([]);\n  }, [state.address, filter]);\n\n  const retrieveTransactionsForTag = async () => {\n    setLoading(true);\n    let txns = await getTxns({\n      address: state.address,\n      name: name,\n      value: value,\n    });\n    setTxns(txns);\n    setLoading(false);\n  };\n\n  const getTxnsWithCursor = async () => {\n    setLoading(true);\n    //@ts-ignore\n    let cursor = txns[txns.length - 1].cursor;\n    let txnsWithCursor;\n    filter === \"from\"\n      ? (txnsWithCursor = await getTxns({\n          address: state.address,\n          cursor: cursor,\n        }))\n      : (txnsWithCursor = await getTxns({ to: state.address, cursor: cursor }));\n    setTxns(txnsWithCursor);\n    setLoading(false);\n  };\n\n  return (\n    <Box h=\"100%\">\n      <RadioGroup\n        onChange={(evt) => setFilter(evt.toString())}\n        value={filter}\n        defaultValue=\"from\"\n      >\n        <Stack direction=\"row\" spacing={4}>\n          <Radio defaultChecked value=\"from\">\n            From Wallet\n          </Radio>\n          <Radio value=\"to\">To Wallet</Radio>\n        </Stack>\n      </RadioGroup>\n      {!loading ? (\n        <>\n          <Accordion allowToggle allowMultiple w=\"100%\">\n            {/* @ts-ignore */}\n            {txns.length > 0 ? txns.map((txn) => Txn(txn, state.tokens)) : null}\n          </Accordion>\n          <Button\n            my={2}\n            isDisabled={txns.length < 10}\n            leftIcon={<FaCaretRight />}\n            onClick={() => getTxnsWithCursor()}\n          >\n            Next 10\n          </Button>\n          <Popover>\n            <PopoverTrigger>\n              <IconButton\n                position=\"fixed\"\n                bottom=\"6%\"\n                left=\"5%\"\n                aria-label=\"search transactions\"\n                icon={<FaSearch />}\n              />\n            </PopoverTrigger>\n            <PopoverContent>\n              <Stack>\n                <Input\n                  placeholder=\"Name\"\n                  value={name}\n                  onChange={(evt: React.ChangeEvent<HTMLInputElement>) =>\n                    setName(evt.target.value)\n                  }\n                />\n                <Input\n                  placeholder=\"Value\"\n                  value={value}\n                  onChange={(evt: React.ChangeEvent<HTMLInputElement>) =>\n                    setValue(evt.target.value)\n                  }\n                />\n                <Button\n                  isDisabled={name === \"\" || value === \"\"}\n                  onClick={() => {\n                    retrieveTransactionsForTag();\n                    setName(\"\");\n                    setValue(\"\");\n                  }}\n                >\n                  Search by Tag\n                </Button>\n              </Stack>\n            </PopoverContent>\n          </Popover>\n        </>\n      ) : (\n        <Spinner position=\"fixed\" bottom=\"50%\" right=\"50%\" />\n      )}\n    </Box>\n  );\n};\n\nexport default Transactions;\n","import {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  Heading,\n  Input,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverContent,\n  PopoverTrigger,\n  Skeleton,\n  Stack,\n  Text,\n  useClipboard,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { generateMnemonic, getKeyFromMnemonic } from \"arweave-mnemonic-keys\";\nimport { set } from \"idb-keyval\";\nimport React from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { FaCheck, FaGripHorizontal, FaKey, FaTrash } from \"react-icons/fa\";\nimport WalletContext, { wallet } from \"../context/walletContext\";\nimport { addWallet } from \"../providers/wallets\";\n\nconst WalletLoader = () => {\n  const toast = useToast();\n  const { state, dispatch } = React.useContext(WalletContext);\n  const [loading, setLoading] = React.useState(false);\n  const [address, setAddress] = React.useState(\"\");\n  const [copiedValue, setCopiedValue] = React.useState<string>(\"\");\n  const { onCopy } = useClipboard(copiedValue);\n\n  const onDrop = async (acceptedFiles: any) => {\n    const reader = new FileReader();\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    reader.onerror = () => console.log(\"file reading has failed\");\n    reader.onload = async function (event) {\n      setLoading(true);\n      if (acceptedFiles[0].type === \"application/json\") {\n        try {\n          let walletObject = JSON.parse(event!.target!.result as string);\n          let walletDeets = await addWallet(walletObject);\n          await set(\"wallet\", JSON.stringify(walletObject));\n          dispatch({\n            type: \"ADD_WALLET\",\n            payload: { ...walletDeets, key: walletObject, mnemonic: walletObject.mnemonic },\n          });\n          set('wallets', JSON.stringify(state))\n        } catch (err) {\n          console.log(\"Invalid json in wallet file\");\n          toast({\n            title: \"Error loading wallet\",\n            status: \"error\",\n            duration: 3000,\n            position: \"bottom-left\",\n            description: \"Invalid JSON in wallet file\",\n          });\n        }\n      } else {\n        console.log(\"Invalid file type\");\n        toast({\n          title: \"Error loading wallet\",\n          status: \"error\",\n          duration: 3000,\n          position: \"bottom-left\",\n          description: \"Invalid file type\",\n        });\n      }\n      setLoading(false);\n    };\n    try {\n      reader.readAsText(acceptedFiles[0]);\n    } catch (err) {\n      console.log(\"Invalid file type\");\n      toast({\n        title: \"Error loading wallet\",\n        status: \"error\",\n        duration: 3000,\n        position: \"bottom-left\",\n        description: \"Invalid file type\",\n      });\n    }\n  };\n\n  const loadWalletFromMnemonic = async (mnemonic: string) => {\n    setLoading(true);\n    let walletObject = await getKeyFromMnemonic(mnemonic);\n    let walletDeets = await addWallet(walletObject);\n    await set(\"wallet\", JSON.stringify(walletObject));\n    setLoading(false);\n    dispatch({\n      type: \"ADD_WALLET\",\n      payload: { ...walletDeets, key: walletObject, mnemonic: mnemonic },\n    });\n    set('wallets', JSON.stringify(state))\n  };\n\n  const generateWallet = async () => {\n    setLoading(true);\n    let mnemonic = await generateMnemonic();\n    setAddress(mnemonic);\n    loadWalletFromMnemonic(mnemonic);\n  };\n\n  const addAddress = async () => {\n    setLoading(true);\n    let walletDeets = await addWallet(address);\n    dispatch({ type: \"ADD_WALLET\", payload: { ...walletDeets, key: \"\" } });\n    set('wallets', JSON.stringify(state))\n  };\n\n  const createWalletFile = async (wallet: wallet) => {\n    const blob = new Blob([JSON.stringify({...wallet.key, mnemonic: wallet.mnemonic}, null, 2)], {\n      type: \"application/json\",\n    });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = href;\n    link.download = `arweave-keyfile-${wallet.address}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const switchWallet = async (address: string) => {\n    let wallet = await addWallet(address);\n    dispatch({\n      type: \"CHANGE_ACTIVE_WALLET\",\n      payload: { address: wallet.address, balance: wallet.balance },\n    });\n  };\n\n  return (\n    <Stack align=\"center\">\n      <Skeleton isLoaded={!loading}>\n        <Box w=\"100%\" borderStyle=\"dashed\" borderWidth=\"2px\" mb={2}>\n          <Dropzone onDrop={onDrop}>\n            {({ getRootProps, getInputProps }) => (\n              <section>\n                <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <Box flexDirection=\"row\" padding={3}>\n                    <Text fontSize={14} textAlign=\"center\">\n                      Drop a wallet file or click to load wallet\n                    </Text>\n                  </Box>\n                </div>\n              </section>\n            )}\n          </Dropzone>\n        </Box>\n        <Stack w=\"100%\" mb={2}>\n          <Heading size=\"xs\">Wallet mnemonic</Heading>\n          <Input\n            w=\"93%%\"\n            placeholder=\"Enter 12 word seedphrase\"\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n              setAddress(evt.target.value);\n            }}\n          />\n          <Button\n            isDisabled={address === \"\"}\n            onClick={() => loadWalletFromMnemonic(address)}\n          >\n            Load Wallet\n          </Button>\n        </Stack>\n        <Stack w=\"100%\">\n          <Heading size=\"xs\">Track a Wallet</Heading>\n          <Input\n            w=\"93%%\"\n            placeholder=\"Enter a wallet address\"\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n              setAddress(evt.target.value);\n            }}\n          />\n          <Button isDisabled={address === \"\"} onClick={() => addAddress()}>\n            Track Address\n          </Button>\n          <Button mt={2} onClick={generateWallet}>\n            Generate New Wallet\n          </Button>\n        </Stack>\n      </Skeleton>\n      {state.address && (\n        <>\n          <Divider />\n          <Heading size=\"sm\">Loaded Wallets</Heading>\n        </>\n      )}\n      {state.wallets.length > 0 &&\n        state.wallets.map((wallet) => {\n          console.log(wallet);\n          return (\n            <Stack isInline align=\"start\">\n              <Popover>\n                <PopoverTrigger>\n                  <Text\n                    whiteSpace=\"nowrap\"\n                    overflow=\"hidden\"\n                    maxWidth=\"90vw\"\n                    textOverflow=\"ellipsis\"\n                    cursor=\"pointer\"\n                  >\n                    {wallet.address}\n                  </Text>\n                </PopoverTrigger>\n                <PopoverContent>\n                  <PopoverArrow />\n                  <PopoverBody>\n                    <Stack isInline justifyContent=\"space-around\">\n                      <Flex\n                        direction=\"column\"\n                        align=\"center\"\n                        justify=\"center\"\n                        key={wallet.address + \"pseudo2\"}\n                        as=\"button\"\n                        onClick={() => {\n                          switchWallet(wallet.address);\n                        }}\n                        alignContent=\"start\"\n                      >\n                        <FaCheck size={16} />\n                        <Text>Use</Text>\n                      </Flex>\n                      <Flex\n                        as=\"button\"\n                        direction=\"column\"\n                        align=\"center\"\n                        justify=\"center\"\n                        onClick={() => {\n                          dispatch({\n                            type: \"REMOVE_WALLET\",\n                            payload: { address: wallet.address },\n                          });\n                        }}\n                      >\n                        <FaTrash size={16} />\n                        <Text>Remove</Text>\n                      </Flex>\n                      <Flex\n                        as=\"button\"\n                        direction=\"column\"\n                        align=\"center\"\n                        justify=\"center\"\n                        onClick={() => createWalletFile(wallet)}\n                      >\n                        <FaKey size={16} />\n                        <Text>Download Keyfile</Text>\n                      </Flex>\n                      {wallet.mnemonic && (\n                        <Flex\n                          as=\"button\"\n                          direction=\"column\"\n                          align=\"center\"\n                          justify=\"center\"\n                          onClick={() => {\n                            if (wallet.mnemonic)\n                              setCopiedValue(wallet.mnemonic);\n                            onCopy();\n                          }}\n                        >\n                          <FaGripHorizontal size={16} />\n                          <Text>Copy Seedphrase</Text>\n                        </Flex>\n                      )}\n                    </Stack>\n                  </PopoverBody>\n                </PopoverContent>\n              </Popover>\n            </Stack>\n          );\n        })}\n    </Stack>\n  );\n};\n\nexport default WalletLoader;\n","import { walletState, wallet } from '../context/walletContext';\n\nconst walletReducer = (state: walletState, action: { type: string, payload: any }): walletState => {\n    console.log('Current state is:')\n    console.log(state)\n    console.log('Action requested is:')\n    console.log(action)\n    switch (action.type) {\n        case 'LOAD_STATE': {\n            return { ...action.payload.state }\n        }\n        case 'ADD_WALLET': {\n            let existingWallets = state.wallets?.filter((wallet: wallet)=> wallet.address === action.payload.address)\n            let wallets = state.wallets ? state.wallets : []\n            if (existingWallets && existingWallets.length === 0)\n                wallets?.push({address:action.payload.address, key:action.payload.key, mnemonic: action.payload.mnemonic})\n            return {\n            ...state,\n            key: action.payload.key,\n            balance: action.payload.balance,\n            address: action.payload.address,\n            mnemonic: action.payload.mnemonic,\n            wallets: wallets\n        }}\n        case 'UPDATE_TOKENS': {\n            return {\n                ...state,\n                tokens: action.payload.tokens\n            }\n        }\n        case 'SET_PICTURE': {\n            return {\n                ...state,\n                picture: action.payload.picture\n            }\n        }\n        case 'SET_BLOCK_HEIGHT': {\n            return {\n                ...state,\n                blockHeight: action.payload.blockHeight\n            }\n        }\n        case 'SET_TOKEN_ADDRESSES': {\n            return {\n                ...state,\n                tokenAddresses: action.payload.tokenAddresses\n            }\n        }\n        case 'CHANGE_ACTIVE_WALLET': {\n            let newWallet = state.wallets.find((wallet) => wallet.address === action.payload.address)\n            return {\n                ...state,\n                address: action.payload.address,\n                key: newWallet?.key,\n                balance: action.payload.balance,\n                mnemonic: newWallet?.mnemonic\n            }\n        }\n        case 'REMOVE_WALLET': {\n            let wallets = state.wallets.filter((wallet) => wallet.address !== action.payload.address)\n            if (wallets.length > 0)\n            return {\n                ...state,\n                wallets: wallets,\n                address: wallets[0]?.address,\n                key: wallets[0]?.key\n            }\n            else return {\n                ...state,\n                wallets: [],\n                address: '',\n                key: '',\n                balance: ''\n            }\n        }\n        default: return state\n    }\n}\n\nexport default walletReducer","import {\n  Box, Heading, Spinner, Stack, Tab, TabList, TabPanel, TabPanels, Tabs\n} from '@chakra-ui/react';\nimport { get } from 'idb-keyval';\nimport React from 'react';\nimport { FaCameraRetro, FaUpload } from 'react-icons/fa';\nimport CameraWindow from './components/Camera';\nimport SmartweaveExplorer from './components/Smartweave';\nimport { SpeedDial, SpeedDialItem } from './components/SpeedDial';\nimport Tokens from './components/Tokens';\nimport TransactionDrawer from './components/TransactionDrawer';\nimport Transactions from './components/Transactions';\nimport WalletLoader from './components/WalletLoader';\nimport WalletContext, { initWalletState } from './context/walletContext';\nimport { getBlockHeight } from './providers/wallets';\nimport walletReducer from './reducers/walletReducer';\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(walletReducer, initWalletState)\n  const [open, setOpen] = React.useState(false)\n  const [openCamera, setCamera] = React.useState(false)\n  const [loading, setLoading] = React.useState(true)\n\n  const handleClose = (modal: string) => {\n    if (modal === 'txn') setOpen(false);\n    if (modal === 'camera') setCamera(false)\n  }\n\n  // Retrieves block height for use in calculating approximate vaulted balance times for PSTs\n  React.useEffect(() => {\n    getBlockHeight().then((res) => dispatch({ type: 'SET_BLOCK_HEIGHT', payload: { blockHeight: res } }))\n  }, [])\n\n  React.useEffect(() => {\n    get('wallets').then((data: any) => {\n      if (data) {\n        let loadedState = JSON.parse(data)\n        dispatch({ type: 'LOAD_STATE', payload: { state: loadedState}})\n      }\n      setLoading(false)\n    })\n  }, [])\n\n  return (\n    <WalletContext.Provider value={{ dispatch, state }}>\n\n        <Stack w=\"100%\" align=\"center\" >\n          <Heading>ArMob 2.0</Heading>\n          <Tabs isFitted align=\"center\" variant=\"enclosed-colored\">\n            <TabPanels w=\"90vw\">\n              <TabPanel>\n                <WalletLoader />\n              </TabPanel>\n              <TabPanel>\n                {loading ? <Spinner position=\"fixed\" bottom=\"50%\" right=\"50%\" /> :\n                  state.address !== '' &&\n                  <Box>\n                    <Tokens />\n                  </Box>\n                }\n              </TabPanel>\n              <TabPanel>\n                {state.address !== '' &&\n                  <Transactions />\n                }\n              </TabPanel>\n              <TabPanel>\n                <SmartweaveExplorer />\n              </TabPanel>\n            </TabPanels>\n            <TabList position=\"fixed\" bottom=\"0px\" left=\"0px\" w=\"100vw\">\n              <Tab>Wallet</Tab>\n              <Tab isDisabled={state.address === ''}>Tokens</Tab>\n              <Tab isDisabled={state.address === ''}>Transactions</Tab>\n              <Tab isDisabled={state.key === ''}>Smartweave</Tab>\n            </TabList>\n          </Tabs>\n        </Stack>\n        {state.key && <SpeedDial>\n          {state.key && <SpeedDialItem key='faupload' icon={<FaUpload />} label=\"Upload File\" clickHandler={() => setOpen(true)} />\n          }\n          {state.key && <SpeedDialItem key='facameretro' icon={<FaCameraRetro />} label=\"Take Picture\" clickHandler={() => setCamera(true)} />}\n        </SpeedDial>}\n        <TransactionDrawer isOpen={open} close={() => handleClose('txn')} />\n        <CameraWindow isOpen={openCamera} close={() => handleClose('camera')} setTxnOpen={() => setOpen(true)} />\n    </WalletContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n          <ChakraProvider theme={theme}>\n    <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}