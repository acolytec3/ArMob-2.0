{"version":3,"sources":["providers/wallets.ts","context/walletContext.ts","components/WalletLoader.tsx","reducers/walletReducer.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["addWallet","wallet","a","arweave","Arweave","init","wallets","jwkToAddress","address","ar","getBalance","balance","winstonToAr","console","log","initWalletState","key","WalletContext","createContext","state","dispatch","WalletLoader","toast","useToast","React","useContext","useEffect","loadWallet","data","JSON","parse","walletDeets","type","payload","localStorage","getItem","err","onDrop","acceptedFiles","reader","FileReader","onabort","onerror","onload","event","walletObject","target","result","setItem","stringify","title","status","duration","position","description","readAsText","Box","w","borderStyle","borderWidth","accept","getRootProps","getInputProps","flexDirection","padding","Text","fontSize","textAlign","Stack","isInline","parseFloat","toFixed","toLocaleString","walletReducer","action","App","useReducer","Provider","value","ThemeProvider","theme","Tabs","isFitted","align","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b1c672ed.chunk.js","sourcesContent":["import Arweave from 'arweave'\n\nexport const addWallet = async (wallet: any): Promise<{ address: string, balance: string }> => {\n    let arweave = Arweave.init({})\n    let address = await arweave.wallets.jwkToAddress(wallet)\n    let balance = arweave.ar.winstonToAr(await arweave.wallets.getBalance(address))\n    console.log(address);\n    console.log(balance);\n    return { address, balance }\n  }\n\n","import { createContext } from 'react'\n\nexport type walletState = {\n    key : any,\n    balance: string,\n    address: string\n}\nexport const initWalletState: walletState = {\n        key: {} as any,\n        balance: '0',\n        address: ''\n}\n\nconst WalletContext = createContext<{state:walletState, dispatch: React.Dispatch<any>}>({state: initWalletState, dispatch: () => null} )\n\nexport { WalletContext as default }","import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport { Box, Stack, Text, useToast } from '@chakra-ui/core'\nimport { addWallet } from '../providers/wallets'\nimport WalletContext from '../context/walletContext'\n\nconst WalletLoader = () => {\n  const toast = useToast()\n  const { state, dispatch } = React.useContext(WalletContext)\n\n  React.useEffect(() => {\n    const loadWallet = async (data: string) => {\n      let wallet = JSON.parse(data)\n      console.log(JSON.parse(data))\n      let walletDeets = await addWallet(wallet)\n      dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: wallet } })\n    }\n    let data = localStorage.getItem('wallet')\n   // console.log('data retrieved ', data)\n    if (data) {\n      try{\n      loadWallet(data)\n      }\n      catch (err) { console.log('Error loading wallet', err)}\n    }\n  },[])\n\n  const onDrop = async (acceptedFiles: any) => {\n    const reader = new FileReader()\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = async function (event) {\n      if (acceptedFiles[0].type === \"application/json\") {\n        try {\n          let walletObject = JSON.parse(event!.target!.result as string)\n          let walletDeets = await addWallet(walletObject)\n          localStorage.setItem('wallet', JSON.stringify(walletObject))\n          dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: walletObject } })\n        }\n        catch (err) {\n          console.log('Invalid json in wallet file')\n          toast({\n            title: 'Error loading wallet',\n            status: 'error',\n            duration: 3000,\n            position: 'bottom-left',\n            description: 'Invalid JSON in wallet file'\n          })\n        }\n      }\n      else {\n        console.log('Invalid file type')\n        toast({\n          title: 'Error loading wallet',\n          status: 'error',\n          duration: 3000,\n          position: 'bottom-left',\n          description: 'Invalid file type'\n        })\n      }\n    }\n    try {\n      reader.readAsText(acceptedFiles[0])\n    }\n    catch (err) {\n      console.log('Invalid file type')\n      toast({\n        title: 'Error loading wallet',\n        status: 'error',\n        duration: 3000,\n        position: 'bottom-left',\n        description: 'Invalid file type'\n      })\n    }\n  }\n\n  return (<Box>\n    {state.address === '' ? <Box w=\"100%\" borderStyle='dashed' borderWidth=\"2px\">\n      <Dropzone onDrop={onDrop} accept=\"application/json\">\n        {({ getRootProps, getInputProps }) => (\n          <section>\n            <div {...getRootProps()}>\n              <input {...getInputProps()} />\n              <Box flexDirection=\"row\" padding={3}><Text fontSize={14} textAlign=\"center\">Drop a wallet file or click to load wallet</Text></Box>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    </Box>\n      :\n      <Stack isInline><Text>{state.address}</Text><Text>{parseFloat(state.balance).toFixed(4).toLocaleString()} AR</Text></Stack>}</Box>\n  )\n}\n\nexport default WalletLoader","import { walletState } from '../context/walletContext'\n\nconst walletReducer = (state: walletState, action: {type:string, payload: any}): walletState => {\n    console.log('Current state is:', state)\n    console.log('Action requested is:',action)\n    switch (action.type) {\n        case 'ADD_WALLET': return {...state, key: action.payload.key, balance: action.payload.balance, address: action.payload.address};\n        default: return state\n    }\n}\n\nexport default walletReducer","import React from 'react';\nimport { theme, Box, Tabs, TabList, TabPanels, Tab, TabPanel, Text, ThemeProvider } from '@chakra-ui/core'\nimport WalletLoader from './components/WalletLoader'\nimport WalletContext, { initWalletState } from './context/walletContext'\nimport walletReducer from './reducers/walletReducer'\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(walletReducer, initWalletState)\n  return (\n    <WalletContext.Provider value={{ dispatch, state }}>\n      <ThemeProvider theme={theme}>\n        <Box>\n          <Text>Armob V2</Text>\n          <Tabs isFitted align=\"center\">\n            <TabPanels>\n              <TabPanel>\n                <WalletLoader />\n              </TabPanel>\n              <TabPanel>\n                <Text>Transactions</Text>\n              </TabPanel>\n              <TabPanel>\n                <Text>Browser</Text>\n              </TabPanel>\n            </TabPanels>\n            <TabList>\n              <Tab>Wallet</Tab>\n              <Tab>Transactions</Tab>\n              <Tab>Browser</Tab>\n            </TabList>\n          </Tabs>\n        </Box>\n      </ThemeProvider>\n    </WalletContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}