{"version":3,"sources":["providers/wallets.ts","context/walletContext.ts","components/WalletLoader.tsx","reducers/walletReducer.ts","components/Transactions.tsx","components/SpeedDial.tsx","components/TransactionModal.tsx","components/Tokens.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["addWallet","wallet","a","arweave","Arweave","init","host","port","address","wallets","jwkToAddress","ar","getBalance","balance","winstonToAr","console","log","getTokens","axios","post","query","res","tokens","data","transactions","edges","vertoContracts","map","node","tags","filter","tag","name","value","smartweaveContracts","edge","contracts","Set","concat","Promise","all","contract","readContract","then","contractState","balances","ticker","tokenBalances","getTxns","catch","err","getFee","size","get","sendTransfer","transfer","key","createTransaction","target","to","quantity","arToWinston","amount","transaction","addTag","sign","response","sendTokens","interactWriteDryRun","qty","function","type","interactWrite","txId","toString","updateTokens","token","initWalletState","WalletContext","createContext","state","dispatch","WalletLoader","props","toast","useToast","React","useContext","useState","loading","setLoading","setAddress","onDrop","acceptedFiles","reader","FileReader","onabort","onerror","onload","event","walletObject","JSON","parse","result","walletDeets","set","stringify","onClose","payload","title","status","duration","position","description","readAsText","loadWalletFromMnemonic","mnemonic","getKeyFromMnemonic","addAddress","align","w","borderStyle","borderWidth","getRootProps","getInputProps","flexDirection","padding","fontSize","textAlign","placeholder","onChange","evt","isDisabled","onClick","walletReducer","action","existingWallets","length","push","Transactions","txns","setTxns","useEffect","allowToggle","allowMultiple","txn","bg","border","borderColor","whiteSpace","overflow","textOverflow","id","columns","fee","recipient","Fragment","Txn","SpeedDialItem","icon","label","clickHandler","isInline","bottom","right","aria-label","isRound","SpeedDial","ref","children","isOpen","setIsOpen","wrapperRef","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","style","TransferModal","modal","setOpen","setAmount","setFee","setToAddress","next","setNext","validAmount","setValid","updateFee","cost","initiateTransfer","setMax","parseFloat","closeOnOverlayClick","isCentered","closeModal","spacing","isInvalid","e","onBlur","toFixed","toLocaleString","minimumFractionDigits","split","color","AddToken","valid","update","updatedTokens","Tokens","openModal","setTo","Blob","Math","random","slice","initTokenTransfer","message","fontWeight","my","undefined","maximumFractionDigits","closeOnBlur","zIndex","placement","left","App","useReducer","useDisclosure","onOpen","loadWallet","WalletModal","Provider","theme","isFitted","variant","del","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.44cff381.chunk.js","sourcesContent":["import Arweave from 'arweave'\nimport axios from 'axios'\nimport { readContract, interactWriteDryRun, interactWrite } from 'smartweave'\n//@ts-ignore\nimport { generateKeyPair, getKeyPairFromMnemonic } from 'human-crypto-keys'\nimport crypto from 'libp2p-crypto'\nimport { tokenBalance } from '../context/walletContext'\n\nconst getArweaveInstance = () => {\n  return Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n}\nexport const addWallet = async (wallet: any): Promise<{ address: string, balance: string }> => {\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  let address = ''\n  if (typeof wallet === \"string\") address = wallet;\n  else address = await arweave.wallets.jwkToAddress(wallet)\n  let balance = arweave.ar.winstonToAr(await arweave.wallets.getBalance(address))\n  console.log(address);\n  console.log(balance);\n\n  return { address, balance }\n}\n\nexport const getTokens = async (address: string): Promise<any[]> => {\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  \n  let res = await axios.post('https://arweave.net/graphql', {\n    query: `query {\n      transactions(first:20,\n          owners:[\"${address}\"],\n          tags: [{\n              name: \"Exchange\",\n            values:[\"Verto\"]\n          }, {name:\"Type\", values:[\"Buy\", \"Sell\"]}]\n      ) {\n          edges {\n              node {\n                  id\n                  tags {\n                    name\n                    value\n                  }\n              }\n          }\n      }\n  }`\n  })\n  let tokens = res.data.data.transactions.edges\n  let vertoContracts = tokens.map((node: any) => node.node.tags.filter((tag: { name: string, value: string }) => tag.name === \"Token\")[0].value)\n  res = await axios.post('https://arweave.net:443/graphql',{query:`query {\n      transactions(first:20,\n        \towners:[\"${address}\"]\n          tags: [{\n              name: \"App-Name\",\n            values:[\"SmartWeaveAction\"]\n          }]\n      ) {\n          edges {\n              node {\n                  id\n                  tags {\n                    name\n                    value\n                  }\n              }\n          }\n      }\n  }`})\n  console.log('Verto contract interactions', vertoContracts)\n  let smartweaveContracts = res.data.data.transactions.edges.map((edge:any) => edge.node.tags.filter((tag:any) => (tag.name === 'Contract'))[0].value)\n  console.log('Generic Smartweave contract interactions', smartweaveContracts)\n  let contracts = [...new Set(vertoContracts.concat(smartweaveContracts))]\n  let tokenBalances = await Promise.all(contracts.map((contract: any) =>\n    readContract(arweave, contract).then(contractState => {\n      console.log(contractState)\n      if (contractState.balances)\n      return { 'balance': contractState.balances[address], 'ticker': contractState.ticker, 'contract': contract }\n    })))\n  return tokenBalances\n}\n\nexport const getTxns = async (address: string): Promise<any> => {\n  return axios.post('https://arweave.net/graphql', {\n      query: `query {\n                transactions(owners:  [\"${address}\"]) {\n                  edges {\n                    node {\n                      id\n                      owner {\n                        address\n                      }\n                      recipient\n                      tags {\n                        name\n                        value\n                      }\n                      fee {\n                        winston\n                        ar\n                      }\n                      quantity {\n                        winston\n                        ar\n                      }\n                    }\n                  }\n                }\n              }`\n    })\n      .then((res) => {\n        console.log(res.data)\n        return res.data.data.transactions.edges\n      })\n    .catch((err) => {\n      console.log(err)\n      return []\n    })\n}\n\nexport const getFee = async (size: number): Promise<string> => {\n  let res = await axios.get(`https://arweave.net:443/price/${size}`)\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  return arweave.ar.winstonToAr(res.data)\n}\n\nexport const sendTransfer = async (transfer: any, key: any): Promise<string> => {\n  try {\n    let arweave = Arweave.init({\n      host: 'arweave.net',\n      port: 443,\n    })\n    let transaction = await arweave.createTransaction({\n      target: transfer.to,\n      quantity: arweave.ar.arToWinston(transfer.amount)\n    }, key);\n\n    transaction.addTag('App-Name', 'ArMob 2.0')\n    await arweave.transactions.sign(transaction, key);\n\n    const response = await arweave.transactions.post(transaction);\n    console.log(response);\n  }\n  catch (err) {\n    console.log(`Error sending tranfer - ${err}`)\n    return `Error submitting transaction - ${err}`\n  }\n  return 'Transaction submitted successfully'\n}\n\nexport const sendTokens = async (contract: string, amount: number, target: string, key: any): Promise<string | boolean> => {\n  try {\n    let arweave = Arweave.init({\n      host: 'arweave.net',\n      port: 443,\n    })\n    let res = await interactWriteDryRun(arweave, key, contract, {\n      target: target,\n      qty: amount,\n      function: 'transfer'\n    })\n    console.log('Dry-run result is:',res)\n    if (res.type === 'ok') {\n     let txId = await interactWrite(arweave, key, contract, {\n      target: target,\n      qty: amount,\n      function: 'transfer'\n    })\n    console.log(res)\n    return txId\n  }\n    return \"success!\"\n  }\n  catch (err) {\n    console.log(err)\n    return (err.toString())\n  }\n}\n\nexport const updateTokens = async (tokens: tokenBalance[], address: string): Promise<tokenBalance[] | false> => {\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  try {\n  let tokenBalances = await Promise.all(tokens.map((token: tokenBalance) =>\n    readContract(arweave, token.contract).then(contractState => {\n      console.log(contractState)\n      if (contractState.balances)\n      return { 'balance': contractState.balances[address] as number, 'ticker': contractState.ticker as string, 'contract': token.contract, contractState:contractState }\n      else return {'balance':0, 'ticker':'', 'contract':token.contract,contractState:contractState}\n    })))\n  return tokenBalances\n  }\n  catch (err) {\n    console.log('Error updating tokens', err)\n    return false\n  }\n}\n\nexport const generate = async (): Promise<string> => {\n  return (await generateKeyPair('rsa',{modulusLength:4096,format:'raw-pem'})).mnemonic\n}\n\nexport const regurgitate = async (mnemonic: string): Promise<any> => {\n  let keyPair = await getKeyPairFromMnemonic(mnemonic, 'rsa',{modulusLength:4096, format:'raw-pem'})\n  let privateKey = await crypto.keys.import(keyPair.privateKey, '')\n  //@ts-ignore\n  return privateKey._key\n}\n","import { createContext } from 'react'\n\nexport type tokenBalance = {\n    ticker: string,\n    balance: number,\n    contract: string,\n    contractState: any\n}\n\nexport type wallet = {\n    address: string,\n    key?: any\n}\nexport type walletState = {\n    key : any,\n    balance: string,\n    address: string,\n    tokens?: tokenBalance[],\n    wallets?: wallet[]\n}\nexport const initWalletState: walletState = {\n        key: {} as any,\n        balance: '',\n        address: ''\n}\n\nconst WalletContext = createContext<{state:walletState, dispatch: React.Dispatch<any>}>({state: initWalletState, dispatch: () => null} )\n\nexport { WalletContext as default }","import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport { Box, Button, Input, Spinner, Stack, Text, useToast } from '@chakra-ui/core'\nimport { set } from 'idb-keyval'\nimport { addWallet, getTokens, regurgitate } from '../providers/wallets'\nimport WalletContext from '../context/walletContext'\nimport { getKeyFromMnemonic } from 'arweave-mnemonic-keys'\n\nconst WalletLoader = (props: any) => {\n  const toast = useToast()\n  const { dispatch } = React.useContext(WalletContext)\n  const [loading, setLoading] = React.useState(false)\n  const [address, setAddress] = React.useState('')\n\n  const onDrop = async (acceptedFiles: any) => {\n    const reader = new FileReader()\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = async function (event) {\n      setLoading(true)\n      if (acceptedFiles[0].type === \"application/json\") {\n        try {\n          let walletObject = JSON.parse(event!.target!.result as string)\n          let walletDeets = await addWallet(walletObject)\n          let tokens = await getTokens(walletDeets.address);\n          await set('wallet', JSON.stringify(walletObject))\n          props.onClose();\n          dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: walletObject, tokens: tokens } })\n        }\n        catch (err) {\n          console.log('Invalid json in wallet file')\n          toast({\n            title: 'Error loading wallet',\n            status: 'error',\n            duration: 3000,\n            position: 'bottom-left',\n            description: 'Invalid JSON in wallet file'\n          })\n        }\n      }\n      else {\n        console.log('Invalid file type')\n        toast({\n          title: 'Error loading wallet',\n          status: 'error',\n          duration: 3000,\n          position: 'bottom-left',\n          description: 'Invalid file type'\n        })\n      }\n      setLoading(false)\n    }\n    try {\n      reader.readAsText(acceptedFiles[0])\n    }\n    catch (err) {\n      console.log('Invalid file type')\n      toast({\n        title: 'Error loading wallet',\n        status: 'error',\n        duration: 3000,\n        position: 'bottom-left',\n        description: 'Invalid file type'\n      })\n    }\n  }\n\n  const loadWalletFromMnemonic = async (mnemonic: string) => {\n    setLoading(true)\n    let walletObject = await getKeyFromMnemonic(mnemonic);\n    let walletDeets = await addWallet(walletObject);\n    let tokens = await getTokens(walletDeets.address);\n    await set('wallet', JSON.stringify(walletObject))\n    setLoading(false)\n    props.onClose();\n    dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: walletObject, tokens: tokens } })\n  }\n\n  const addAddress = async () => {\n    setLoading(true)\n    let walletDeets = await addWallet(address);\n    let tokens = await getTokens(address);\n    await set('wallet', address)\n    props.onClose();\n    dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: '', tokens: tokens } })\n  }\n\n  return (<Stack align=\"center\">\n    {loading ? <Spinner /> :\n      <Box w=\"100%\" borderStyle='dashed' borderWidth=\"2px\">\n        <Dropzone onDrop={onDrop}>\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                <Box flexDirection=\"row\" padding={3}><Text fontSize={14} textAlign=\"center\">Drop a wallet file or click to load wallet</Text></Box>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n      </Box>\n    }\n    {!loading && <Stack w=\"100%\">\n      <Input w=\"93%%\" placeholder=\"Wallet mnemonic\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAddress(evt.target.value) }} />\n      <Button isDisabled={(address === '')} onClick={() => loadWalletFromMnemonic(address)}>Load Wallet</Button>\n    </Stack>}\n    {!loading && <Stack w=\"100%\">\n      <Input w=\"93%%\" placeholder=\"Read-only wallet address\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAddress(evt.target.value) }} />\n      <Button isDisabled={(address === '')} onClick={() => addAddress()}>Track Address</Button>\n    </Stack>}\n  </Stack>\n  )\n}\n\nexport default WalletLoader","import { walletState, wallet } from '../context/walletContext';\n\nconst walletReducer = (state: walletState, action: { type: string, payload: any }): walletState => {\n    console.log('Current state is:', state)\n    console.log('Action requested is:', action)\n    switch (action.type) {\n        case 'ADD_WALLET': {\n            let existingWallets = state.wallets?.filter((wallet: wallet)=> wallet.address === action.payload.address)\n            let wallets = state.wallets\n            if (existingWallets && existingWallets.length === 0)\n                wallets?.push({address:action.payload.address, key:action.payload.key})\n            return {\n            ...state,\n            key: action.payload.key,\n            balance: action.payload.balance,\n            address: action.payload.address,\n            tokens: action.payload.tokens,\n            wallets: wallets\n        }};\n        case 'UPDATE_TOKENS': {\n            return {\n                ...state,\n                tokens: action.payload.tokens\n            }\n        }\n        default: return state\n    }\n}\n\nexport default walletReducer","import React from 'react'\nimport { Text, Accordion, AccordionItem, AccordionButton, AccordionPanel, AccordionIcon, SimpleGrid, Box, Heading, } from '@chakra-ui/core'\nimport WalletContext from '../context/walletContext'\nimport { getTxns } from '../providers/wallets'\n\nconst Txn = (txn: any) => {\n  return (\n    <AccordionItem key={txn.id} textAlign=\"left\">\n      <AccordionButton bg=\"white\" border=\"1px\" borderColor=\"grey\">\n          <Text whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">ID: {txn.node.id}</Text>\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel border=\"1px\">\n      <Heading size=\"xs\" fontSize=\"12px\">Metadata</Heading>\n        <SimpleGrid columns={2}>\n          <Text fontSize={10}>Fee: </Text>\n          <Text fontSize={10}>{txn.node.fee.ar} AR</Text>\n          {txn.node.recipient && <React.Fragment><Text fontSize={10}>Recipient: </Text>\n            <Text fontSize={10}>{txn.node.recipient}</Text>\n            <Text fontSize={10}>Amount: </Text>\n            <Text fontSize={10}>{txn.node.quantity.ar} AR</Text></React.Fragment>}\n        </SimpleGrid>\n        <Heading size=\"xs\" fontSize=\"12px\">Transaction Tags</Heading>\n        {txn.node.tags.map((tag: any) => {\n          return (<SimpleGrid key={txn.node.id + tag.name} columns={2} textAlign=\"left\" overflow=\"auto\">\n            <Text fontSize={10} key={tag.toString()}>{tag.name}</Text>\n            <Text fontSize={10} key={tag.name + tag.value}>{tag.value}</Text>\n          </SimpleGrid>\n          )\n        })}\n      </AccordionPanel>\n    </AccordionItem>\n\n  )\n}\nconst Transactions = () => {\n  const { state } = React.useContext(WalletContext)\n  const [txns, setTxns] = React.useState([])\n\n  React.useEffect(() => {\n    if (state.address !== '') {\n      getTxns(state.address)\n        .then((txns) => {\n          console.log(txns)\n          setTxns(txns)\n        })\n    }\n    else setTxns([])\n  }, [state.address])\n\n  return (<Box>\n    <Accordion allowToggle allowMultiple w=\"100%\">\n      {/* @ts-ignore */}\n      {txns.length > 0 ? txns.map((txn) => Txn(txn)) : null}\n    </Accordion>\n  </Box>\n  )\n}\n\nexport default Transactions","import React from 'react';\nimport { FaPlus, FaMinus} from 'react-icons/fa'\nimport { Stack, IconButton, Text } from '@chakra-ui/core'\n\ninterface SpeedDialItemProps {\n  icon: any, //Must pass an iconType object\n  label: string\n  clickHandler: () => void\n}\n\nexport const SpeedDialItem: React.FC<SpeedDialItemProps> = ({ icon, label, clickHandler }: SpeedDialItemProps) => {\n  return (\n    <Stack isInline\n      position=\"fixed\"\n      bottom=\"100px\"\n      right=\"20px\"\n      align=\"center\">\n      <Text fontSize={11}>{label}</Text>\n      <IconButton aria-label=\"wallet\" icon={icon} isRound onClick={async () => clickHandler()} />\n    </Stack>\n  )\n}\n\nexport const SpeedDial: React.FC = ({ children }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const wrapperRef = React.useRef(null);\n  \n  const useOutsideAlerter = (ref: any) => {\n    React.useEffect(() => {\n      function handleClickOutside(event: MouseEvent) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setIsOpen(false)\n        }\n      }\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  }\n  useOutsideAlerter(wrapperRef);\n\n  return (<div ref={wrapperRef} style={{ position: \"fixed\", bottom: \"50px\", right: \"20px\" }}>\n    <IconButton aria-label=\"open\" isRound icon={isOpen ? <FaMinus /> : <FaPlus />} onClick={(evt: React.MouseEvent) => setIsOpen(!isOpen) } />\n    {isOpen && children}\n  </div>)\n}\n\n/*  Once Framer Motion tells me what's wrong with Safari\n  return (<div ref={wrapperRef} style={{position: \"fixed\", bottom: \"50px\", right:\"20px\"}}>\n   <IconButton aria-label=\"open\" isRound icon={isOpen ? <FaMinus />: <FaPlus />}  onClick={(evt: React.MouseEvent) => {console.log(evt);setIsOpen(!isOpen)}} />\n    <AnimatePresence>\n      {isOpen &&\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ y: -20, opacity: 1 }}\n          exit={{ y: 20, opacity: 0 }}\n        ><SpeedDialItem key=\"1234\" /></motion.div>}\n    </AnimatePresence>\n  </div>)\n  */","import React, { useState, useEffect, Fragment } from 'react';\nimport {\n    Text, Button, Input, Stack,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    useToast, InputRightElement, InputGroup, FormControl, FormErrorMessage, Modal\n} from \"@chakra-ui/core\";\nimport { getFee, sendTransfer } from '../providers/wallets'\n\nimport WalletContext from '../context/walletContext'\n\nconst TransferModal = (props: any) => {\n    const [isOpen, setOpen] = useState(props.props.modal)\n    const { state } = React.useContext(WalletContext)\n    const [amount, setAmount] = useState('')\n    const [fee, setFee] = useState('0')\n    const [to, setToAddress] = useState('')\n    const [next, setNext] = useState(false)\n    const [validAmount, setValid] = useState(true)\n    const toast = useToast()\n\n\n    const updateFee = () => {\n        getFee(0).then(cost => setFee(cost))\n            .catch(() => toast({\n                title: 'Error',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom-left',\n                description: 'Error getting fee, check your network connection and try again'\n            }))\n    }\n\n    useEffect(() => {\n        setOpen(props.props.modal)\n        updateFee()\n    }, [props.props.modal])\n\n    const initiateTransfer = async () => {\n        let transferDeets = {\n            'to': to,\n            'fee': fee,\n            'txnId': '',\n            'amount': amount,\n        }\n        sendTransfer(transferDeets, state.key)\n        setOpen(false)\n    }\n\n    const validateAmount = () => {\n        amount === '' ?\n            setValid(true) :\n            setValid(parseFloat((parseFloat(state.balance) - parseFloat(fee) - parseFloat(amount)).toFixed(12)) >= 0)\n    }\n\n    const setMax = async () => {\n        let balance = parseFloat(state.balance)\n        let amount = balance - parseFloat(fee)\n        setAmount(amount.toString())\n    }\n    \n    return (<Modal closeOnOverlayClick={false} isCentered isOpen={isOpen} onClose={() => {\n        setOpen(false)\n        props.props.closeModal()\n    }}>\n        <ModalOverlay />\n        <ModalContent>\n            <ModalHeader>Send AR</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n                <Stack spacing={2}>\n                    <Stack>\n                        <Text>From:</Text>\n                        <Text fontSize={14} whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">{state.address}</Text>\n                    </Stack>\n                    {!next && <Fragment>\n                        <Stack spacing={2}>\n                            <FormControl isInvalid={to === state.address}>\n                                <Input placeholder=\"Send to Arweave wallet address\"\n                                    value={to}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setToAddress(e.target.value)}\n                                    onBlur={updateFee}\n                                    isInvalid={to === state.address} />\n                                <FormErrorMessage>Recipient address cannot be the same as the sending address</FormErrorMessage>\n                            </FormControl>\n\n                            <FormControl isInvalid={!validAmount}>\n                                <InputGroup>\n                                    <Input\n                                        placeholder=\"Amount\"\n                                        value={amount}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setAmount(e.target.value)}\n                                        onBlur={() => validateAmount()}\n                                        isInvalid={!validAmount}\n                                    />\n                                    <InputRightElement children='AR' />\n                                </InputGroup>\n                                <FormErrorMessage>Amount cannot be greater than wallet balance</FormErrorMessage>\n                            </FormControl>\n                            <Button border=\"none\" onClick={setMax}>Use Wallet Balance</Button>\n\n                            <Text>Fee: {fee} AR</Text>\n                            <Text>Total (including fee): {(parseFloat(fee) + parseFloat(amount ? amount : '0')).toLocaleString('en-US', { style: 'decimal', minimumFractionDigits: (fee !== '0') ? fee.split('.')[1].length : 1 })} AR</Text>\n                        </Stack>\n                    </Fragment>}\n                    {next && <Fragment>\n                        <Stack spacing={2}>\n                            <Stack>\n                                <Text>To:</Text>\n                                <Text fontSize={14}>{to}</Text>\n                            </Stack>\n                            <Stack isInline>\n                                <Stack>\n                                    <Text>Sending</Text>\n                                    <Text>{amount} AR</Text>\n                                </Stack>\n                                <Stack>\n                                    <Text>Fee</Text>\n                                    <Text>{fee} AR</Text>\n                                </Stack>\n                            </Stack>\n                            <Stack>\n                                <Text>Total</Text>\n                                <Text>{(parseFloat(fee) + parseFloat(amount ? amount : '0')).toLocaleString('en-US', { style: 'decimal', minimumFractionDigits: (fee !== '0') ? fee.split('.')[1].length : 1 })} AR</Text>\n                            </Stack>\n                            <Stack>\n                                <Text>Balance after transaction</Text>\n                                <Text>{(parseFloat(state.balance) - parseFloat(fee) - parseFloat(amount)).toString()} AR</Text>\n                            </Stack>\n                        </Stack>\n                    </Fragment>}\n                </Stack>\n            </ModalBody>\n            <ModalFooter>\n                {!next ? <Button bg=\"#333\" color=\"white\" w=\"100%\" isDisabled={!validAmount || (to === '')} onClick={() => setNext(true)}>Next</Button> :\n                    <Button bg=\"#333\" color=\"white\" w=\"100%\" onClick={function () {\n                        initiateTransfer();\n                        setOpen(false)\n                        props.props.closeModal();\n                    }}>Confirm and Send AR</Button>}\n            </ModalFooter>\n        </ModalContent>\n    </Modal>\n    )\n}\n\nexport default TransferModal","import React from 'react'\nimport WalletContext, { tokenBalance } from '../context/walletContext'\nimport { \n    Box, Button, Heading, SimpleGrid, Text, Popover, PopoverTrigger, Input, PopoverArrow, PopoverBody, PopoverContent, PopoverCloseButton, PopoverHeader, useToast, FormControl,\n       FormErrorMessage, Spinner, Stack, Divider\n} from '@chakra-ui/core'\nimport TransferModal from './TransactionModal'\nimport { sendTokens, getFee, updateTokens } from '../providers/wallets'\n\nconst AddToken = (props: any) => {\n    const { state, dispatch } = React.useContext(WalletContext)\n    const [address, setAddress] = React.useState('')\n    const [loading, setLoading] = React.useState(false)\n    const [valid, setValid] = React.useState(true)\n    const toast = useToast()\n\n    const update = async () => {\n        setLoading(true)\n        console.log(props)\n        let tokens = [...state.tokens]\n        tokens.push({ contract: address, balance: 0, ticker: '', contractState: '' })\n        let updatedTokens = await updateTokens(tokens, state.address)\n        if (updatedTokens) {\n        dispatch({ type: 'UPDATE_TOKENS', payload: { tokens: updatedTokens } })\n        }\n        else toast({\n            title: 'Error updating balances',\n            status: 'error',\n            duration: 3000,\n            position: 'bottom',\n            description: 'Please check contract ID and try again'\n        })\n        setAddress('')\n        setLoading(false)\n        props.props()\n    }\n\n    const validateToken = () => {\n        if (state.tokens!.filter((token) => token.contract === address).length > 0)\n            setValid(false)\n        else setValid(true)\n    }\n\n    return (\n        <Stack>\n            <Heading size=\"sm\">Add Custom Token</Heading>\n            <FormControl isInvalid={!valid}>\n                <Stack isInline >\n                    <Input placeholder=\"Contract ID\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAddress(evt.target.value) }}\n                        onBlur={() => validateToken()} />\n                    <Button isDisabled={loading || !valid || address === ''} onClick={() => update()}>Add Token</Button>\n                    {loading && <Spinner />}\n                </Stack>\n                <FormErrorMessage>Token already loaded</FormErrorMessage>\n            </FormControl>\n        </Stack>\n    )\n}\nconst Tokens = () => {\n    const { state } = React.useContext(WalletContext)\n    const [modal, openModal] = React.useState(false)\n    const [to, setTo] = React.useState('')\n    const [amount, setAmount] = React.useState(0)\n    const closeModal = () => openModal(false)\n    const [fee, setFee] = React.useState('')\n    const [loading, setLoading] = React.useState(false)\n    const toast = useToast();\n\n    React.useEffect(() => {\n        getFee(new Blob([Math.random().toString().slice(-4)]).size).then((fee) => setFee(fee))\n    })\n\n    const initTokenTransfer = async (token: tokenBalance, onClose: any) => {\n        setLoading(true)\n        let message = await sendTokens(token.contract, amount, to, state.key)\n        setLoading(false)\n        onClose()\n        toast({\n            title: `Transaction Status - ${message}`,\n            status: 'info',\n            duration: 3000,\n            position: 'bottom'\n        })\n    }\n    return (<Box textAlign=\"left\">\n        <Text whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">Address: {state.address}</Text>\n        <SimpleGrid columns={3}>\n            <Text fontWeight=\"bold\">Ticker</Text>\n            <Text fontWeight=\"bold\">Balance</Text>\n        </SimpleGrid>\n        <Divider />\n        <SimpleGrid columns={3} my={2}>\n            <Text>AR</Text>\n            <Text>{parseFloat(state.balance).toLocaleString(undefined,{maximumFractionDigits: 6})}</Text>\n            <Button isDisabled={!state.key} onClick={() => openModal(true)}>Send</Button>\n        </SimpleGrid>\n        {state.tokens?.map((token: tokenBalance) => {\n            return (\n                <SimpleGrid columns={3} my={2}>\n                    <Text>{token.ticker}</Text>\n                    <Text>{token.balance}</Text>\n                    <Popover closeOnBlur={false}>\n                        {({ onClose }) =>\n                            <>\n                                <PopoverTrigger>\n                                    <Button >Send</Button>\n                                </PopoverTrigger>\n                                <PopoverContent zIndex={4}>\n                                    <PopoverArrow />\n                                    <PopoverHeader>Send Tokens</PopoverHeader>\n                                    <PopoverCloseButton />\n                                    <PopoverBody>\n                                        <Stack align=\"center\" >\n                                            {!loading ?\n                                                <Box>\n                                                    <Input my={2}\n                                                        placeholder={`Amount`}\n                                                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAmount(parseFloat(evt.target.value)) }}\n                                                    />\n                                                    <Input\n                                                        placeholder={`Address`} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setTo(evt.target.value) }} />\n                                                    <Text textAlign=\"center\">Fee: {fee}</Text>\n                                                    <Button isDisabled={!state.key} w=\"90%\" onClick={() => {\n                                                        initTokenTransfer(token, onClose);\n                                                    }}>Submit Transaction</Button>\n                                                </Box>\n                                                :\n                                                <Box>\n                                                    <Spinner />\n                                                    <Text>Submitting Transaction</Text>\n                                                </Box>\n                                            }</Stack>\n                                    </PopoverBody>\n                                </PopoverContent>\n                            </>}\n                    </Popover>\n                </SimpleGrid>\n            )\n        })\n        }\n        <TransferModal props={{ modal, closeModal }} />\n        <Popover placement=\"top-end\">\n        {({ onClose }) => (\n        <>\n            <PopoverTrigger>\n                <Button position=\"fixed\" bottom=\"50px\" left=\"20px\">Add Custom Token</Button>\n            </PopoverTrigger>\n            <PopoverContent>\n                <PopoverCloseButton />\n                <PopoverBody>\n                    <AddToken props={onClose}/>\n                </PopoverBody>\n            </PopoverContent>\n            </> )}\n        </Popover>\n    </Box>\n    )\n}\n\nexport default Tokens","import React from 'react';\nimport {\n  theme, Tabs, TabList, TabPanels, Tab, TabPanel, ChakraProvider, Stack, Box,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton, useDisclosure, Heading, Portal, PortalManager, Button\n} from '@chakra-ui/core'\nimport WalletLoader from './components/WalletLoader'\nimport WalletContext, { initWalletState } from './context/walletContext'\nimport walletReducer from './reducers/walletReducer'\nimport Transactions from './components/Transactions';\nimport { SpeedDial, SpeedDialItem } from './components/SpeedDial'\nimport Tokens from './components/Tokens';\nimport { del, get } from 'idb-keyval'\nimport { addWallet } from './providers/wallets'\nimport { FaWallet } from 'react-icons/fa';\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(walletReducer, initWalletState)\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  React.useEffect(() => {\n    const loadWallet = async (data: string) => {\n      let wallet = JSON.parse(data)\n      console.log(JSON.parse(data))\n      let walletDeets = await addWallet(wallet)\n      dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: wallet } })\n    }\n    get('wallet').then((data: any) => {\n      if (data) {\n        try {\n          loadWallet(data)\n        }\n        catch (err) { console.log('Error loading wallet', err) }\n      }\n    })\n  }, [])\n\n  const WalletModal = () => {\n    return (<Modal isCentered isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Load Wallet</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <WalletLoader onClose={onClose} />\n        </ModalBody>\n        <ModalFooter>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n    )\n  }\n\n  return (\n    <WalletContext.Provider value={{ dispatch, state }}>\n      <ChakraProvider theme={theme}>\n        <PortalManager >\n          <Stack w=\"100%\" align=\"center\" >\n            <Heading>ArMob 2.0</Heading>\n            <Tabs isFitted align=\"center\" variant=\"enclosed-colored\">\n              <TabPanels w=\"90vw\">\n                <TabPanel>\n                  {state.address !== '' ?\n                    <Box>\n                      <Tokens />\n                    </Box>\n                    :\n                    <Button onClick={onOpen}>Open Wallet</Button>\n                  }\n                </TabPanel>\n                <TabPanel>\n                  {state.address !== '' ?\n                    <Transactions />\n                    :\n                    <Button onClick={onOpen}>Open Wallet</Button>\n                  }\n                </TabPanel>\n              </TabPanels>\n              <TabList position=\"fixed\" bottom=\"0px\" left=\"0px\" w=\"100vw\">\n                <Tab>Wallet</Tab>\n                <Tab>Transactions</Tab>\n              </TabList>\n            </Tabs>\n          </Stack>\n          <Portal >\n            <SpeedDial>\n              {state.address === '' &&\n                <SpeedDialItem icon={<FaWallet />} label=\"Open Wallet\" clickHandler={() => {\n                  onOpen()\n                }} />}\n              {state.address !== '' &&\n                <SpeedDialItem icon={<FaWallet />} label=\"Close Wallet\" clickHandler={async () => {\n                  await del('wallet');\n                  dispatch({ type: 'ADD_WALLET', payload: { address: '', balance: '', key: '' } });\n                }} />\n              }\n            </SpeedDial>\n          </Portal>\n          <WalletModal />\n        </PortalManager>\n      </ChakraProvider>\n    </WalletContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}