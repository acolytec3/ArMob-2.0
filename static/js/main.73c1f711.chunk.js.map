{"version":3,"sources":["providers/wallets.ts","context/walletContext.ts","components/WalletLoader.tsx","reducers/walletReducer.ts","components/Transactions.tsx","components/SpeedDial.tsx","components/Tokens.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["addWallet","wallet","a","arweave","Arweave","init","host","port","address","wallets","jwkToAddress","ar","getBalance","balance","winstonToAr","console","log","getTokens","axios","post","query","res","tokens","data","transactions","edges","vertoContracts","map","node","tags","filter","tag","name","value","smartweaveContracts","edge","contracts","Set","concat","Promise","all","contract","readContract","then","contractState","balances","ticker","tokenBalances","initWalletState","key","WalletContext","createContext","state","dispatch","WalletLoader","props","toast","useToast","React","useContext","useState","loading","setLoading","setAddress","onDrop","acceptedFiles","reader","FileReader","onabort","onerror","onload","event","type","walletObject","JSON","parse","target","result","walletDeets","set","stringify","onClose","payload","title","status","duration","position","description","readAsText","err","addAddress","Stack","align","Spinner","Box","w","borderStyle","borderWidth","getRootProps","getInputProps","flexDirection","padding","Text","fontSize","textAlign","Input","placeholder","onChange","evt","Button","isDisabled","onClick","walletReducer","action","existingWallets","length","push","Transactions","txns","setTxns","useEffect","catch","Accordion","allowToggle","txn","id","SimpleGrid","columns","Txn","SpeedDial","ref","isOpen","setIsOpen","wrapperRef","useRef","SpeedDialItem","isInline","bottom","right","IconButton","aria-label","icon","FaWallet","isRound","del","onOpen","handleClickOutside","current","contains","document","addEventListener","removeEventListener","style","FaMinus","FaPlus","div","initial","opacity","animate","y","exit","Tokens","Heading","size","token","App","useReducer","useDisclosure","WalletModal","Modal","isCentered","Provider","ThemeProvider","theme","Tabs","isFitted","left","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.73c1f711.chunk.js","sourcesContent":["import Arweave from 'arweave'\nimport axios from 'axios'\nimport { readContract } from 'smartweave'\n\nexport const addWallet = async (wallet: any): Promise<{ address: string, balance: string }> => {\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  let address = ''\n  if (typeof wallet === \"string\") address = wallet;\n  else address = await arweave.wallets.jwkToAddress(wallet)\n  let balance = arweave.ar.winstonToAr(await arweave.wallets.getBalance(address))\n  console.log(address);\n  console.log(balance);\n  return { address, balance }\n}\n\nexport const getTokens = async (address: string): Promise<any[]> => {\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  let res = await axios.post('https://arweave.net/graphql', {\n    query: `query {\n      transactions(first:20,\n          owners:[\"${address}\"],\n          tags: [{\n              name: \"Exchange\",\n            values:[\"Verto\"]\n          }, {name:\"Type\", values:[\"Buy\", \"Sell\"]}]\n      ) {\n          edges {\n              node {\n                  id\n                  tags {\n                    name\n                    value\n                  }\n              }\n          }\n      }\n  }`\n  })\n  let tokens = res.data.data.transactions.edges\n  let vertoContracts = tokens.map((node: any) => node.node.tags.filter((tag: { name: string, value: string }) => tag.name === \"Token\")[0].value)\n  res = await axios.post('https://arweave.net:443/graphql',{query:`query {\n      transactions(first:20,\n        \towners:[\"${address}\"]\n          tags: [{\n              name: \"App-Name\",\n            values:[\"SmartWeaveAction\"]\n          }]\n      ) {\n          edges {\n              node {\n                  id\n                  tags {\n                    name\n                    value\n                  }\n              }\n          }\n      }\n  }`})\n  console.log('Verto contract interactions', vertoContracts)\n  let smartweaveContracts = res.data.data.transactions.edges.map((edge:any) => edge.node.tags.filter((tag:any) => (tag.name === 'Contract'))[0].value)\n  console.log('Generic Smartweave contract interactions', smartweaveContracts)\n  let contracts = [...new Set(vertoContracts.concat(smartweaveContracts))]\n  let tokenBalances = await Promise.all(contracts.map((contract: any) =>\n    readContract(arweave, contract).then(contractState => {\n      if (contractState.balances)\n      return { 'balance': contractState.balances[address], 'ticker': contractState.ticker }\n    })))\n  return tokenBalances\n}","import { createContext } from 'react'\n\nexport type tokenBalance = {\n    ticker: string,\n    balance: number\n}\n\nexport type wallet = {\n    address: string,\n    key?: any\n}\nexport type walletState = {\n    key : any,\n    balance: string,\n    address: string,\n    tokens?: tokenBalance[],\n    wallets?: wallet[]\n}\nexport const initWalletState: walletState = {\n        key: {} as any,\n        balance: '',\n        address: ''\n}\n\nconst WalletContext = createContext<{state:walletState, dispatch: React.Dispatch<any>}>({state: initWalletState, dispatch: () => null} )\n\nexport { WalletContext as default }","import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport { Box, Button, Input, Spinner, Stack, Text, useToast } from '@chakra-ui/core'\nimport { get, set} from 'idb-keyval'\nimport { addWallet, getTokens } from '../providers/wallets'\nimport WalletContext from '../context/walletContext'\n\nconst WalletLoader = (props :any) => {\n  const toast = useToast()\n  const { state, dispatch } = React.useContext(WalletContext)\n  const [loading, setLoading] = React.useState(false)\n  const [address, setAddress] = React.useState('')\n\n /* React.useEffect(() => {\n    const loadWallet = async (data: string) => {\n      let wallet = JSON.parse(data)\n      console.log(JSON.parse(data))\n      let walletDeets = await addWallet(wallet)\n      dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: wallet } })\n    }\n    get('wallet').then((data : any) => {\n    if (data) {\n      try{\n      loadWallet(data)\n      }\n      catch (err) { console.log('Error loading wallet', err)}\n    }})\n  },[])*/\n\n  const onDrop = async (acceptedFiles: any) => {\n    const reader = new FileReader()\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = async function (event) {\n      setLoading(true)\n      if (acceptedFiles[0].type === \"application/json\") {\n        try {\n          let walletObject = JSON.parse(event!.target!.result as string)\n          let walletDeets = await addWallet(walletObject)\n          let tokens = await getTokens(walletDeets.address);\n          await set('wallet', JSON.stringify(walletObject))\n          props.onClose();\n          dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: walletObject, tokens: tokens } })\n        }\n        catch (err) {\n          console.log('Invalid json in wallet file')\n          toast({\n            title: 'Error loading wallet',\n            status: 'error',\n            duration: 3000,\n            position: 'bottom-left',\n            description: 'Invalid JSON in wallet file'\n          })\n        }\n      }\n      else {\n        console.log('Invalid file type')\n        toast({\n          title: 'Error loading wallet',\n          status: 'error',\n          duration: 3000,\n          position: 'bottom-left',\n          description: 'Invalid file type'\n        })\n      }\n      setLoading(false)\n    }\n    try {\n      reader.readAsText(acceptedFiles[0])\n    }\n    catch (err) {\n      console.log('Invalid file type')\n      toast({\n        title: 'Error loading wallet',\n        status: 'error',\n        duration: 3000,\n        position: 'bottom-left',\n        description: 'Invalid file type'\n      })\n    }\n  }\n\n  const addAddress = async () =>\n  {\n    setLoading(true)\n    let walletDeets = await addWallet(address);\n    let tokens = await getTokens(address);\n    await set('wallet', address)\n    props.onClose();\n    dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: '', tokens: tokens } })\n  }\n\n  return (<Stack align=\"center\">\n    {loading ? <Spinner /> :\n    <Box w=\"100%\" borderStyle='dashed' borderWidth=\"2px\">\n      <Dropzone onDrop={onDrop}>\n        {({ getRootProps, getInputProps }) => (\n          <section>\n            <div {...getRootProps()}>\n              <input {...getInputProps()} />\n              <Box flexDirection=\"row\" padding={3}><Text fontSize={14} textAlign=\"center\">Drop a wallet file or click to load wallet</Text></Box>\n            </div>\n          </section>\n        )}\n      </Dropzone> \n    </Box>\n    }\n    {!loading && <Stack w=\"100%\">\n      <Input w=\"93%%\" placeholder=\"Wallet address\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {setAddress(evt.target.value)}} />\n      <Button isDisabled={(address === '')} onClick={() => addAddress()}>Track Address</Button>\n      </Stack>}\n    </Stack>\n  )\n}\n\nexport default WalletLoader","import { walletState, wallet } from '../context/walletContext';\n\nconst walletReducer = (state: walletState, action: { type: string, payload: any }): walletState => {\n    console.log('Current state is:', state)\n    console.log('Action requested is:', action)\n    switch (action.type) {\n        case 'ADD_WALLET': {\n            let existingWallets = state.wallets?.filter((wallet: wallet)=> wallet.address === action.payload.address)\n            let wallets = state.wallets\n            if (existingWallets && existingWallets.length === 0)\n                wallets?.push({address:action.payload.address, key:action.payload.key})\n            return {\n            ...state,\n            key: action.payload.key,\n            balance: action.payload.balance,\n            address: action.payload.address,\n            tokens: action.payload.tokens,\n            wallets: wallets\n        }};\n        default: return state\n    }\n}\n\nexport default walletReducer","import React from 'react'\nimport axios from 'axios'\nimport { Text, Accordion, AccordionItem, AccordionHeader, AccordionPanel, AccordionIcon, SimpleGrid, Box, Heading, } from '@chakra-ui/core'\nimport WalletContext from '../context/walletContext'\n\nconst Txn = (txn: any) => {\n  return (\n    <AccordionItem>\n      <AccordionHeader>\n        <Text>ID: {txn.node.id}</Text>\n        <AccordionIcon />\n      </AccordionHeader>\n\n      <AccordionPanel>\n        {txn.node.tags.map((tag: any) => {\n          return (<SimpleGrid columns={2}>\n            <Text fontSize={10}>{tag.name}</Text>\n            <Text fontSize={10}>{tag.value}</Text>\n          </SimpleGrid>\n          )\n        })}\n      </AccordionPanel>\n    </AccordionItem>\n\n  )\n}\nconst Transactions = () => {\n  const { state } = React.useContext(WalletContext)\n  const [txns, setTxns] = React.useState([])\n  console.log(state.address)\n  React.useEffect(() => {\n    axios.post('https://arweave.net/graphql', {\n      query: `query {\n                transactions(owners:  [\"${state.address}\"]) {\n                  edges {\n                    node {\n                      id\n                      owner {\n                        address\n                      }\n                      recipient\n                      tags {\n                        name\n                        value\n                      }\n                      fee {\n                        winston\n                        ar\n                      }\n                      quantity {\n                        winston\n                        ar\n                      }\n                    }\n                  }\n                }\n              }`\n    })\n      .then((res) => {\n        console.log(res.data)\n        setTxns(res.data.data.transactions.edges)\n      })\n      .catch((err) => console.log(err))\n  }, [state.address])\n\n  return (<Box>\n    <Accordion allowToggle w=\"100%\">\n      {/* @ts-ignore */}\n      {txns.length > 0 ? txns.map((txn) => Txn(txn)) : null}\n    </Accordion>\n  </Box>\n  )\n}\n\nexport default Transactions","import React from 'react';\nimport { FaPlus, FaMinus, FaWallet } from 'react-icons/fa'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { Stack, IconButton, Text } from '@chakra-ui/core'\nimport { del } from 'idb-keyval'\nimport WalletContext from '../context/walletContext'\n\nconst SpeedDial = (props : any)=> {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const wrapperRef = React.useRef(null);\n  \n  const SpeedDialItem = () => {\n    const { state, dispatch } = React.useContext(WalletContext)\n  \n    return (\n      <Stack isInline\n        key=\"me\"\n        position=\"fixed\"\n        bottom=\"40px\"\n        right=\"0px\"\n        align=\"center\">\n        <Text fontSize={11}>{state.address === '' ? \"Open Wallet\" : \"Close Wallet\"}</Text>\n        <IconButton aria-label=\"wallet\" icon={FaWallet} isRound onClick={async () => {\n          if (state.address !== '') {\n            await del('wallet');\n            dispatch({ type: 'ADD_WALLET', payload: { address: '', balance: '', key: '' } });\n          }\n          //@ts-ignore\n          else {\n            props.onOpen()\n          }\n          setIsOpen(false)\n        }} />\n      </Stack>\n    )\n  }\n  const useOutsideAlerter = (ref: any) => {\n    React.useEffect(() => {\n      function handleClickOutside(event: MouseEvent) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setIsOpen(false)\n        }\n      }\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  }\n  useOutsideAlerter(wrapperRef);\n\n  return (<div ref={wrapperRef} style={{position: \"fixed\", bottom: \"20px\", right:\"20px\"}}>\n    <IconButton aria-label=\"open\" isRound icon={isOpen ? FaMinus : FaPlus}  onClick={() => setIsOpen(!isOpen)} />\n    <AnimatePresence>\n      {isOpen &&\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ y: -20, opacity: 1 }}\n          exit={{ y: 20, opacity: 0 }}\n        ><SpeedDialItem /></motion.div>}\n    </AnimatePresence>\n  </div>)\n}\n\nexport default SpeedDial","import React from 'react'\nimport WalletContext, { tokenBalance } from '../context/walletContext'\nimport { Box, Heading, SimpleGrid, Text } from '@chakra-ui/core'\n\nconst Tokens = () => {\n    const { state } = React.useContext(WalletContext)\n    return (<Box>\n        <Heading size=\"sm\">Wallet Balances</Heading>\n        <SimpleGrid columns={2}>\n            <Text>Ticker</Text>\n            <Text>Balance</Text>\n            <Text>AR</Text>\n            <Text>{state.balance}</Text>\n        </SimpleGrid>\n        {state.tokens!.map((token: tokenBalance) => {\n            return (\n                <SimpleGrid columns={2}>\n                    <Text>{token.ticker}</Text>\n                    <Text>{token.balance}</Text>\n                </SimpleGrid>\n            )\n        })\n        }\n    </Box>\n    )\n}\n\nexport default Tokens","import React from 'react';\nimport {\n  theme, Tabs, TabList, TabPanels, Tab, TabPanel, Text, ThemeProvider, Stack, Box,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton, useDisclosure, Heading\n} from '@chakra-ui/core'\nimport WalletLoader from './components/WalletLoader'\nimport WalletContext, { initWalletState } from './context/walletContext'\nimport walletReducer from './reducers/walletReducer'\nimport Transactions from './components/Transactions';\nimport SpeedDial from './components/SpeedDial'\nimport Tokens from './components/Tokens';\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(walletReducer, initWalletState)\n  const [walletModal, openModal] = React.useState(false)\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n\n  const WalletModal = () => {\n    return (<Modal isCentered isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Load Wallet</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <WalletLoader onClose={onClose} />\n        </ModalBody>\n\n        <ModalFooter>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n    )\n  }\n\n  return (\n    <WalletContext.Provider value={{ dispatch, state }}>\n      <ThemeProvider theme={theme}>\n        <Stack w=\"100%\" align=\"center\" >\n            <Heading>ArMob 2.0</Heading>\n          <Tabs isFitted align=\"center\">\n            <TabPanels>\n              <TabPanel>\n                {state.address !== '' &&\n                  <Box>\n                    {state.tokens && state.tokens.length > 0 && <Tokens />}\n                  </Box>}\n              </TabPanel>\n              <TabPanel>\n                <Transactions />\n              </TabPanel>\n            </TabPanels>\n            <TabList position=\"fixed\" bottom=\"0px\" left=\"0px\" w=\"100vw\">\n              <Tab>Wallet</Tab>\n              <Tab>Transactions</Tab>\n            </TabList>\n          </Tabs>\n        </Stack>\n        {/* @ts-ignore 8*/}\n        <SpeedDial onOpen={onOpen} />\n        <WalletModal />\n      </ThemeProvider>\n    </WalletContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}