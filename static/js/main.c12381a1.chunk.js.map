{"version":3,"sources":["providers/wallets.ts","context/walletContext.ts","components/WalletLoader.tsx","reducers/walletReducer.ts","components/Transactions.tsx","components/SpeedDial.tsx","components/TransactionModal.tsx","components/Tokens.tsx","components/TransactionDrawer.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["getArweaveInstance","Arweave","init","host","port","addWallet","wallet","a","arweave","address","wallets","jwkToAddress","ar","getBalance","balance","winstonToAr","console","log","getTokens","axios","post","query","res","tokens","data","transactions","edges","vertoContracts","map","node","tags","filter","tag","name","value","smartweaveContracts","edge","contracts","Set","concat","Promise","all","contract","readContract","then","contractState","balances","ticker","tokenBalances","getTxns","catch","err","getFee","size","get","sendTransfer","transfer","key","createTransaction","target","to","quantity","arToWinston","amount","transaction","addTag","sign","response","sendTokens","interactWriteDryRun","qty","function","type","interactWrite","txId","toString","uploadFile","arrayBuffer","buffer","forEach","updateTokens","token","initWalletState","WalletContext","createContext","state","dispatch","WalletLoader","props","toast","useToast","React","useContext","useState","loading","setLoading","setAddress","onDrop","acceptedFiles","reader","FileReader","onabort","onerror","onload","event","walletObject","JSON","parse","result","walletDeets","set","stringify","onClose","payload","title","status","duration","position","description","readAsText","loadWalletFromMnemonic","mnemonic","getKeyFromMnemonic","addAddress","align","w","borderStyle","borderWidth","getRootProps","getInputProps","flexDirection","padding","fontSize","textAlign","placeholder","onChange","evt","isDisabled","onClick","walletReducer","action","existingWallets","length","push","Transactions","txns","setTxns","useEffect","allowToggle","allowMultiple","txn","bg","border","borderColor","whiteSpace","overflow","textOverflow","id","columns","fee","recipient","Fragment","Txn","SpeedDialItem","icon","label","clickHandler","yPos","isInline","bottom","right","aria-label","isRound","SpeedDial","ref","children","isOpen","setIsOpen","wrapperRef","useRef","items","child","isValidElement","handleClickOutside","current","contains","document","addEventListener","removeEventListener","style","index","cloneElement","TransferModal","modal","setOpen","setAmount","setFee","setToAddress","next","setNext","validAmount","setValid","updateFee","cost","initiateTransfer","setMax","parseFloat","closeOnOverlayClick","isCentered","closeModal","spacing","isInvalid","e","onBlur","toFixed","toLocaleString","minimumFractionDigits","split","color","AddToken","valid","update","updatedTokens","Tokens","openModal","setTo","Blob","Math","random","slice","initTokenTransfer","message","fontWeight","my","undefined","maximumFractionDigits","closeOnBlur","zIndex","placement","left","Tags","setName","setValue","TransactionDrawer","close","setData","setTags","handleClose","handleUpload","startsWith","setTimeout","contents","newTags","variant","mr","App","useReducer","useDisclosure","onOpen","open","loadWallet","WalletModal","Provider","theme","isFitted","del","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.c12381a1.chunk.js","sourcesContent":["import Arweave from 'arweave'\nimport axios from 'axios'\nimport { readContract, interactWriteDryRun, interactWrite } from 'smartweave'\n//@ts-ignore\nimport { generateKeyPair } from 'human-crypto-keys'\nimport { tokenBalance } from '../context/walletContext'\nimport { JWKInterface } from 'arweave/node/lib/wallet'\nimport * as ArweaveUtils from 'arweave/web/lib/utils'\nconst getArweaveInstance = () => {\n  return Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n}\n\nexport const addWallet = async (wallet: any): Promise<{ address: string, balance: string }> => {\n  let arweave = getArweaveInstance()\n  let address = ''\n  if (typeof wallet === \"string\") address = wallet;\n  else address = await arweave.wallets.jwkToAddress(wallet)\n  let balance = arweave.ar.winstonToAr(await arweave.wallets.getBalance(address))\n  console.log(address);\n  console.log(balance);\n\n  return { address, balance }\n}\n\nexport const getTokens = async (address: string): Promise<any[]> => {\n  let arweave = getArweaveInstance()\n  \n  let res = await axios.post('https://arweave.net/graphql', {\n    query: `query {\n      transactions(first:20,\n          owners:[\"${address}\"],\n          tags: [{\n              name: \"Exchange\",\n            values:[\"Verto\"]\n          }, {name:\"Type\", values:[\"Buy\", \"Sell\"]}]\n      ) {\n          edges {\n              node {\n                  id\n                  tags {\n                    name\n                    value\n                  }\n              }\n          }\n      }\n  }`\n  })\n  let tokens = res.data.data.transactions.edges\n  let vertoContracts = tokens.map((node: any) => node.node.tags.filter((tag: { name: string, value: string }) => tag.name === \"Token\")[0].value)\n  res = await axios.post('https://arweave.net:443/graphql',{query:`query {\n      transactions(first:20,\n        \towners:[\"${address}\"]\n          tags: [{\n              name: \"App-Name\",\n            values:[\"SmartWeaveAction\"]\n          }]\n      ) {\n          edges {\n              node {\n                  id\n                  tags {\n                    name\n                    value\n                  }\n              }\n          }\n      }\n  }`})\n  console.log('Verto contract interactions', vertoContracts)\n  let smartweaveContracts = res.data.data.transactions.edges.map((edge:any) => edge.node.tags.filter((tag:any) => (tag.name === 'Contract'))[0].value)\n  console.log('Generic Smartweave contract interactions', smartweaveContracts)\n  let contracts = [...new Set(vertoContracts.concat(smartweaveContracts))]\n  let tokenBalances = await Promise.all(contracts.map((contract: any) =>\n    readContract(arweave, contract).then(contractState => {\n      console.log(contractState)\n      if (contractState.balances) {\n        return { 'balance': contractState.balances[address], 'ticker': contractState.ticker, 'contract': contract }\n      }\n      else return null\n    })))\n    \n  return tokenBalances\n}\n\nexport const getTxns = async (address: string): Promise<any> => {\n  return axios.post('https://arweave.net/graphql', {\n      query: `query {\n                transactions(owners:  [\"${address}\"]) {\n                  edges {\n                    node {\n                      id\n                      owner {\n                        address\n                      }\n                      recipient\n                      tags {\n                        name\n                        value\n                      }\n                      fee {\n                        winston\n                        ar\n                      }\n                      quantity {\n                        winston\n                        ar\n                      }\n                    }\n                  }\n                }\n              }`\n    })\n      .then((res) => {\n        console.log(res.data)\n        return res.data.data.transactions.edges\n      })\n    .catch((err) => {\n      console.log(err)\n      return []\n    })\n}\n\nexport const getFee = async (size: number): Promise<string> => {\n  let res = await axios.get(`https://arweave.net:443/price/${size}`)\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  return arweave.ar.winstonToAr(res.data)\n}\n\nexport const sendTransfer = async (transfer: any, key: any): Promise<string> => {\n  try {\n    let arweave = Arweave.init({\n      host: 'arweave.net',\n      port: 443,\n    })\n    let transaction = await arweave.createTransaction({\n      target: transfer.to,\n      quantity: arweave.ar.arToWinston(transfer.amount)\n    }, key);\n\n    transaction.addTag('App-Name', 'ArMob 2.0')\n    await arweave.transactions.sign(transaction, key);\n\n    const response = await arweave.transactions.post(transaction);\n    console.log(response);\n  }\n  catch (err) {\n    console.log(`Error sending tranfer - ${err}`)\n    return `Error submitting transaction - ${err}`\n  }\n  return 'Transaction submitted successfully'\n}\n\nexport const sendTokens = async (contract: string, amount: number, target: string, key: any): Promise<string | boolean> => {\n  try {\n    let arweave = getArweaveInstance()\n    let res = await interactWriteDryRun(arweave, key, contract, {\n      target: target,\n      qty: amount,\n      function: 'transfer'\n    })\n    console.log('Dry-run result is:',res)\n    if (res.type === 'ok') {\n     let txId = await interactWrite(arweave, key, contract, {\n      target: target,\n      qty: amount,\n      function: 'transfer'\n    })\n    console.log(res)\n    return txId\n  }\n    return \"success!\"\n  }\n  catch (err) {\n    console.log(err)\n    return (err.toString())\n  }\n}\n\nexport const uploadFile = async (data: File, key: JWKInterface, tags: { name: string; value: string; }[]) => {\n  try {\n    let arweave = getArweaveInstance()\n    let buffer = await data.arrayBuffer()\n    let transaction = await arweave.createTransaction({data: buffer}, key)\n    tags.forEach((tag) => transaction.addTag(tag.name,tag.value))\n    await arweave.transactions.sign(transaction, key)\n    const response = await arweave.transactions.post(transaction);\n    console.log(response);\n  }\n  catch (err) {\n    console.log(`Error sending tranfer - ${err}`)\n    return `Error submitting transaction - ${err}`\n  }\n  return 'Transaction submitted successfully'\n}\n\nexport const updateTokens = async (tokens: tokenBalance[], address: string): Promise<tokenBalance[] | false> => {\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  try {\n  let tokenBalances = await Promise.all(tokens.map((token: tokenBalance) =>\n    readContract(arweave, token.contract).then(contractState => {\n      console.log(contractState)\n      if (contractState.balances)\n      return { 'balance': contractState.balances[address] as number, 'ticker': contractState.ticker as string, 'contract': token.contract, contractState:contractState }\n      else return {'balance':0, 'ticker':'', 'contract':token.contract,contractState:contractState}\n    })))\n  return tokenBalances\n  }\n  catch (err) {\n    console.log('Error updating tokens', err)\n    return false\n  }\n}\n\nexport const generate = async (): Promise<string> => {\n  return (await generateKeyPair('rsa',{modulusLength:4096,format:'raw-pem'})).mnemonic\n}\n","import { createContext } from 'react'\n\nexport type tokenBalance = {\n    ticker: string,\n    balance: number,\n    contract: string,\n    contractState: any\n}\n\nexport type wallet = {\n    address: string,\n    key?: any\n}\nexport type walletState = {\n    key : any,\n    balance: string,\n    address: string,\n    tokens?: tokenBalance[],\n    wallets?: wallet[]\n}\nexport const initWalletState: walletState = {\n        key: {} as any,\n        balance: '',\n        address: ''\n}\n\nconst WalletContext = createContext<{state:walletState, dispatch: React.Dispatch<any>}>({state: initWalletState, dispatch: () => null} )\n\nexport { WalletContext as default }","import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport { Box, Button, Input, Spinner, Stack, Text, useToast } from '@chakra-ui/core'\nimport { set } from 'idb-keyval'\nimport { addWallet, getTokens } from '../providers/wallets'\nimport WalletContext from '../context/walletContext'\nimport { getKeyFromMnemonic } from 'arweave-mnemonic-keys'\n\nconst WalletLoader = (props: any) => {\n  const toast = useToast()\n  const { dispatch } = React.useContext(WalletContext)\n  const [loading, setLoading] = React.useState(false)\n  const [address, setAddress] = React.useState('')\n\n  const onDrop = async (acceptedFiles: any) => {\n    const reader = new FileReader()\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n    reader.onload = async function (event) {\n      setLoading(true)\n      if (acceptedFiles[0].type === \"application/json\") {\n        try {\n          let walletObject = JSON.parse(event!.target!.result as string)\n          let walletDeets = await addWallet(walletObject)\n          let tokens = await getTokens(walletDeets.address);\n          await set('wallet', JSON.stringify(walletObject))\n          props.onClose();\n          dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: walletObject, tokens: tokens } })\n        }\n        catch (err) {\n          console.log('Invalid json in wallet file')\n          toast({\n            title: 'Error loading wallet',\n            status: 'error',\n            duration: 3000,\n            position: 'bottom-left',\n            description: 'Invalid JSON in wallet file'\n          })\n        }\n      }\n      else {\n        console.log('Invalid file type')\n        toast({\n          title: 'Error loading wallet',\n          status: 'error',\n          duration: 3000,\n          position: 'bottom-left',\n          description: 'Invalid file type'\n        })\n      }\n      setLoading(false)\n    }\n    try {\n      reader.readAsText(acceptedFiles[0])\n    }\n    catch (err) {\n      console.log('Invalid file type')\n      toast({\n        title: 'Error loading wallet',\n        status: 'error',\n        duration: 3000,\n        position: 'bottom-left',\n        description: 'Invalid file type'\n      })\n    }\n  }\n\n  const loadWalletFromMnemonic = async (mnemonic: string) => {\n    setLoading(true)\n    let walletObject = await getKeyFromMnemonic(mnemonic);\n    let walletDeets = await addWallet(walletObject);\n    let tokens = await getTokens(walletDeets.address);\n    await set('wallet', JSON.stringify(walletObject))\n    setLoading(false)\n    props.onClose();\n    dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: walletObject, tokens: tokens } })\n  }\n\n  const addAddress = async () => {\n    setLoading(true)\n    let walletDeets = await addWallet(address);\n    let tokens = await getTokens(address);\n    await set('wallet', address)\n    dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: '', tokens: tokens } })\n    props.onClose();\n  }\n\n  return (<Stack align=\"center\">\n    {loading ? <Spinner /> :\n      <Box w=\"100%\" borderStyle='dashed' borderWidth=\"2px\">\n        <Dropzone onDrop={onDrop}>\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                <Box flexDirection=\"row\" padding={3}><Text fontSize={14} textAlign=\"center\">Drop a wallet file or click to load wallet</Text></Box>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n      </Box>\n    }\n    {!loading && <Stack w=\"100%\">\n      <Input w=\"93%%\" placeholder=\"Wallet mnemonic\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAddress(evt.target.value) }} />\n      <Button isDisabled={(address === '')} onClick={() => loadWalletFromMnemonic(address)}>Load Wallet</Button>\n    </Stack>}\n    {!loading && <Stack w=\"100%\">\n      <Input w=\"93%%\" placeholder=\"Read-only wallet address\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAddress(evt.target.value) }} />\n      <Button isDisabled={(address === '')} onClick={() => addAddress()}>Track Address</Button>\n    </Stack>}\n  </Stack>\n  )\n}\n\nexport default WalletLoader","import { walletState, wallet } from '../context/walletContext';\n\nconst walletReducer = (state: walletState, action: { type: string, payload: any }): walletState => {\n    console.log('Current state is:', state)\n    console.log('Action requested is:', action)\n    switch (action.type) {\n        case 'ADD_WALLET': {\n            let existingWallets = state.wallets?.filter((wallet: wallet)=> wallet.address === action.payload.address)\n            let wallets = state.wallets\n            if (existingWallets && existingWallets.length === 0)\n                wallets?.push({address:action.payload.address, key:action.payload.key})\n            return {\n            ...state,\n            key: action.payload.key,\n            balance: action.payload.balance,\n            address: action.payload.address,\n            tokens: action.payload.tokens,\n            wallets: wallets\n        }};\n        case 'UPDATE_TOKENS': {\n            return {\n                ...state,\n                tokens: action.payload.tokens\n            }\n        }\n        default: return state\n    }\n}\n\nexport default walletReducer","import React from 'react'\nimport { Text, Accordion, AccordionItem, AccordionButton, AccordionPanel, AccordionIcon, SimpleGrid, Box, Heading, } from '@chakra-ui/core'\nimport WalletContext from '../context/walletContext'\nimport { getTxns } from '../providers/wallets'\n\nconst Txn = (txn: any) => {\n  return (\n    <AccordionItem key={txn.id} textAlign=\"left\">\n      <AccordionButton bg=\"white\" border=\"1px\" borderColor=\"grey\">\n          <Text whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">ID: {txn.node.id}</Text>\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel border=\"1px\">\n      <Heading size=\"xs\" fontSize=\"12px\">Metadata</Heading>\n        <SimpleGrid columns={2}>\n          <Text fontSize={10}>Fee: </Text>\n          <Text fontSize={10}>{txn.node.fee.ar} AR</Text>\n          {txn.node.recipient && <React.Fragment><Text fontSize={10}>Recipient: </Text>\n            <Text fontSize={10}>{txn.node.recipient}</Text>\n            <Text fontSize={10}>Amount: </Text>\n            <Text fontSize={10}>{txn.node.quantity.ar} AR</Text></React.Fragment>}\n        </SimpleGrid>\n        <Heading size=\"xs\" fontSize=\"12px\">Transaction Tags</Heading>\n        {txn.node.tags.map((tag: any) => {\n          return (<SimpleGrid key={txn.node.id + tag.name} columns={2} textAlign=\"left\" overflow=\"auto\">\n            <Text fontSize={10} key={tag.toString()}>{tag.name}</Text>\n            <Text fontSize={10} key={tag.name + tag.value}>{tag.value}</Text>\n          </SimpleGrid>\n          )\n        })}\n      </AccordionPanel>\n    </AccordionItem>\n\n  )\n}\nconst Transactions = () => {\n  const { state } = React.useContext(WalletContext)\n  const [txns, setTxns] = React.useState([])\n\n  React.useEffect(() => {\n    if (state.address !== '') {\n      getTxns(state.address)\n        .then((txns) => {\n          console.log(txns)\n          setTxns(txns)\n        })\n    }\n    else setTxns([])\n  }, [state.address])\n\n  return (<Box>\n    <Accordion allowToggle allowMultiple w=\"100%\">\n      {/* @ts-ignore */}\n      {txns.length > 0 ? txns.map((txn) => Txn(txn)) : null}\n    </Accordion>\n  </Box>\n  )\n}\n\nexport default Transactions","import React from 'react';\nimport { FaPlus, FaMinus} from 'react-icons/fa'\nimport { Stack, IconButton, Text } from '@chakra-ui/core'\n\ninterface SpeedDialItemProps {\n  icon: any, //Must pass an iconType object\n  label: string\n  clickHandler: () => void,\n  yPos?: string\n}\n\nexport const SpeedDialItem: React.FC<SpeedDialItemProps> = ({ icon, label, clickHandler, yPos }: SpeedDialItemProps) => {\n  return (\n    <Stack isInline\n      position=\"fixed\"\n      bottom={yPos}\n      right=\"20px\"\n      align=\"center\">\n      <Text fontSize={11}>{label}</Text>\n      <IconButton aria-label=\"wallet\" icon={icon} isRound onClick={async () => clickHandler()} />\n    </Stack>\n  )\n}\n\nexport const SpeedDial: React.FC = ({ children }) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const wrapperRef = React.useRef(null);\n  //@ts-ignore\n  const items = children && children.filter((child: any) => React.isValidElement(child))\n  var yPos = 100\n  const useOutsideAlerter = (ref: any) => {\n    React.useEffect(() => {\n      function handleClickOutside(event: MouseEvent) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setIsOpen(false)\n        }\n      }\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  }\n  useOutsideAlerter(wrapperRef);\n  //@ts-ignore\n  return (<div ref={wrapperRef} style={{ position: \"fixed\", bottom: \"50px\", right: \"20px\" }}>\n    <IconButton aria-label=\"open\" isRound icon={isOpen ? <FaMinus /> : <FaPlus />} onClick={(evt: React.MouseEvent) => setIsOpen(!isOpen) } />\n    {/* @ts-ignore */}\n    {isOpen && items!.map((child, index) => {\n      if (React.isValidElement(child)) {\n        //@ts-ignore\n        return React.cloneElement(child, {...child.props,yPos: (yPos + 50*(index)).toString()+'px'})\n      }} )}\n  </div>)\n}\n\n/*  Once Framer Motion tells me what's wrong with Safari\n  return (<div ref={wrapperRef} style={{position: \"fixed\", bottom: \"50px\", right:\"20px\"}}>\n   <IconButton aria-label=\"open\" isRound icon={isOpen ? <FaMinus />: <FaPlus />}  onClick={(evt: React.MouseEvent) => {console.log(evt);setIsOpen(!isOpen)}} />\n    <AnimatePresence>\n      {isOpen &&\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ y: -20, opacity: 1 }}\n          exit={{ y: 20, opacity: 0 }}\n        ><SpeedDialItem key=\"1234\" /></motion.div>}\n    </AnimatePresence>\n  </div>)\n  */","import React, { useState, useEffect, Fragment } from 'react';\nimport {\n    Text, Button, Input, Stack,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    useToast, InputRightElement, InputGroup, FormControl, FormErrorMessage, Modal\n} from \"@chakra-ui/core\";\nimport { getFee, sendTransfer } from '../providers/wallets'\n\nimport WalletContext from '../context/walletContext'\n\nconst TransferModal = (props: any) => {\n    const [isOpen, setOpen] = useState(props.props.modal)\n    const { state } = React.useContext(WalletContext)\n    const [amount, setAmount] = useState('')\n    const [fee, setFee] = useState('0')\n    const [to, setToAddress] = useState('')\n    const [next, setNext] = useState(false)\n    const [validAmount, setValid] = useState(true)\n    const toast = useToast()\n\n\n    const updateFee = () => {\n        getFee(0).then(cost => setFee(cost))\n            .catch(() => toast({\n                title: 'Error',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom-left',\n                description: 'Error getting fee, check your network connection and try again'\n            }))\n    }\n\n    useEffect(() => {\n        setOpen(props.props.modal)\n        updateFee()\n    }, [props.props.modal])\n\n    const initiateTransfer = async () => {\n        let transferDeets = {\n            'to': to,\n            'fee': fee,\n            'txnId': '',\n            'amount': amount,\n        }\n        sendTransfer(transferDeets, state.key)\n        setOpen(false)\n    }\n\n    const validateAmount = () => {\n        amount === '' ?\n            setValid(true) :\n            setValid(parseFloat((parseFloat(state.balance) - parseFloat(fee) - parseFloat(amount)).toFixed(12)) >= 0)\n    }\n\n    const setMax = async () => {\n        let balance = parseFloat(state.balance)\n        let amount = balance - parseFloat(fee)\n        setAmount(amount.toString())\n    }\n    \n    return (<Modal closeOnOverlayClick={false} isCentered isOpen={isOpen} onClose={() => {\n        setOpen(false)\n        props.props.closeModal()\n    }}>\n        <ModalOverlay />\n        <ModalContent>\n            <ModalHeader>Send AR</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n                <Stack spacing={2}>\n                    <Stack>\n                        <Text>From:</Text>\n                        <Text fontSize={14} whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">{state.address}</Text>\n                    </Stack>\n                    {!next && <Fragment>\n                        <Stack spacing={2}>\n                            <FormControl isInvalid={to === state.address}>\n                                <Input placeholder=\"Send to Arweave wallet address\"\n                                    value={to}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setToAddress(e.target.value)}\n                                    onBlur={updateFee}\n                                    isInvalid={to === state.address} />\n                                <FormErrorMessage>Recipient address cannot be the same as the sending address</FormErrorMessage>\n                            </FormControl>\n\n                            <FormControl isInvalid={!validAmount}>\n                                <InputGroup>\n                                    <Input\n                                        placeholder=\"Amount\"\n                                        value={amount}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setAmount(e.target.value)}\n                                        onBlur={() => validateAmount()}\n                                        isInvalid={!validAmount}\n                                    />\n                                    <InputRightElement children='AR' />\n                                </InputGroup>\n                                <FormErrorMessage>Amount cannot be greater than wallet balance</FormErrorMessage>\n                            </FormControl>\n                            <Button border=\"none\" onClick={setMax}>Use Wallet Balance</Button>\n\n                            <Text>Fee: {fee} AR</Text>\n                            <Text>Total (including fee): {(parseFloat(fee) + parseFloat(amount ? amount : '0')).toLocaleString('en-US', { style: 'decimal', minimumFractionDigits: (fee !== '0') ? fee.split('.')[1].length : 1 })} AR</Text>\n                        </Stack>\n                    </Fragment>}\n                    {next && <Fragment>\n                        <Stack spacing={2}>\n                            <Stack>\n                                <Text>To:</Text>\n                                <Text fontSize={14}>{to}</Text>\n                            </Stack>\n                            <Stack isInline>\n                                <Stack>\n                                    <Text>Sending</Text>\n                                    <Text>{amount} AR</Text>\n                                </Stack>\n                                <Stack>\n                                    <Text>Fee</Text>\n                                    <Text>{fee} AR</Text>\n                                </Stack>\n                            </Stack>\n                            <Stack>\n                                <Text>Total</Text>\n                                <Text>{(parseFloat(fee) + parseFloat(amount ? amount : '0')).toLocaleString('en-US', { style: 'decimal', minimumFractionDigits: (fee !== '0') ? fee.split('.')[1].length : 1 })} AR</Text>\n                            </Stack>\n                            <Stack>\n                                <Text>Balance after transaction</Text>\n                                <Text>{(parseFloat(state.balance) - parseFloat(fee) - parseFloat(amount)).toString()} AR</Text>\n                            </Stack>\n                        </Stack>\n                    </Fragment>}\n                </Stack>\n            </ModalBody>\n            <ModalFooter>\n                {!next ? <Button bg=\"#333\" color=\"white\" w=\"100%\" isDisabled={!validAmount || (to === '')} onClick={() => setNext(true)}>Next</Button> :\n                    <Button bg=\"#333\" color=\"white\" w=\"100%\" onClick={function () {\n                        initiateTransfer();\n                        setOpen(false)\n                        props.props.closeModal();\n                    }}>Confirm and Send AR</Button>}\n            </ModalFooter>\n        </ModalContent>\n    </Modal>\n    )\n}\n\nexport default TransferModal","import React from 'react'\nimport WalletContext, { tokenBalance } from '../context/walletContext'\nimport { \n    Box, Button, Heading, SimpleGrid, Text, Popover, PopoverTrigger, Input, PopoverArrow, PopoverBody, PopoverContent, PopoverCloseButton, PopoverHeader, useToast, FormControl,\n       FormErrorMessage, Spinner, Stack, Divider\n} from '@chakra-ui/core'\nimport TransferModal from './TransactionModal'\nimport { sendTokens, getFee, updateTokens } from '../providers/wallets'\n\nconst AddToken = (props: any) => {\n    const { state, dispatch } = React.useContext(WalletContext)\n    const [address, setAddress] = React.useState('')\n    const [loading, setLoading] = React.useState(false)\n    const [valid, setValid] = React.useState(true)\n    const toast = useToast()\n\n    const update = async () => {\n        setLoading(true)\n        console.log(props)\n        let tokens = [...state.tokens]\n        tokens.push({ contract: address, balance: 0, ticker: '', contractState: '' })\n        let updatedTokens = await updateTokens(tokens, state.address)\n        if (updatedTokens) {\n        dispatch({ type: 'UPDATE_TOKENS', payload: { tokens: updatedTokens } })\n        }\n        else toast({\n            title: 'Error updating balances',\n            status: 'error',\n            duration: 3000,\n            position: 'bottom',\n            description: 'Please check contract ID and try again'\n        })\n        setAddress('')\n        setLoading(false)\n        props.props()\n    }\n\n    const validateToken = () => {\n        if (state.tokens!.filter((token) => token.contract === address).length > 0)\n            setValid(false)\n        else setValid(true)\n    }\n\n    return (\n        <Stack>\n            <Heading size=\"sm\">Add Custom Token</Heading>\n            <FormControl isInvalid={!valid}>\n                <Stack isInline >\n                    <Input placeholder=\"Contract ID\" onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAddress(evt.target.value) }}\n                        onBlur={() => validateToken()} />\n                    <Button isDisabled={loading || !valid || address === ''} onClick={() => update()}>Add Token</Button>\n                    {loading && <Spinner />}\n                </Stack>\n                <FormErrorMessage>Token already loaded</FormErrorMessage>\n            </FormControl>\n        </Stack>\n    )\n}\nconst Tokens = () => {\n    const { state } = React.useContext(WalletContext)\n    const [modal, openModal] = React.useState(false)\n    const [to, setTo] = React.useState('')\n    const [amount, setAmount] = React.useState(0)\n    const closeModal = () => openModal(false)\n    const [fee, setFee] = React.useState('')\n    const [loading, setLoading] = React.useState(false)\n    const toast = useToast();\n\n    React.useEffect(() => {\n        getFee(new Blob([Math.random().toString().slice(-4)]).size).then((fee) => setFee(fee))\n    })\n\n    const initTokenTransfer = async (token: tokenBalance, onClose: any) => {\n        setLoading(true)\n        let message = await sendTokens(token.contract, amount, to, state.key)\n        setLoading(false)\n        onClose()\n        toast({\n            title: `Transaction Status - ${message}`,\n            status: 'info',\n            duration: 3000,\n            position: 'bottom'\n        })\n    }\n\n    return (<Box textAlign=\"left\">\n        <Text whiteSpace=\"nowrap\" overflow=\"hidden\" textOverflow=\"ellipsis\">Address: {state.address}</Text>\n        <SimpleGrid columns={3}>\n            <Text fontWeight=\"bold\">Ticker</Text>\n            <Text fontWeight=\"bold\">Balance</Text>\n        </SimpleGrid>\n        <Divider />\n        <SimpleGrid columns={3} my={2}>\n            <Text>AR</Text>\n            <Text>{parseFloat(state.balance).toLocaleString(undefined,{maximumFractionDigits: 6})}</Text>\n            <Button isDisabled={!state.key} onClick={() => openModal(true)}>Send</Button>\n        </SimpleGrid>\n        {state.tokens?.map((token: tokenBalance) => {\n            if (token) {\n            return (\n                <SimpleGrid columns={3} my={2}>\n                    <Text>{token.ticker}</Text>\n                    <Text>{token.balance}</Text>\n                    <Popover closeOnBlur={false}>\n                        {({ onClose }) =>\n                            <>\n                                <PopoverTrigger>\n                                    <Button >Send</Button>\n                                </PopoverTrigger>\n                                <PopoverContent zIndex={4}>\n                                    <PopoverArrow />\n                                    <PopoverHeader>Send Tokens</PopoverHeader>\n                                    <PopoverCloseButton />\n                                    <PopoverBody>\n                                        <Stack align=\"center\" >\n                                            {!loading ?\n                                                <Box>\n                                                    <Input my={2}\n                                                        placeholder={`Amount`}\n                                                        onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setAmount(parseFloat(evt.target.value)) }}\n                                                    />\n                                                    <Input\n                                                        placeholder={`Address`} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => { setTo(evt.target.value) }} />\n                                                    <Text textAlign=\"center\">Fee: {fee}</Text>\n                                                    <Button isDisabled={!state.key} w=\"90%\" onClick={() => {\n                                                        initTokenTransfer(token, onClose);\n                                                    }}>Submit Transaction</Button>\n                                                </Box>\n                                                :\n                                                <Box>\n                                                    <Spinner />\n                                                    <Text>Submitting Transaction</Text>\n                                                </Box>\n                                            }</Stack>\n                                    </PopoverBody>\n                                </PopoverContent>\n                            </>}\n                    </Popover>\n                </SimpleGrid>\n            )\n        }})\n        }\n        <TransferModal props={{ modal, closeModal }} />\n        <Popover placement=\"top-end\">\n        {({ onClose }) => (\n        <>\n            <PopoverTrigger>\n                <Button position=\"fixed\" bottom=\"50px\" left=\"20px\">Add Custom Token</Button>\n            </PopoverTrigger>\n            <PopoverContent>\n                <PopoverCloseButton />\n                <PopoverBody>\n                    <AddToken props={onClose}/>\n                </PopoverBody>\n            </PopoverContent>\n            </> )}\n        </Popover>\n    </Box>\n    )\n}\n\nexport default Tokens","\nimport React from 'react'\nimport {\n    Drawer,\n    DrawerBody,\n    DrawerFooter,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton, Button, Input, Box, Text, Stack,\n    useToast,\n    SimpleGrid,\n    Heading,\n    Spinner\n} from \"@chakra-ui/core\";\nimport Dropzone from 'react-dropzone'\nimport WalletContext from '../context/walletContext'\nimport { getFee, uploadFile } from '../providers/wallets'\ninterface TxnDrawerProps {\n    isOpen: boolean,\n    close: () => void\n}\n\ninterface TagsProps {\n    tags: {\n        name: string,\n        value: string\n    }[],\n    clickHandler: (name: string, value: string) => void\n}\n\nconst Tags: React.FC<TagsProps> = ({ tags, clickHandler }) => {\n    const [name, setName] = React.useState('')\n    const [value, setValue] = React.useState('')\n    return (\n        <Stack>\n            <Heading size=\"sm\">Transacion Tags</Heading>\n            {tags.map((tag) => {\n                return (<SimpleGrid key={tag.name + tag.value} columns={2} fontSize={12}>\n                    <Text>Name: {tag.name}</Text>\n                    <Text>Value: {tag.value}</Text>\n                </SimpleGrid>)\n            }\n            )}\n            <Input placeholder=\"Name\" value={name} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => setName(evt.target.value)} />\n            <Input placeholder=\"Value\" value={value} onChange={(evt: React.ChangeEvent<HTMLInputElement>) => setValue(evt.target.value)} />\n            <Button isDisabled={(name === '' || value === '')}\n                onClick={() => {\n                    clickHandler(name, value)\n                    setName('')\n                    setValue('')\n                }}>\n                Add Tag</Button>\n        </Stack>\n    )\n}\n\nconst TransactionDrawer: React.FC<TxnDrawerProps> = ({ isOpen, close }) => {\n    const { state } = React.useContext(WalletContext)\n    const toast = useToast();\n    const [data, setData] = React.useState(null as any)\n    const [tags, setTags] = React.useState([] as { name: string; value: string; }[])\n    const [fee, setFee] = React.useState('0')\n    const [loading, setLoading] = React.useState(false)\n\n    const tagsHandler = (name: string, value: string) => {\n        if (tags !== undefined) {\n            let newTags = [...tags!, { name, value }]\n            setTags(newTags)\n        }\n        else setTags([{ name, value }])\n    }\n\n    const handleClose = () => {\n        setData(null);\n        setTags([]);\n        close()\n    }\n\n    const handleUpload = async () => {\n        setLoading(true)\n        let res = await uploadFile(data, state.key, tags)\n        if (res.startsWith('Transaction')){\n            toast({\n                title: 'Success',\n                status: 'success',\n                duration: 3000,\n                position: 'bottom',\n                description: 'Your file has been submitted to the blockchain'\n            })\n        }\n        else {\n            toast({\n                title: 'Error submitting transaction',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom',\n                description: res\n            })\n        }\n\n        setTimeout(() => {\n            setLoading(false)\n            handleClose()}\n            ,1000)\n    }\n\n    const onDrop = async (acceptedFiles: File[]) => {\n        const reader = new FileReader()\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload = async function (event) {\n            if (event && event.target) {\n                let contents = acceptedFiles[0]\n                let tags = [\n                    { 'name': 'App-Name', 'value': 'ArMob 2.0' },\n                    { 'name': 'Content-Type', 'value': acceptedFiles[0].type }\n                ]\n                let fee = await getFee(acceptedFiles[0].size)\n                setFee(fee)\n                setData(contents)\n                setTags(tags)\n            }\n\n        }\n        try {\n            reader.readAsText(acceptedFiles[0])\n        }\n        catch (err) {\n            console.log('Unable to process file')\n            toast({\n                title: 'Error processing file',\n                status: 'error',\n                duration: 3000,\n                position: 'bottom',\n                description: 'Please try again'\n            })\n        }\n    }\n\n    return (\n        <>\n            <Drawer isOpen={isOpen} placement=\"right\" onClose={close} >\n                <DrawerOverlay />\n                <DrawerContent>\n                    <DrawerCloseButton onClick={handleClose} />\n                    <DrawerHeader>Upload file to Arweave</DrawerHeader>\n                    <DrawerBody>\n                        {!data && <Box w=\"100%\" borderStyle='dashed' borderWidth=\"2px\">\n                            <Dropzone onDrop={onDrop}>\n                                {({ getRootProps, getInputProps }) => (\n                                    <section>\n                                        <div {...getRootProps()}>\n                                            <input {...getInputProps()} />\n                                            <Box flexDirection=\"row\" padding={3}><Text fontSize={14} textAlign=\"center\">Drop a file or click to select from system file picker</Text></Box>\n                                        </div>\n                                    </section>\n                                )}\n                            </Dropzone>\n                        </Box>}\n                        {data && !loading && <Stack>\n                            <Text>Fee: {fee} AR</Text>\n                            <Tags tags={tags} clickHandler={tagsHandler} />\n                            </Stack>}\n                        {data && loading && <Spinner />}\n                    </DrawerBody>\n\n                    <DrawerFooter>\n                        <Button variant=\"outline\" mr={3} onClick={handleClose}>Cancel</Button>\n                        <Button color=\"blue\" onClick={handleUpload}>Upload File</Button>\n                    </DrawerFooter>\n                </DrawerContent>\n            </Drawer>\n        </>\n    );\n}\n\nexport default TransactionDrawer","import React from 'react';\nimport {\n  theme, Tabs, TabList, TabPanels, Tab, TabPanel, ChakraProvider, Stack, Box,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton, useDisclosure, Heading, Portal, PortalManager, Button\n} from '@chakra-ui/core'\nimport WalletLoader from './components/WalletLoader'\nimport WalletContext, { initWalletState } from './context/walletContext'\nimport walletReducer from './reducers/walletReducer'\nimport Transactions from './components/Transactions';\nimport { SpeedDial, SpeedDialItem } from './components/SpeedDial'\nimport Tokens from './components/Tokens';\nimport { del, get } from 'idb-keyval'\nimport { addWallet, getTokens } from './providers/wallets'\nimport { FaWallet, FaUpload } from 'react-icons/fa';\nimport TransactionDrawer from './components/TransactionDrawer'\n\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(walletReducer, initWalletState)\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [open, setOpen] = React.useState(false)\n\n  const handleClose = () => {\n    setOpen(false);\n  }\n  React.useEffect(() => {\n    const loadWallet = async (data: string) => {\n      let wallet = JSON.parse(data)\n      console.log(JSON.parse(data))\n      let walletDeets = await addWallet(wallet)\n      let tokens = await getTokens(walletDeets.address);\n      dispatch({ type: 'ADD_WALLET', payload: { ...walletDeets, key: wallet,  tokens: tokens } })\n    }\n    get('wallet').then((data: any) => {\n      if (data) {\n        try {\n          loadWallet(data)\n        }\n        catch (err) { console.log('Error loading wallet', err) }\n      }\n    })\n  }, [])\n\n  const WalletModal = () => {\n    return (<Modal isCentered isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Load Wallet</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <WalletLoader onClose={onClose} />\n        </ModalBody>\n        <ModalFooter>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n    )\n  }\n\n  return (\n    <WalletContext.Provider value={{ dispatch, state }}>\n      <ChakraProvider theme={theme}>\n        <PortalManager >\n          <Stack w=\"100%\" align=\"center\" >\n            <Heading>ArMob 2.0</Heading>\n            <Tabs isFitted align=\"center\" variant=\"enclosed-colored\">\n              <TabPanels w=\"90vw\">\n                <TabPanel>\n                  {state.address !== '' ?\n                    <Box>\n                      <Tokens />\n                    </Box>\n                    :\n                    <Button onClick={onOpen}>Open Wallet</Button>\n                  }\n                </TabPanel>\n                <TabPanel>\n                  {state.address !== '' ?\n                    <Transactions />\n                    :\n                    <Button onClick={onOpen}>Open Wallet</Button>\n                  }\n                </TabPanel>\n              </TabPanels>\n              <TabList position=\"fixed\" bottom=\"0px\" left=\"0px\" w=\"100vw\">\n                <Tab>Wallet</Tab>\n                <Tab>Transactions</Tab>\n              </TabList>\n            </Tabs>\n          </Stack>\n          <Portal >\n            <SpeedDial>\n              {state.address === '' &&\n                <SpeedDialItem icon={<FaWallet />} label=\"Open Wallet\" clickHandler={() => {\n                  onOpen()\n                }} />}\n              {state.address !== '' &&\n                <SpeedDialItem icon={<FaWallet />} label=\"Close Wallet\" clickHandler={async () => {\n                  await del('wallet');\n                  dispatch({ type: 'ADD_WALLET', payload: { address: '', balance: '', key: '' } });\n                }} />}\n               {state.address !== '' && <SpeedDialItem icon={<FaUpload />} label=\"Upload File\" clickHandler={() => setOpen(true)} />\n                \n              }\n            </SpeedDial>\n          </Portal>\n          <WalletModal />\n          <TransactionDrawer isOpen={open} close={handleClose} />\n        </PortalManager>\n      </ChakraProvider>\n    </WalletContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}